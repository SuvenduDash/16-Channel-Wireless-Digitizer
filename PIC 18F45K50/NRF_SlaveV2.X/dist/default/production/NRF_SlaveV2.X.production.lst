

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu May 25 17:36:04 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           ; Version 1.41
    57                           ; Generated 25/01/2017 GMT
    58                           ; 
    59                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC18F45K50 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     
    91                           	psect	smallconst
    92  000800                     __psmallconst:
    93                           	opt stack 0
    94  000800  00                 	db	0
    95  000801                     _dpowers:
    96                           	opt stack 0
    97  000801  0001               	dw	1
    98  000803  0000               	dw	0
    99  000805  000A               	dw	10
   100  000807  0000               	dw	0
   101  000809  0064               	dw	100
   102  00080B  0000               	dw	0
   103  00080D  03E8               	dw	1000
   104  00080F  0000               	dw	0
   105  000811  2710               	dw	10000
   106  000813  0000               	dw	0
   107  000815  86A0               	dw	34464
   108  000817  0001               	dw	1
   109  000819  4240               	dw	16960
   110  00081B  000F               	dw	15
   111  00081D  9680               	dw	38528
   112  00081F  0098               	dw	152
   113  000821  E100               	dw	57600
   114  000823  05F5               	dw	1525
   115  000825  CA00               	dw	51712
   116  000827  3B9A               	dw	15258
   117  000829                     __end_of_dpowers:
   118                           	opt stack 0
   119  000829                     __powers_:
   120                           	opt stack 0
   121  000829  00                 	db	0
   122  00082A  80                 	db	128
   123  00082B  3F                 	db	63
   124  00082C  00                 	db	0
   125  00082D  20                 	db	32
   126  00082E  41                 	db	65
   127  00082F  00                 	db	0
   128  000830  C8                 	db	200
   129  000831  42                 	db	66
   130  000832  00                 	db	0
   131  000833  7A                 	db	122
   132  000834  44                 	db	68
   133  000835  40                 	db	64
   134  000836  1C                 	db	28
   135  000837  46                 	db	70
   136  000838  50                 	db	80
   137  000839  C3                 	db	195
   138  00083A  47                 	db	71
   139  00083B  24                 	db	36
   140  00083C  74                 	db	116
   141  00083D  49                 	db	73
   142  00083E  97                 	db	151
   143  00083F  18                 	db	24
   144  000840  4B                 	db	75
   145  000841  BC                 	db	188
   146  000842  BE                 	db	190
   147  000843  4C                 	db	76
   148  000844  6B                 	db	107
   149  000845  6E                 	db	110
   150  000846  4E                 	db	78
   151  000847  03                 	db	3
   152  000848  15                 	db	21
   153  000849  50                 	db	80
   154  00084A  79                 	db	121
   155  00084B  AD                 	db	173
   156  00084C  60                 	db	96
   157  00084D  F3                 	db	243
   158  00084E  49                 	db	73
   159  00084F  71                 	db	113
   160  000850                     __end_of__powers_:
   161                           	opt stack 0
   162  000850                     __npowers_:
   163                           	opt stack 0
   164  000850  00                 	db	0
   165  000851  80                 	db	128
   166  000852  3F                 	db	63
   167  000853  CD                 	db	205
   168  000854  CC                 	db	204
   169  000855  3D                 	db	61
   170  000856  D7                 	db	215
   171  000857  23                 	db	35
   172  000858  3C                 	db	60
   173  000859  12                 	db	18
   174  00085A  83                 	db	131
   175  00085B  3A                 	db	58
   176  00085C  B7                 	db	183
   177  00085D  D1                 	db	209
   178  00085E  38                 	db	56
   179  00085F  C6                 	db	198
   180  000860  27                 	db	39
   181  000861  37                 	db	55
   182  000862  38                 	db	56
   183  000863  86                 	db	134
   184  000864  35                 	db	53
   185  000865  C0                 	db	192
   186  000866  D6                 	db	214
   187  000867  33                 	db	51
   188  000868  CC                 	db	204
   189  000869  2B                 	db	43
   190  00086A  32                 	db	50
   191  00086B  70                 	db	112
   192  00086C  89                 	db	137
   193  00086D  30                 	db	48
   194  00086E  E7                 	db	231
   195  00086F  DB                 	db	219
   196  000870  2E                 	db	46
   197  000871  E5                 	db	229
   198  000872  3C                 	db	60
   199  000873  1E                 	db	30
   200  000874  42                 	db	66
   201  000875  A2                 	db	162
   202  000876  0D                 	db	13
   203  000877                     __end_of__npowers_:
   204                           	opt stack 0
   205  0000                     _ANSELA	set	3931
   206  0000                     _ANSELE	set	3935
   207  0000                     _ANSELD	set	3934
   208  0000                     _ANSELB	set	3932
   209  0000                     _ANSELC	set	3933
   210  0000                     _ANSELBbits	set	3932
   211  0000                     _WPUB	set	3973
   212  0000                     _TRISC	set	3988
   213  0000                     _TRISB	set	3987
   214  0000                     _TRISA	set	3986
   215  0000                     _TRISE	set	3990
   216  0000                     _LATC	set	3979
   217  0000                     _LATB	set	3978
   218  0000                     _LATA	set	3977
   219  0000                     _LATD	set	3980
   220  0000                     _LATE	set	3981
   221  0000                     _ACTCON	set	4021
   222  0000                     _OSCTUNE	set	3995
   223  0000                     _OSCCON2	set	4050
   224  0000                     _OSCCON	set	4051
   225  0000                     _PORTDbits	set	3971
   226  0000                     _TRISD	set	3989
   227  0000                     _PORTD	set	3971
   228  0000                     _INTCON2bits	set	4081
   229  0000                     _PIR1bits	set	3998
   230  0000                     _SSP1BUF	set	4041
   231  0000                     _SSP1STATbits	set	4039
   232  0000                     _TRISCbits	set	3988
   233  0000                     _TRISAbits	set	3986
   234  0000                     _TRISBbits	set	3987
   235  0000                     _SSP1CON1bits	set	4038
   236  0000                     _LATBbits	set	3978
   237  0000                     _INTCON3bits	set	4080
   238  0000                     _INTCONbits	set	4082
   239  000877                     STR_1:
   240  000877  48                 	db	72	;'H'
   241  000878  61                 	db	97	;'a'
   242  000879  6C                 	db	108	;'l'
   243  00087A  6C                 	db	108	;'l'
   244  00087B  20                 	db	32
   245  00087C  56                 	db	86	;'V'
   246  00087D  61                 	db	97	;'a'
   247  00087E  6C                 	db	108	;'l'
   248  00087F  75                 	db	117	;'u'
   249  000880  65                 	db	101	;'e'
   250  000881  2E                 	db	46
   251  000882  20                 	db	32
   252  000883  3D                 	db	61	;'='
   253  000884  20                 	db	32
   254  000885  00                 	db	0
   255  000886                     STR_2:
   256  000886  25                 	db	37
   257  000887  2E                 	db	46
   258  000888  33                 	db	51	;'3'
   259  000889  67                 	db	103	;'g'
   260  00088A  00                 	db	0
   261                           
   262                           ; #config settings
   263  00088B  00                 	db	0	; dummy byte at the end
   264  0000                     
   265                           	psect	cinit
   266  002E8A                     __pcinit:
   267                           	opt stack 0
   268  002E8A                     start_initialization:
   269                           	opt stack 0
   270  002E8A                     __initialization:
   271                           	opt stack 0
   272                           
   273                           ; Clear objects allocated to COMRAM (16 bytes)
   274  002E8A  EE00  F03B         	lfsr	0,__pbssCOMRAM
   275  002E8E  0E10               	movlw	16
   276  002E90                     clear_0:
   277  002E90  6AEE               	clrf	postinc0,c
   278  002E92  06E8               	decf	wreg,f,c
   279  002E94  E1FD               	bnz	clear_0
   280  002E96                     end_of_initialization:
   281                           	opt stack 0
   282  002E96                     __end_of__initialization:
   283                           	opt stack 0
   284  002E96  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   285  002E98  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   286  002E9A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   287  002E9C  6EF8               	movwf	tblptru,c
   288  002E9E  0100               	movlb	0
   289  002EA0  EF20  F014         	goto	_main	;jump to C main() function
   290                           tblptru	equ	0xFF8
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           
   294                           	psect	bssCOMRAM
   295  00003B                     __pbssCOMRAM:
   296                           	opt stack 0
   297  00003B                     _received_string:
   298                           	opt stack 0
   299  00003B                     	ds	15
   300  00004A                     _PTX:
   301                           	opt stack 0
   302  00004A                     	ds	1
   303                           tblptru	equ	0xFF8
   304                           postinc0	equ	0xFEE
   305                           wreg	equ	0xFE8
   306                           
   307                           	psect	cstackBANK0
   308  000060                     __pcstackBANK0:
   309                           	opt stack 0
   310  000060                     ??___lltoft:
   311                           
   312                           ; 1 bytes @ 0x0
   313  000060                     	ds	4
   314  000064                     ?___ftneg:
   315                           	opt stack 0
   316  000064                     ___ftneg@f1:
   317                           	opt stack 0
   318                           
   319                           ; 3 bytes @ 0x4
   320  000064                     	ds	3
   321  000067                     ?___ftmul:
   322                           	opt stack 0
   323  000067                     ___ftmul@f1:
   324                           	opt stack 0
   325                           
   326                           ; 3 bytes @ 0x7
   327  000067                     	ds	3
   328  00006A                     ___ftmul@f2:
   329                           	opt stack 0
   330                           
   331                           ; 3 bytes @ 0xA
   332  00006A                     	ds	3
   333  00006D                     ??___ftmul:
   334                           
   335                           ; 1 bytes @ 0xD
   336  00006D                     	ds	3
   337  000070                     ___ftmul@exp:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0x10
   341  000070                     	ds	1
   342  000071                     ___ftmul@f3_as_product:
   343                           	opt stack 0
   344                           
   345                           ; 3 bytes @ 0x11
   346  000071                     	ds	3
   347  000074                     ___ftmul@cntr:
   348                           	opt stack 0
   349                           
   350                           ; 1 bytes @ 0x14
   351  000074                     	ds	1
   352  000075                     ___ftmul@sign:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x15
   356  000075                     	ds	1
   357  000076                     ?_fround:
   358                           	opt stack 0
   359  000076                     ?_scale:
   360                           	opt stack 0
   361                           
   362                           ; 3 bytes @ 0x16
   363  000076                     	ds	3
   364  000079                     _fround$1748:
   365                           	opt stack 0
   366  000079                     _scale$1749:
   367                           	opt stack 0
   368                           
   369                           ; 3 bytes @ 0x19
   370  000079                     	ds	3
   371  00007C                     scale@scl:
   372                           	opt stack 0
   373  00007C                     _fround$1747:
   374                           	opt stack 0
   375                           
   376                           ; 3 bytes @ 0x1C
   377  00007C                     	ds	1
   378  00007D                     ?___ftdiv:
   379                           	opt stack 0
   380  00007D                     ___ftdiv@f1:
   381                           	opt stack 0
   382                           
   383                           ; 3 bytes @ 0x1D
   384  00007D                     	ds	2
   385  00007F                     fround@prec:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x1F
   389  00007F                     	ds	1
   390  000080                     ?___ftadd:
   391                           	opt stack 0
   392  000080                     ___ftadd@f1:
   393                           	opt stack 0
   394  000080                     ___ftdiv@f2:
   395                           	opt stack 0
   396                           
   397                           ; 3 bytes @ 0x20
   398  000080                     	ds	3
   399  000083                     ??___ftdiv:
   400  000083                     ___ftadd@f2:
   401                           	opt stack 0
   402                           
   403                           ; 3 bytes @ 0x23
   404  000083                     	ds	3
   405  000086                     ??___ftadd:
   406  000086                     ___ftdiv@cntr:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x26
   410  000086                     	ds	1
   411  000087                     ___ftdiv@f3:
   412                           	opt stack 0
   413                           
   414                           ; 3 bytes @ 0x27
   415  000087                     	ds	2
   416  000089                     ___ftadd@sign:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0x29
   420  000089                     	ds	1
   421  00008A                     ___ftadd@exp2:
   422                           	opt stack 0
   423  00008A                     ___ftdiv@exp:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x2A
   427  00008A                     	ds	1
   428  00008B                     ___ftadd@exp1:
   429                           	opt stack 0
   430  00008B                     ___ftdiv@sign:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x2B
   434  00008B                     	ds	1
   435  00008C                     ?___ftsub:
   436                           	opt stack 0
   437  00008C                     ___ftge@ff1:
   438                           	opt stack 0
   439  00008C                     ___ftsub@f1:
   440                           	opt stack 0
   441                           
   442                           ; 3 bytes @ 0x2C
   443  00008C                     	ds	3
   444  00008F                     ___ftge@ff2:
   445                           	opt stack 0
   446  00008F                     ___ftsub@f2:
   447                           	opt stack 0
   448                           
   449                           ; 3 bytes @ 0x2F
   450  00008F                     	ds	3
   451  000092                     ??___ftge:
   452                           
   453                           ; 1 bytes @ 0x32
   454  000092                     	ds	3
   455  000095                     ?_sprintf:
   456                           	opt stack 0
   457  000095                     sprintf@sp:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x35
   461  000095                     	ds	2
   462  000097                     sprintf@f:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x37
   466  000097                     	ds	4
   467  00009B                     ??_sprintf:
   468                           
   469                           ; 1 bytes @ 0x3B
   470  00009B                     	ds	6
   471  0000A1                     _sprintf$1750:
   472                           	opt stack 0
   473                           
   474                           ; 3 bytes @ 0x41
   475  0000A1                     	ds	3
   476  0000A4                     sprintf@ap:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x44
   480  0000A4                     	ds	2
   481  0000A6                     sprintf@temp:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x46
   485  0000A6                     	ds	3
   486  0000A9                     sprintf@flag:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x49
   490  0000A9                     	ds	2
   491  0000AB                     sprintf@tmpval:
   492                           	opt stack 0
   493                           
   494                           ; 4 bytes @ 0x4B
   495  0000AB                     	ds	4
   496  0000AF                     sprintf@val:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x4F
   500  0000AF                     	ds	4
   501  0000B3                     sprintf@exp:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x53
   505  0000B3                     	ds	2
   506  0000B5                     sprintf@prec:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x55
   510  0000B5                     	ds	2
   511  0000B7                     sprintf@fval:
   512                           	opt stack 0
   513                           
   514                           ; 3 bytes @ 0x57
   515  0000B7                     	ds	3
   516  0000BA                     sprintf@c:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x5A
   520  0000BA                     	ds	1
   521  0000BB                     main@hall:
   522                           	opt stack 0
   523                           
   524                           ; 32 bytes @ 0x5B
   525  0000BB                     	ds	32
   526  0000DB                     main@Buffer:
   527                           	opt stack 0
   528                           
   529                           ; 20 bytes @ 0x7B
   530  0000DB                     	ds	20
   531  0000EF                     main@nRF_status:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x8F
   535  0000EF                     	ds	1
   536  0000F0                     main@zaehler:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x90
   540  0000F0                     	ds	1
   541                           tblptru	equ	0xFF8
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           
   545                           	psect	cstackCOMRAM
   546  000001                     __pcstackCOMRAM:
   547                           	opt stack 0
   548  000001                     i2spi_fast_shift@data:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x0
   552  000001                     	ds	1
   553  000002                     i2wl_module_config_register@value:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x1
   557  000002                     	ds	1
   558  000003                     i2wl_module_config_register@reg:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x2
   562  000003                     	ds	1
   563  000004                     ??_ISR:
   564                           
   565                           ; 1 bytes @ 0x3
   566  000004                     	ds	14
   567  000012                     ISR@status:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x11
   571  000012                     	ds	1
   572  000013                     ??_isdigit:
   573  000013                     ?___awmod:
   574                           	opt stack 0
   575  000013                     ?___ftpack:
   576                           	opt stack 0
   577  000013                     ?__tdiv_to_l_:
   578                           	opt stack 0
   579  000013                     ?__div_to_l_:
   580                           	opt stack 0
   581  000013                     ?___lldiv:
   582                           	opt stack 0
   583  000013                     ?___llmod:
   584                           	opt stack 0
   585  000013                     spi_fast_shift@data:
   586                           	opt stack 0
   587  000013                     LCDWriteNibble@rs:
   588                           	opt stack 0
   589  000013                     __delay_10ms@length:
   590                           	opt stack 0
   591  000013                     spi_transfer_sync@dataout:
   592                           	opt stack 0
   593  000013                     ___awmod@dividend:
   594                           	opt stack 0
   595  000013                     __div_to_l_@f1:
   596                           	opt stack 0
   597  000013                     ___ftpack@arg:
   598                           	opt stack 0
   599  000013                     __tdiv_to_l_@f1:
   600                           	opt stack 0
   601  000013                     ___lldiv@dividend:
   602                           	opt stack 0
   603  000013                     ___llmod@dividend:
   604                           	opt stack 0
   605                           
   606                           ; 4 bytes @ 0x12
   607  000013                     	ds	1
   608  000014                     wl_module_data_ready@status:
   609                           	opt stack 0
   610  000014                     wl_module_config_register@value:
   611                           	opt stack 0
   612  000014                     LCDWriteNibble@ch:
   613                           	opt stack 0
   614  000014                     _isdigit$1361:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x13
   618  000014                     	ds	1
   619  000015                     ??__delay_10ms:
   620  000015                     wl_module_config_register@reg:
   621                           	opt stack 0
   622  000015                     LCDPutChar@ch:
   623                           	opt stack 0
   624  000015                     LCDPutCmd@ch:
   625                           	opt stack 0
   626  000015                     isdigit@c:
   627                           	opt stack 0
   628  000015                     spi_transfer_sync@datain:
   629                           	opt stack 0
   630  000015                     ___awmod@divisor:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x14
   634  000015                     	ds	1
   635  000016                     ??_LCD_Initialize:
   636  000016                     LCDGoto@ln:
   637                           	opt stack 0
   638  000016                     ___ftpack@exp:
   639                           	opt stack 0
   640  000016                     LCDPutStr@str:
   641                           	opt stack 0
   642  000016                     __div_to_l_@f2:
   643                           	opt stack 0
   644  000016                     __tdiv_to_l_@f2:
   645                           	opt stack 0
   646                           
   647                           ; 3 bytes @ 0x15
   648  000016                     	ds	1
   649  000017                     ??_LCDGoto:
   650  000017                     ___awmod@counter:
   651                           	opt stack 0
   652  000017                     ___ftpack@sign:
   653                           	opt stack 0
   654  000017                     spi_transfer_sync@length:
   655                           	opt stack 0
   656  000017                     ___lldiv@divisor:
   657                           	opt stack 0
   658  000017                     ___llmod@divisor:
   659                           	opt stack 0
   660                           
   661                           ; 4 bytes @ 0x16
   662  000017                     	ds	1
   663  000018                     ??_LCDPutStr:
   664  000018                     ??___ftpack:
   665  000018                     ___awmod@sign:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x17
   669  000018                     	ds	1
   670  000019                     ??__tdiv_to_l_:
   671  000019                     ?___awdiv:
   672                           	opt stack 0
   673  000019                     wl_module_get_data@data:
   674                           	opt stack 0
   675  000019                     _LCDGoto$1025:
   676                           	opt stack 0
   677  000019                     ___awdiv@dividend:
   678                           	opt stack 0
   679  000019                     __div_to_l_@quot:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x18
   683  000019                     	ds	1
   684  00001A                     LCDPutStr@i:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x19
   688  00001A                     	ds	1
   689  00001B                     wl_module_get_data@status:
   690                           	opt stack 0
   691  00001B                     LCDGoto@pos:
   692                           	opt stack 0
   693  00001B                     ___llmod@counter:
   694                           	opt stack 0
   695  00001B                     ___awdiv@divisor:
   696                           	opt stack 0
   697  00001B                     ___lldiv@quotient:
   698                           	opt stack 0
   699                           
   700                           ; 4 bytes @ 0x1A
   701  00001B                     	ds	1
   702  00001C                     __tdiv_to_l_@quot:
   703                           	opt stack 0
   704                           
   705                           ; 4 bytes @ 0x1B
   706  00001C                     	ds	1
   707  00001D                     ___awdiv@counter:
   708                           	opt stack 0
   709  00001D                     __div_to_l_@cntr:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x1C
   713  00001D                     	ds	1
   714  00001E                     ___awdiv@sign:
   715                           	opt stack 0
   716  00001E                     __div_to_l_@exp1:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0x1D
   720  00001E                     	ds	1
   721  00001F                     ___lldiv@counter:
   722                           	opt stack 0
   723  00001F                     ___awdiv@quotient:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x1E
   727  00001F                     	ds	1
   728  000020                     __tdiv_to_l_@cntr:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x1F
   732  000020                     	ds	1
   733  000021                     ?___wmul:
   734                           	opt stack 0
   735  000021                     __tdiv_to_l_@exp1:
   736                           	opt stack 0
   737  000021                     ___wmul@multiplier:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x20
   741  000021                     	ds	2
   742  000023                     ___wmul@multiplicand:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x22
   746  000023                     	ds	2
   747  000025                     ___wmul@product:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x24
   751  000025                     	ds	2
   752  000027                     ?___fttol:
   753                           	opt stack 0
   754  000027                     ___fttol@f1:
   755                           	opt stack 0
   756                           
   757                           ; 3 bytes @ 0x26
   758  000027                     	ds	4
   759  00002B                     ??___fttol:
   760                           
   761                           ; 1 bytes @ 0x2A
   762  00002B                     	ds	5
   763  000030                     ___fttol@sign1:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x2F
   767  000030                     	ds	1
   768  000031                     ___fttol@lval:
   769                           	opt stack 0
   770                           
   771                           ; 4 bytes @ 0x30
   772  000031                     	ds	4
   773  000035                     ___fttol@exp1:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x34
   777  000035                     	ds	1
   778  000036                     ?___lltoft:
   779                           	opt stack 0
   780  000036                     ___lltoft@c:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0x35
   784  000036                     	ds	4
   785  00003A                     ___lltoft@exp:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x39
   789  00003A                     	ds	1
   790  00003B                     tblptru	equ	0xFF8
   791                           postinc0	equ	0xFEE
   792                           wreg	equ	0xFE8
   793                           
   794                           ; 1 bytes @ 0x3A
   795 ;;
   796 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   797 ;;
   798 ;; *************** function _main *****************
   799 ;; Defined at:
   800 ;;		line 41 in file "main.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;		None
   803 ;; Auto vars:     Size  Location     Type
   804 ;;  hall           32   91[BANK0 ] unsigned char [32]
   805 ;;  Buffer         20  123[BANK0 ] unsigned char [20]
   806 ;;  zaehler         1  144[BANK0 ] unsigned char 
   807 ;;  nRF_status      1  143[BANK0 ] unsigned char 
   808 ;; Return value:  Size  Location     Type
   809 ;;                  2   44[None  ] int 
   810 ;; Registers used:
   811 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   817 ;;      Params:         0       0       0       0       0       0       0       0       0
   818 ;;      Locals:         0      54       0       0       0       0       0       0       0
   819 ;;      Temps:          0       0       0       0       0       0       0       0       0
   820 ;;      Totals:         0      54       0       0       0       0       0       0       0
   821 ;;Total ram usage:       54 bytes
   822 ;; Hardware stack levels required when called:    7
   823 ;; This function calls:
   824 ;;		_LCDGoto
   825 ;;		_LCDPutCmd
   826 ;;		_LCDPutStr
   827 ;;		_LCD_Initialize
   828 ;;		_SYSTEM_Initialize
   829 ;;		__delay_10ms
   830 ;;		_sprintf
   831 ;;		_wl_module_config
   832 ;;		_wl_module_data_ready
   833 ;;		_wl_module_get_data
   834 ;;		_wl_module_init
   835 ;; This function is called by:
   836 ;;		Startup code after reset
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text0
   841  002840                     __ptext0:
   842                           	opt stack 0
   843  002840                     _main:
   844                           	opt stack 24
   845                           
   846                           ;main.c: 43: unsigned char hall[32];
   847                           ;main.c: 44: unsigned char nRF_status;
   848                           ;main.c: 45: unsigned char zaehler = 0;
   849                           
   850                           ;incstack = 0
   851  002840  0E00               	movlw	0
   852  002842  0100               	movlb	0	; () banked
   853  002844  6FF0               	movwf	main@zaehler& (0+255),b
   854                           
   855                           ; BSR set to: 0
   856                           ;main.c: 46: char Buffer[20];
   857                           ;main.c: 48: SYSTEM_Initialize();
   858  002846  EC8F  F017         	call	_SYSTEM_Initialize	;wreg free
   859                           
   860                           ;main.c: 50: wl_module_init();
   861  00284A  EC52  F017         	call	_wl_module_init	;wreg free
   862                           
   863                           ;main.c: 51: _delay_10ms(5);
   864  00284E  0E00               	movlw	0
   865  002850  6E14               	movwf	__delay_10ms@length+1,c
   866  002852  0E05               	movlw	5
   867  002854  6E13               	movwf	__delay_10ms@length,c
   868  002856  EC18  F017         	call	__delay_10ms	;wreg free
   869                           
   870                           ;main.c: 54: LCD_Initialize();
   871  00285A  EC4E  F016         	call	_LCD_Initialize	;wreg free
   872                           
   873                           ;main.c: 56: LCDPutCmd(0x0C);
   874  00285E  0E0C               	movlw	12
   875  002860  ECB5  F016         	call	_LCDPutCmd
   876                           
   877                           ;main.c: 62: INTCONbits.PEIE = 1;
   878  002864  8CF2               	bsf	intcon,6,c	;volatile
   879                           
   880                           ;main.c: 63: INTCONbits.GIE = 1;
   881  002866  8EF2               	bsf	intcon,7,c	;volatile
   882                           
   883                           ;main.c: 65: wl_module_config();
   884  002868  EC85  F016         	call	_wl_module_config	;wreg free
   885  00286C                     l4441:
   886  00286C  EC37  F017         	call	_wl_module_data_ready	;wreg free
   887  002870  0900               	iorlw	0
   888  002872  B4D8               	btfsc	status,2,c
   889  002874  D7FB               	goto	l4441
   890                           
   891                           ;main.c: 69: nRF_status = wl_module_get_data(hall);
   892  002876  0EBB               	movlw	low main@hall
   893  002878  6E19               	movwf	wl_module_get_data@data,c
   894  00287A  0E00               	movlw	high main@hall
   895  00287C  6E1A               	movwf	wl_module_get_data@data+1,c
   896  00287E  EC6A  F016         	call	_wl_module_get_data	;wreg free
   897  002882  0100               	movlb	0	; () banked
   898  002884  6FEF               	movwf	main@nRF_status& (0+255),b
   899                           
   900                           ; BSR set to: 0
   901                           ;main.c: 70: zaehler = hall[0];
   902  002886  C0BB  F0F0         	movff	main@hall,main@zaehler
   903                           
   904                           ; BSR set to: 0
   905                           ;main.c: 71: LCDPutStr("Hall Value. = ");
   906  00288A  0E77               	movlw	low STR_1
   907  00288C  6E16               	movwf	LCDPutStr@str,c
   908  00288E  0E08               	movlw	high STR_1
   909  002890  6E17               	movwf	LCDPutStr@str+1,c
   910  002892  ECEC  F014         	call	_LCDPutStr	;wreg free
   911                           
   912                           ;main.c: 72: sprintf(Buffer, "%.3g", zaehler);
   913  002896  0EDB               	movlw	low main@Buffer
   914  002898  0100               	movlb	0	; () banked
   915  00289A  6F95               	movwf	sprintf@sp& (0+255),b
   916  00289C  0E00               	movlw	high main@Buffer
   917  00289E  0100               	movlb	0	; () banked
   918  0028A0  6F96               	movwf	(sprintf@sp+1)& (0+255),b
   919  0028A2  0E86               	movlw	low STR_2
   920  0028A4  0100               	movlb	0	; () banked
   921  0028A6  6F97               	movwf	sprintf@f& (0+255),b
   922  0028A8  0E08               	movlw	high STR_2
   923  0028AA  0100               	movlb	0	; () banked
   924  0028AC  6F98               	movwf	(sprintf@f+1)& (0+255),b
   925  0028AE  C0F0  F099         	movff	main@zaehler,?_sprintf+4
   926  0028B2  0100               	movlb	0	; () banked
   927  0028B4  6B9A               	clrf	(?_sprintf+5)& (0+255),b
   928  0028B6  EC46  F004         	call	_sprintf	;wreg free
   929                           
   930                           ;main.c: 73: LCDPutStr(Buffer);
   931  0028BA  0EDB               	movlw	low main@Buffer
   932  0028BC  6E16               	movwf	LCDPutStr@str,c
   933  0028BE  0E00               	movlw	high main@Buffer
   934  0028C0  6E17               	movwf	LCDPutStr@str+1,c
   935  0028C2  ECEC  F014         	call	_LCDPutStr	;wreg free
   936                           
   937                           ;main.c: 74: LCDGoto(0,0);
   938  0028C6  0E00               	movlw	0
   939  0028C8  6E16               	movwf	LCDGoto@ln,c
   940  0028CA  0E00               	movlw	0
   941  0028CC  EC15  F016         	call	_LCDGoto
   942  0028D0  D7CD               	goto	l4441
   943  0028D2                     __end_of_main:
   944                           	opt stack 0
   945                           tblptru	equ	0xFF8
   946                           intcon	equ	0xFF2
   947                           postinc0	equ	0xFEE
   948                           wreg	equ	0xFE8
   949                           status	equ	0xFD8
   950                           
   951 ;; *************** function _wl_module_init *****************
   952 ;; Defined at:
   953 ;;		line 23 in file "wl_module.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;		None
   956 ;; Auto vars:     Size  Location     Type
   957 ;;		None
   958 ;; Return value:  Size  Location     Type
   959 ;;                  1    wreg      void 
   960 ;; Registers used:
   961 ;;		cstack
   962 ;; Tracked objects:
   963 ;;		On entry : 0/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   967 ;;      Params:         0       0       0       0       0       0       0       0       0
   968 ;;      Locals:         0       0       0       0       0       0       0       0       0
   969 ;;      Temps:          0       0       0       0       0       0       0       0       0
   970 ;;      Totals:         0       0       0       0       0       0       0       0       0
   971 ;;Total ram usage:        0 bytes
   972 ;; Hardware stack levels used:    1
   973 ;; Hardware stack levels required when called:    4
   974 ;; This function calls:
   975 ;;		_spi_init
   976 ;; This function is called by:
   977 ;;		_main
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           	psect	text1
   982  002EA4                     __ptext1:
   983                           	opt stack 0
   984  002EA4                     _wl_module_init:
   985                           	opt stack 26
   986                           
   987                           ;wl_module.c: 28: TRISBbits.TRISB4 = 0;
   988                           
   989                           ;incstack = 0
   990  002EA4  9893               	bcf	3987,4,c	;volatile
   991                           
   992                           ;wl_module.c: 29: TRISBbits.TRISB3 = 0;
   993  002EA6  9693               	bcf	3987,3,c	;volatile
   994                           
   995                           ;wl_module.c: 30: LATBbits.LATB3 = 0;;
   996  002EA8  968A               	bcf	3978,3,c	;volatile
   997                           
   998                           ;wl_module.c: 31: LATBbits.LATB4 = 1;;
   999  002EAA  888A               	bsf	3978,4,c	;volatile
  1000                           
  1001                           ;wl_module.c: 34: ANSELBbits.ANSB2 = 0;
  1002  002EAC  010F               	movlb	15	; () banked
  1003  002EAE  955C               	bcf	92,2,b	;volatile
  1004                           
  1005                           ;wl_module.c: 35: TRISBbits.TRISB2 = 1;
  1006  002EB0  8493               	bsf	3987,2,c	;volatile
  1007                           
  1008                           ;wl_module.c: 36: INTCON2bits.INTEDG2 = 0;
  1009  002EB2  98F1               	bcf	intcon2,4,c	;volatile
  1010                           
  1011                           ;wl_module.c: 37: INTCON3bits.INT2IE = 1;
  1012  002EB4  88F0               	bsf	intcon3,4,c	;volatile
  1013                           
  1014                           ; BSR set to: 15
  1015                           ;wl_module.c: 40: spi_init();
  1016  002EB6  EC08  F017         	call	_spi_init	;wreg free
  1017  002EBA  0012               	return		;funcret
  1018  002EBC                     __end_of_wl_module_init:
  1019                           	opt stack 0
  1020                           tblptru	equ	0xFF8
  1021                           intcon	equ	0xFF2
  1022                           intcon2	equ	0xFF1
  1023                           intcon3	equ	0xFF0
  1024                           postinc0	equ	0xFEE
  1025                           wreg	equ	0xFE8
  1026                           status	equ	0xFD8
  1027                           
  1028 ;; *************** function _spi_init *****************
  1029 ;; Defined at:
  1030 ;;		line 12 in file "spi.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;		None
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;		None
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  1    wreg      void 
  1037 ;; Registers used:
  1038 ;;		None
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1044 ;;      Params:         0       0       0       0       0       0       0       0       0
  1045 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1046 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1047 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1048 ;;Total ram usage:        0 bytes
  1049 ;; Hardware stack levels used:    1
  1050 ;; Hardware stack levels required when called:    3
  1051 ;; This function calls:
  1052 ;;		Nothing
  1053 ;; This function is called by:
  1054 ;;		_wl_module_init
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058                           	psect	text2
  1059  002E10                     __ptext2:
  1060                           	opt stack 0
  1061  002E10                     _spi_init:
  1062                           	opt stack 26
  1063                           
  1064                           ;spi.c: 14: SSP1CON1bits.SSPEN = 0;
  1065                           
  1066                           ;incstack = 0
  1067  002E10  9AC6               	bcf	4038,5,c	;volatile
  1068                           
  1069                           ;spi.c: 16: TRISBbits.TRISB0 = 1;
  1070  002E12  8093               	bsf	3987,0,c	;volatile
  1071                           
  1072                           ;spi.c: 19: ANSELBbits.ANSB0 =0;
  1073  002E14  010F               	movlb	15	; () banked
  1074  002E16  915C               	bcf	92,0,b	;volatile
  1075                           
  1076                           ;spi.c: 21: TRISAbits.TRISA5 = 1;
  1077  002E18  8A92               	bsf	3986,5,c	;volatile
  1078                           
  1079                           ;spi.c: 25: TRISCbits.TRISC7 = 0;
  1080  002E1A  9E94               	bcf	3988,7,c	;volatile
  1081                           
  1082                           ;spi.c: 27: TRISCbits.TRISC6 = 0;
  1083  002E1C  9C94               	bcf	3988,6,c	;volatile
  1084                           
  1085                           ;spi.c: 31: SSP1CON1bits.CKP = 0;
  1086  002E1E  98C6               	bcf	4038,4,c	;volatile
  1087                           
  1088                           ;spi.c: 32: SSP1STATbits.CKE = 1;
  1089  002E20  8CC7               	bsf	4039,6,c	;volatile
  1090                           
  1091                           ;spi.c: 33: SSP1STATbits.SMP = 1;
  1092  002E22  8EC7               	bsf	4039,7,c	;volatile
  1093                           
  1094                           ;spi.c: 34: SSP1CON1bits.SSPM = 0;
  1095  002E24  90C6               	bcf	4038,0,c	;volatile
  1096  002E26  92C6               	bcf	4038,1,c	;volatile
  1097  002E28  94C6               	bcf	4038,2,c	;volatile
  1098  002E2A  96C6               	bcf	4038,3,c	;volatile
  1099                           
  1100                           ;spi.c: 35: SSP1CON1bits.SSPEN = 1;
  1101  002E2C  8AC6               	bsf	4038,5,c	;volatile
  1102                           
  1103                           ; BSR set to: 15
  1104  002E2E  0012               	return		;funcret
  1105  002E30                     __end_of_spi_init:
  1106                           	opt stack 0
  1107                           tblptru	equ	0xFF8
  1108                           intcon	equ	0xFF2
  1109                           intcon2	equ	0xFF1
  1110                           intcon3	equ	0xFF0
  1111                           postinc0	equ	0xFEE
  1112                           wreg	equ	0xFE8
  1113                           status	equ	0xFD8
  1114                           
  1115 ;; *************** function _wl_module_get_data *****************
  1116 ;; Defined at:
  1117 ;;		line 405 in file "wl_module.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;  data            2   24[COMRAM] PTR unsigned char 
  1120 ;;		 -> main@hall(32), 
  1121 ;; Auto vars:     Size  Location     Type
  1122 ;;  status          1   26[COMRAM] unsigned char 
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  1    wreg      unsigned char 
  1125 ;; Registers used:
  1126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1127 ;; Tracked objects:
  1128 ;;		On entry : 0/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1132 ;;      Params:         2       0       0       0       0       0       0       0       0
  1133 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1135 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1136 ;;Total ram usage:        3 bytes
  1137 ;; Hardware stack levels used:    1
  1138 ;; Hardware stack levels required when called:    5
  1139 ;; This function calls:
  1140 ;;		_spi_fast_shift
  1141 ;;		_spi_transfer_sync
  1142 ;;		_wl_module_config_register
  1143 ;; This function is called by:
  1144 ;;		_main
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text3
  1149  002CD4                     __ptext3:
  1150                           	opt stack 0
  1151  002CD4                     _wl_module_get_data:
  1152                           	opt stack 25
  1153                           
  1154                           ;wl_module.c: 408: unsigned char status;
  1155                           ;wl_module.c: 409: LATBbits.LATB4 = 0;;
  1156                           
  1157                           ; BSR set to: 15
  1158                           ;incstack = 0
  1159  002CD4  988A               	bcf	3978,4,c	;volatile
  1160                           
  1161                           ;wl_module.c: 410: status = spi_fast_shift( 0x61 );
  1162  002CD6  0E61               	movlw	97
  1163  002CD8  EC7F  F017         	call	_spi_fast_shift
  1164  002CDC  6E1B               	movwf	wl_module_get_data@status,c
  1165                           
  1166                           ;wl_module.c: 411: spi_transfer_sync(data,data,32);
  1167  002CDE  C019  F013         	movff	wl_module_get_data@data,spi_transfer_sync@dataout
  1168  002CE2  C01A  F014         	movff	wl_module_get_data@data+1,spi_transfer_sync@dataout+1
  1169  002CE6  C019  F015         	movff	wl_module_get_data@data,spi_transfer_sync@datain
  1170  002CEA  C01A  F016         	movff	wl_module_get_data@data+1,spi_transfer_sync@datain+1
  1171  002CEE  0E00               	movlw	0
  1172  002CF0  6E18               	movwf	spi_transfer_sync@length+1,c
  1173  002CF2  0E20               	movlw	32
  1174  002CF4  6E17               	movwf	spi_transfer_sync@length,c
  1175  002CF6  EC32  F016         	call	_spi_transfer_sync	;wreg free
  1176                           
  1177                           ;wl_module.c: 412: LATBbits.LATB4 = 1;;
  1178  002CFA  888A               	bsf	3978,4,c	;volatile
  1179                           
  1180                           ;wl_module.c: 413: wl_module_config_register(0x07,(1<<6));
  1181  002CFC  0E40               	movlw	64
  1182  002CFE  6E14               	movwf	wl_module_config_register@value,c
  1183  002D00  0E07               	movlw	7
  1184  002D02  EC5E  F017         	call	_wl_module_config_register
  1185                           
  1186                           ;wl_module.c: 414: return status;
  1187  002D06  501B               	movf	wl_module_get_data@status,w,c
  1188  002D08  0012               	return	
  1189  002D0A                     __end_of_wl_module_get_data:
  1190                           	opt stack 0
  1191                           tblptru	equ	0xFF8
  1192                           intcon	equ	0xFF2
  1193                           intcon2	equ	0xFF1
  1194                           intcon3	equ	0xFF0
  1195                           postinc0	equ	0xFEE
  1196                           wreg	equ	0xFE8
  1197                           status	equ	0xFD8
  1198                           
  1199 ;; *************** function _spi_transfer_sync *****************
  1200 ;; Defined at:
  1201 ;;		line 50 in file "spi.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;  dataout         2   18[COMRAM] PTR unsigned char 
  1204 ;;		 -> wl_module_get_arc_cnt@data(1), wl_module_get_plos_cnt@data(1), wl_module_get_rf_setup@data(1), wl_module_get_rf_
      +ch@data(1), 
  1205 ;;		 -> wl_module_fifo_rx_empty@data(1), wl_module_fifo_tx_empty@data(1), wl_module_get_rx_pw@data(1), wl_module_power_d
      +own@config(1), 
  1206 ;;		 -> wl_module_set_as_tx@config(1), main@hall(32), 
  1207 ;;  datain          2   20[COMRAM] PTR unsigned char 
  1208 ;;		 -> wl_module_get_arc_cnt@data(1), wl_module_get_plos_cnt@data(1), wl_module_get_rf_setup@data(1), wl_module_get_rf_
      +ch@data(1), 
  1209 ;;		 -> wl_module_fifo_rx_empty@data(1), wl_module_fifo_tx_empty@data(1), wl_module_get_rx_pw@data(1), wl_module_power_d
      +own@config(1), 
  1210 ;;		 -> wl_module_set_as_tx@config(1), main@hall(32), 
  1211 ;;  length          2   22[COMRAM] unsigned int 
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;		None
  1214 ;; Return value:  Size  Location     Type
  1215 ;;                  1    wreg      void 
  1216 ;; Registers used:
  1217 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1218 ;; Tracked objects:
  1219 ;;		On entry : 0/0
  1220 ;;		On exit  : 0/0
  1221 ;;		Unchanged: 0/0
  1222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1223 ;;      Params:         6       0       0       0       0       0       0       0       0
  1224 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1225 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1226 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1227 ;;Total ram usage:        6 bytes
  1228 ;; Hardware stack levels used:    1
  1229 ;; Hardware stack levels required when called:    3
  1230 ;; This function calls:
  1231 ;;		Nothing
  1232 ;; This function is called by:
  1233 ;;		_wl_module_get_data
  1234 ;;		_wl_module_read_register
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           	psect	text4
  1239  002C64                     __ptext4:
  1240                           	opt stack 0
  1241  002C64                     _spi_transfer_sync:
  1242                           	opt stack 26
  1243                           
  1244                           ;spi.c: 51: while(length){
  1245                           
  1246                           ;incstack = 0
  1247  002C64  D016               	goto	l2843
  1248  002C66                     l2833:
  1249                           
  1250                           ;spi.c: 52: SSP1BUF = *dataout;
  1251  002C66  C013  FFD9         	movff	spi_transfer_sync@dataout,fsr2l
  1252  002C6A  C014  FFDA         	movff	spi_transfer_sync@dataout+1,fsr2h
  1253  002C6E  50DF               	movf	indf2,w,c
  1254  002C70  6EC9               	movwf	4041,c	;volatile
  1255  002C72                     l91:
  1256  002C72  A69E               	btfss	3998,3,c	;volatile
  1257  002C74  D7FE               	goto	l91
  1258                           
  1259                           ;spi.c: 54: PIR1bits.SSP1IF = 0;
  1260  002C76  969E               	bcf	3998,3,c	;volatile
  1261                           
  1262                           ;spi.c: 55: *datain = SSP1BUF;
  1263  002C78  C015  FFD9         	movff	spi_transfer_sync@datain,fsr2l
  1264  002C7C  C016  FFDA         	movff	spi_transfer_sync@datain+1,fsr2h
  1265  002C80  CFC9 FFDF          	movff	4041,indf2	;volatile
  1266                           
  1267                           ;spi.c: 56: length--;
  1268  002C84  0617               	decf	spi_transfer_sync@length,f,c
  1269  002C86  A0D8               	btfss	status,0,c
  1270  002C88  0618               	decf	spi_transfer_sync@length+1,f,c
  1271                           
  1272                           ;spi.c: 57: dataout++;
  1273  002C8A  4A13               	infsnz	spi_transfer_sync@dataout,f,c
  1274  002C8C  2A14               	incf	spi_transfer_sync@dataout+1,f,c
  1275                           
  1276                           ;spi.c: 58: datain++;
  1277  002C8E  4A15               	infsnz	spi_transfer_sync@datain,f,c
  1278  002C90  2A16               	incf	spi_transfer_sync@datain+1,f,c
  1279  002C92                     l2843:
  1280  002C92  5017               	movf	spi_transfer_sync@length,w,c
  1281  002C94  1018               	iorwf	spi_transfer_sync@length+1,w,c
  1282  002C96  B4D8               	btfsc	status,2,c
  1283  002C98  0012               	return	
  1284  002C9A  D7E5               	goto	l2833
  1285  002C9C                     __end_of_spi_transfer_sync:
  1286                           	opt stack 0
  1287                           tblptru	equ	0xFF8
  1288                           intcon	equ	0xFF2
  1289                           intcon2	equ	0xFF1
  1290                           intcon3	equ	0xFF0
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           indf2	equ	0xFDF
  1294                           fsr2h	equ	0xFDA
  1295                           fsr2l	equ	0xFD9
  1296                           status	equ	0xFD8
  1297                           
  1298 ;; *************** function _wl_module_data_ready *****************
  1299 ;; Defined at:
  1300 ;;		line 307 in file "wl_module.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;		None
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  status          1   19[COMRAM] unsigned char 
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  1    wreg      unsigned char 
  1307 ;; Registers used:
  1308 ;;		wreg, status,2, status,0, cstack
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1314 ;;      Params:         0       0       0       0       0       0       0       0       0
  1315 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1316 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1317 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1318 ;;Total ram usage:        1 bytes
  1319 ;; Hardware stack levels used:    1
  1320 ;; Hardware stack levels required when called:    4
  1321 ;; This function calls:
  1322 ;;		_spi_fast_shift
  1323 ;; This function is called by:
  1324 ;;		_main
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text5
  1329  002E6E                     __ptext5:
  1330                           	opt stack 0
  1331  002E6E                     _wl_module_data_ready:
  1332                           	opt stack 26
  1333                           
  1334                           ;wl_module.c: 310: if (PTX) return 0;
  1335                           
  1336                           ;incstack = 0
  1337  002E6E  504A               	movf	_PTX,w,c	;volatile
  1338  002E70  B4D8               	btfsc	status,2,c
  1339  002E72  D002               	goto	l205
  1340  002E74  0E00               	movlw	0
  1341  002E76  0012               	return	
  1342  002E78                     l205:
  1343                           
  1344                           ;wl_module.c: 311: unsigned char status;
  1345                           ;wl_module.c: 313: LATBbits.LATB4 = 0;;
  1346  002E78  988A               	bcf	3978,4,c	;volatile
  1347                           
  1348                           ;wl_module.c: 314: status = spi_fast_shift(0xFF);
  1349  002E7A  0EFF               	movlw	255
  1350  002E7C  EC7F  F017         	call	_spi_fast_shift
  1351  002E80  6E14               	movwf	wl_module_data_ready@status,c
  1352                           
  1353                           ;wl_module.c: 315: LATBbits.LATB4 = 1;;
  1354  002E82  888A               	bsf	3978,4,c	;volatile
  1355                           
  1356                           ;wl_module.c: 316: return status & (1<<6);
  1357  002E84  5014               	movf	wl_module_data_ready@status,w,c
  1358  002E86  0B40               	andlw	64
  1359  002E88  0012               	return	
  1360  002E8A                     __end_of_wl_module_data_ready:
  1361                           	opt stack 0
  1362                           tblptru	equ	0xFF8
  1363                           intcon	equ	0xFF2
  1364                           intcon2	equ	0xFF1
  1365                           intcon3	equ	0xFF0
  1366                           postinc0	equ	0xFEE
  1367                           wreg	equ	0xFE8
  1368                           indf2	equ	0xFDF
  1369                           fsr2h	equ	0xFDA
  1370                           fsr2l	equ	0xFD9
  1371                           status	equ	0xFD8
  1372                           
  1373 ;; *************** function _wl_module_config *****************
  1374 ;; Defined at:
  1375 ;;		line 44 in file "wl_module.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;		None
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;		None
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2, status,0, cstack
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1389 ;;      Params:         0       0       0       0       0       0       0       0       0
  1390 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1391 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1392 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1393 ;;Total ram usage:        0 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    5
  1396 ;; This function calls:
  1397 ;;		_wl_module_config_register
  1398 ;; This function is called by:
  1399 ;;		_main
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text6
  1404  002D0A                     __ptext6:
  1405                           	opt stack 0
  1406  002D0A                     _wl_module_config:
  1407                           	opt stack 25
  1408                           
  1409                           ;wl_module.c: 49: wl_module_config_register(0x05,2);
  1410                           
  1411                           ;incstack = 0
  1412  002D0A  0E02               	movlw	2
  1413  002D0C  6E14               	movwf	wl_module_config_register@value,c
  1414  002D0E  0E05               	movlw	5
  1415  002D10  EC5E  F017         	call	_wl_module_config_register
  1416                           
  1417                           ;wl_module.c: 51: wl_module_config_register(0x06,(0x06 | 0x20));
  1418  002D14  0E26               	movlw	38
  1419  002D16  6E14               	movwf	wl_module_config_register@value,c
  1420  002D18  0E06               	movlw	6
  1421  002D1A  EC5E  F017         	call	_wl_module_config_register
  1422                           
  1423                           ;wl_module.c: 53: wl_module_config_register(0x11, 32);
  1424  002D1E  0E20               	movlw	32
  1425  002D20  6E14               	movwf	wl_module_config_register@value,c
  1426  002D22  0E11               	movlw	17
  1427  002D24  EC5E  F017         	call	_wl_module_config_register
  1428                           
  1429                           ;wl_module.c: 56: PTX = 0;
  1430  002D28  0E00               	movlw	0
  1431  002D2A  6E4A               	movwf	_PTX,c	;volatile
  1432                           
  1433                           ;wl_module.c: 57: wl_module_config_register(0x00, ( (1<<6) | (1<<3) | (1<<2) ) | ( (1<<1
      +                          ) | (1<<0) ) );
  1434  002D2C  0E4F               	movlw	79
  1435  002D2E  6E14               	movwf	wl_module_config_register@value,c
  1436  002D30  0E00               	movlw	0
  1437  002D32  EC5E  F017         	call	_wl_module_config_register
  1438                           
  1439                           ;wl_module.c: 58: LATBbits.LATB3 = 1;;
  1440  002D36  868A               	bsf	3978,3,c	;volatile
  1441  002D38  0012               	return		;funcret
  1442  002D3A                     __end_of_wl_module_config:
  1443                           	opt stack 0
  1444                           tblptru	equ	0xFF8
  1445                           intcon	equ	0xFF2
  1446                           intcon2	equ	0xFF1
  1447                           intcon3	equ	0xFF0
  1448                           postinc0	equ	0xFEE
  1449                           wreg	equ	0xFE8
  1450                           indf2	equ	0xFDF
  1451                           fsr2h	equ	0xFDA
  1452                           fsr2l	equ	0xFD9
  1453                           status	equ	0xFD8
  1454                           
  1455 ;; *************** function _wl_module_config_register *****************
  1456 ;; Defined at:
  1457 ;;		line 417 in file "wl_module.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;  reg             1    wreg     unsigned char 
  1460 ;;  value           1   19[COMRAM] unsigned char 
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;  reg             1   20[COMRAM] unsigned char 
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  1    wreg      void 
  1465 ;; Registers used:
  1466 ;;		wreg, status,2, status,0, cstack
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1472 ;;      Params:         1       0       0       0       0       0       0       0       0
  1473 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1474 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1475 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1476 ;;Total ram usage:        2 bytes
  1477 ;; Hardware stack levels used:    1
  1478 ;; Hardware stack levels required when called:    4
  1479 ;; This function calls:
  1480 ;;		_spi_fast_shift
  1481 ;; This function is called by:
  1482 ;;		_wl_module_config
  1483 ;;		_wl_module_get_data
  1484 ;;		_wl_module_rx_config
  1485 ;;		_wl_module_tx_config
  1486 ;;		_wl_module_send
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text7
  1491  002EBC                     __ptext7:
  1492                           	opt stack 0
  1493  002EBC                     _wl_module_config_register:
  1494                           	opt stack 25
  1495                           
  1496                           ;incstack = 0
  1497                           ;wl_module_config_register@reg stored from wreg
  1498  002EBC  6E15               	movwf	wl_module_config_register@reg,c
  1499                           
  1500                           ;wl_module.c: 420: LATBbits.LATB4 = 0;;
  1501  002EBE  988A               	bcf	3978,4,c	;volatile
  1502                           
  1503                           ;wl_module.c: 421: spi_fast_shift(0x20 | (0x1F & reg));
  1504  002EC0  5015               	movf	wl_module_config_register@reg,w,c
  1505  002EC2  0B1F               	andlw	31
  1506  002EC4  0920               	iorlw	32
  1507  002EC6  EC7F  F017         	call	_spi_fast_shift
  1508                           
  1509                           ;wl_module.c: 422: spi_fast_shift(value);
  1510  002ECA  5014               	movf	wl_module_config_register@value,w,c
  1511  002ECC  EC7F  F017         	call	_spi_fast_shift
  1512                           
  1513                           ;wl_module.c: 423: LATBbits.LATB4 = 1;;
  1514  002ED0  888A               	bsf	3978,4,c	;volatile
  1515  002ED2  0012               	return		;funcret
  1516  002ED4                     __end_of_wl_module_config_register:
  1517                           	opt stack 0
  1518                           tblptru	equ	0xFF8
  1519                           intcon	equ	0xFF2
  1520                           intcon2	equ	0xFF1
  1521                           intcon3	equ	0xFF0
  1522                           postinc0	equ	0xFEE
  1523                           wreg	equ	0xFE8
  1524                           indf2	equ	0xFDF
  1525                           fsr2h	equ	0xFDA
  1526                           fsr2l	equ	0xFD9
  1527                           status	equ	0xFD8
  1528                           
  1529 ;; *************** function _spi_fast_shift *****************
  1530 ;; Defined at:
  1531 ;;		line 62 in file "spi.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;  data            1    wreg     unsigned char 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  data            1   18[COMRAM] unsigned char 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  1    wreg      unsigned char 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1545 ;;      Params:         0       0       0       0       0       0       0       0       0
  1546 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1548 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1549 ;;Total ram usage:        1 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    3
  1552 ;; This function calls:
  1553 ;;		Nothing
  1554 ;; This function is called by:
  1555 ;;		_wl_module_data_ready
  1556 ;;		_wl_module_get_data
  1557 ;;		_wl_module_config_register
  1558 ;;		_wl_module_get_one_byte
  1559 ;;		_wl_module_read_register
  1560 ;;		_wl_module_write_register
  1561 ;;		_wl_module_send
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565                           	psect	text8
  1566  002EFE                     __ptext8:
  1567                           	opt stack 0
  1568  002EFE                     _spi_fast_shift:
  1569                           	opt stack 25
  1570                           
  1571                           ;incstack = 0
  1572                           ;spi_fast_shift@data stored from wreg
  1573  002EFE  6E13               	movwf	spi_fast_shift@data,c
  1574                           
  1575                           ;spi.c: 63: SSP1BUF = data;
  1576  002F00  C013  FFC9         	movff	spi_fast_shift@data,4041	;volatile
  1577  002F04                     l98:
  1578  002F04  A69E               	btfss	3998,3,c	;volatile
  1579  002F06  D7FE               	goto	l98
  1580                           
  1581                           ;spi.c: 65: PIR1bits.SSP1IF = 0;
  1582  002F08  969E               	bcf	3998,3,c	;volatile
  1583                           
  1584                           ;spi.c: 66: return SSP1BUF;
  1585  002F0A  50C9               	movf	4041,w,c	;volatile
  1586  002F0C  0012               	return		;funcret
  1587  002F0E                     __end_of_spi_fast_shift:
  1588                           	opt stack 0
  1589                           tblptru	equ	0xFF8
  1590                           intcon	equ	0xFF2
  1591                           intcon2	equ	0xFF1
  1592                           intcon3	equ	0xFF0
  1593                           postinc0	equ	0xFEE
  1594                           wreg	equ	0xFE8
  1595                           indf2	equ	0xFDF
  1596                           fsr2h	equ	0xFDA
  1597                           fsr2l	equ	0xFD9
  1598                           status	equ	0xFD8
  1599                           
  1600 ;; *************** function _sprintf *****************
  1601 ;; Defined at:
  1602 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  sp              2   53[BANK0 ] PTR unsigned char 
  1605 ;;		 -> main@Buffer(20), 
  1606 ;;  f               2   55[BANK0 ] PTR const unsigned char 
  1607 ;;		 -> STR_2(5), 
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;  temp            3   70[BANK0 ] PTR const unsigned char 
  1610 ;;  val             4   79[BANK0 ] unsigned long 
  1611 ;;  tmpval          4   75[BANK0 ] struct .
  1612 ;;  fval            3   87[BANK0 ] struct .
  1613 ;;  cp              3    0        PTR const unsigned char 
  1614 ;;  prec            2   85[BANK0 ] int 
  1615 ;;  exp             2   83[BANK0 ] int 
  1616 ;;  flag            2   73[BANK0 ] unsigned short 
  1617 ;;  ap              2   68[BANK0 ] PTR void [1]
  1618 ;;		 -> ?_sprintf(2), 
  1619 ;;  len             2    0        unsigned int 
  1620 ;;  width           2    0        int 
  1621 ;;  c               1   90[BANK0 ] char 
  1622 ;;  d               1    0        unsigned char 
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  2   53[BANK0 ] int 
  1625 ;; Registers used:
  1626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1632 ;;      Params:         0       6       0       0       0       0       0       0       0
  1633 ;;      Locals:         0      26       0       0       0       0       0       0       0
  1634 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1635 ;;      Totals:         0      38       0       0       0       0       0       0       0
  1636 ;;Total ram usage:       38 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    6
  1639 ;; This function calls:
  1640 ;;		___awdiv
  1641 ;;		___awmod
  1642 ;;		___ftadd
  1643 ;;		___ftdiv
  1644 ;;		___ftge
  1645 ;;		___ftmul
  1646 ;;		___ftneg
  1647 ;;		___ftsub
  1648 ;;		___fttol
  1649 ;;		___lldiv
  1650 ;;		___llmod
  1651 ;;		___lltoft
  1652 ;;		___wmul
  1653 ;;		__div_to_l_
  1654 ;;		__tdiv_to_l_
  1655 ;;		_fround
  1656 ;;		_isdigit
  1657 ;;		_scale
  1658 ;; This function is called by:
  1659 ;;		_main
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text9
  1664  00088C                     __ptext9:
  1665                           	opt stack 0
  1666  00088C                     _sprintf:
  1667                           	opt stack 24
  1668                           
  1669                           ;doprnt.c: 494: va_list ap;
  1670                           ;doprnt.c: 499: signed char c;
  1671                           ;doprnt.c: 501: int width;
  1672                           ;doprnt.c: 504: int prec;
  1673                           ;doprnt.c: 508: unsigned short flag;
  1674                           ;doprnt.c: 515: char d;
  1675                           ;doprnt.c: 516: double fval;
  1676                           ;doprnt.c: 517: int exp;
  1677                           ;doprnt.c: 523: union {
  1678                           ;doprnt.c: 524: unsigned long vd;
  1679                           ;doprnt.c: 525: double integ;
  1680                           ;doprnt.c: 526: } tmpval;
  1681                           ;doprnt.c: 528: unsigned long val;
  1682                           ;doprnt.c: 529: unsigned len;
  1683                           ;doprnt.c: 530: const char * cp;
  1684                           ;doprnt.c: 533: *ap = __va_start();
  1685                           
  1686                           ;incstack = 0
  1687  00088C  0E99               	movlw	low (?_sprintf+4)
  1688  00088E  0100               	movlb	0	; () banked
  1689  000890  6FA4               	movwf	sprintf@ap& (0+255),b
  1690  000892  0E00               	movlw	high (?_sprintf+4)
  1691  000894  0100               	movlb	0	; () banked
  1692  000896  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  1693                           
  1694                           ;doprnt.c: 536: while(c = *f++) {
  1695  000898  EFE4  F00B         	goto	l4419
  1696  00089C                     l4081:
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;doprnt.c: 538: if(c != '%')
  1700  00089C  0E25               	movlw	37
  1701  00089E  0100               	movlb	0	; () banked
  1702  0008A0  19BA               	xorwf	sprintf@c& (0+255),w,b
  1703  0008A2  B4D8               	btfsc	status,2,c
  1704  0008A4  D007               	goto	l4087
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;doprnt.c: 540: {
  1708                           ;doprnt.c: 541: ((*sp++ = (c)));
  1709  0008A6  C095  FFD9         	movff	sprintf@sp,fsr2l
  1710  0008AA  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  1711  0008AE  C0BA  FFDF         	movff	sprintf@c,indf2
  1712  0008B2  D3D9               	goto	l4257
  1713  0008B4                     l4087:
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;doprnt.c: 543: }
  1717                           ;doprnt.c: 548: flag = 0;
  1718  0008B4  0E00               	movlw	0
  1719  0008B6  0100               	movlb	0	; () banked
  1720  0008B8  6FAA               	movwf	(sprintf@flag+1)& (0+255),b
  1721  0008BA  0E00               	movlw	0
  1722  0008BC  6FA9               	movwf	sprintf@flag& (0+255),b
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;doprnt.c: 611: if(*f == '.') {
  1726  0008BE  C097  FFF6         	movff	sprintf@f,tblptrl
  1727  0008C2  C098  FFF7         	movff	sprintf@f+1,tblptrh
  1728  0008C6                     	if	0	;tblptru may be non-zero
  1729  0008C6                     	endif
  1730  0008C6                     	if	0	;tblptru may be non-zero
  1731  0008C6                     	endif
  1732  0008C6  0008               	tblrd		*
  1733  0008C8  50F5               	movf	tablat,w,c
  1734  0008CA  0A2E               	xorlw	46
  1735  0008CC  A4D8               	btfss	status,2,c
  1736  0008CE  D034               	goto	l4101
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;doprnt.c: 612: flag |= 0x4000;
  1740  0008D0  0100               	movlb	0	; () banked
  1741  0008D2  8DAA               	bsf	(sprintf@flag+1)& (0+255),6,b
  1742                           
  1743                           ;doprnt.c: 613: f++;
  1744  0008D4  0100               	movlb	0	; () banked
  1745  0008D6  4B97               	infsnz	sprintf@f& (0+255),f,b
  1746  0008D8  2B98               	incf	(sprintf@f+1)& (0+255),f,b
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;doprnt.c: 620: {
  1750                           ;doprnt.c: 621: prec = 0;
  1751  0008DA  0E00               	movlw	0
  1752  0008DC  0100               	movlb	0	; () banked
  1753  0008DE  6FB6               	movwf	(sprintf@prec+1)& (0+255),b
  1754  0008E0  0E00               	movlw	0
  1755  0008E2  6FB5               	movwf	sprintf@prec& (0+255),b
  1756                           
  1757                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1758  0008E4  D01E               	goto	l4099
  1759  0008E6                     l4095:
  1760                           
  1761                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1762  0008E6  C0B5  F021         	movff	sprintf@prec,___wmul@multiplier
  1763  0008EA  C0B6  F022         	movff	sprintf@prec+1,___wmul@multiplier+1
  1764  0008EE  0E00               	movlw	0
  1765  0008F0  6E24               	movwf	___wmul@multiplicand+1,c
  1766  0008F2  0E0A               	movlw	10
  1767  0008F4  6E23               	movwf	___wmul@multiplicand,c
  1768  0008F6  ECE2  F016         	call	___wmul	;wreg free
  1769  0008FA  C097  FFF6         	movff	sprintf@f,tblptrl
  1770  0008FE  C098  FFF7         	movff	sprintf@f+1,tblptrh
  1771  000902                     	if	0	;tblptru may be non-zero
  1772  000902                     	endif
  1773  000902                     	if	0	;tblptru may be non-zero
  1774  000902                     	endif
  1775  000902  0008               	tblrd		*
  1776  000904  50F5               	movf	tablat,w,c
  1777  000906  2621               	addwf	?___wmul,f,c
  1778  000908  0E00               	movlw	0
  1779  00090A  2222               	addwfc	?___wmul+1,f,c
  1780  00090C  0ED0               	movlw	208
  1781  00090E  2421               	addwf	?___wmul,w,c
  1782  000910  0100               	movlb	0	; () banked
  1783  000912  6FB5               	movwf	sprintf@prec& (0+255),b
  1784  000914  0EFF               	movlw	255
  1785  000916  2022               	addwfc	?___wmul+1,w,c
  1786  000918  0100               	movlb	0	; () banked
  1787  00091A  6FB6               	movwf	(sprintf@prec+1)& (0+255),b
  1788                           
  1789                           ; BSR set to: 0
  1790  00091C  0100               	movlb	0	; () banked
  1791  00091E  4B97               	infsnz	sprintf@f& (0+255),f,b
  1792  000920  2B98               	incf	(sprintf@f+1)& (0+255),f,b
  1793  000922                     l4099:
  1794                           
  1795                           ; BSR set to: 0
  1796  000922  C097  FFF6         	movff	sprintf@f,tblptrl
  1797  000926  C098  FFF7         	movff	sprintf@f+1,tblptrh
  1798  00092A                     	if	0	;tblptru may be non-zero
  1799  00092A                     	endif
  1800  00092A                     	if	0	;tblptru may be non-zero
  1801  00092A                     	endif
  1802  00092A  0008               	tblrd		*
  1803  00092C  50F5               	movf	tablat,w,c
  1804  00092E  EC28  F017         	call	_isdigit
  1805  000932  A0D8               	btfss	status,0,c
  1806  000934  D00C               	goto	l4109
  1807  000936  D7D7               	goto	l4095
  1808  000938                     l4101:
  1809                           
  1810                           ;doprnt.c: 626: prec = 0;
  1811  000938  0E00               	movlw	0
  1812  00093A  0100               	movlb	0	; () banked
  1813  00093C  6FB6               	movwf	(sprintf@prec+1)& (0+255),b
  1814  00093E  0E00               	movlw	0
  1815  000940  6FB5               	movwf	sprintf@prec& (0+255),b
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;doprnt.c: 628: flag |= 0x1000;
  1819  000942  0100               	movlb	0	; () banked
  1820  000944  89AA               	bsf	(sprintf@flag+1)& (0+255),4,b
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;doprnt.c: 630: }
  1824                           ;doprnt.c: 635: switch(c = *f++) {
  1825  000946  D003               	goto	l4109
  1826  000948                     l4105:
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;doprnt.c: 683: flag |= 0x200;
  1830  000948  0100               	movlb	0	; () banked
  1831  00094A  83AA               	bsf	(sprintf@flag+1)& (0+255),1,b
  1832                           
  1833                           ;doprnt.c: 684: break;
  1834  00094C  D015               	goto	l4111
  1835  00094E                     l4109:
  1836  00094E  C097  FFF6         	movff	sprintf@f,tblptrl
  1837  000952  C098  FFF7         	movff	sprintf@f+1,tblptrh
  1838  000956  0100               	movlb	0	; () banked
  1839  000958  4B97               	infsnz	sprintf@f& (0+255),f,b
  1840  00095A  2B98               	incf	(sprintf@f+1)& (0+255),f,b
  1841  00095C                     	if	0	;tblptru may be non-zero
  1842  00095C                     	endif
  1843  00095C                     	if	0	;tblptru may be non-zero
  1844  00095C                     	endif
  1845  00095C  0008               	tblrd		*
  1846  00095E  CFF5 F0BA          	movff	tablat,sprintf@c
  1847  000962  0100               	movlb	0	; () banked
  1848  000964  51BA               	movf	sprintf@c& (0+255),w,b
  1849                           
  1850                           ; Switch size 1, requested type "space"
  1851                           ; Number of cases is 2, Range of values is 0 to 103
  1852                           ; switch strategies available:
  1853                           ; Name         Instructions Cycles
  1854                           ; simple_byte            7     4 (average)
  1855                           ;	Chosen strategy is simple_byte
  1856  000966  0A00               	xorlw	0	; case 0
  1857  000968  B4D8               	btfsc	status,2,c
  1858  00096A  EFF3  F00B         	goto	l4421
  1859  00096E  0A67               	xorlw	103	; case 103
  1860  000970  B4D8               	btfsc	status,2,c
  1861  000972  D7EA               	goto	l4105
  1862  000974  EFE4  F00B         	goto	l4419
  1863  000978                     l4111:
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;doprnt.c: 825: if(flag & (0x700)) {
  1867  000978  0E07               	movlw	7
  1868  00097A  0100               	movlb	0	; () banked
  1869  00097C  15AA               	andwf	(sprintf@flag+1)& (0+255),w,b
  1870  00097E  B4D8               	btfsc	status,2,c
  1871  000980  EF8E  F00B         	goto	l4399
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;doprnt.c: 827: if(flag & 0x1000)
  1875  000984  0100               	movlb	0	; () banked
  1876  000986  A9AA               	btfss	(sprintf@flag+1)& (0+255),4,b
  1877  000988  D005               	goto	l4117
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;doprnt.c: 829: prec = 6;
  1881  00098A  0E00               	movlw	0
  1882  00098C  0100               	movlb	0	; () banked
  1883  00098E  6FB6               	movwf	(sprintf@prec+1)& (0+255),b
  1884  000990  0E06               	movlw	6
  1885  000992  6FB5               	movwf	sprintf@prec& (0+255),b
  1886  000994                     l4117:
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1890  000994  C0A4  FFD9         	movff	sprintf@ap,fsr2l
  1891  000998  C0A5  FFDA         	movff	sprintf@ap+1,fsr2h
  1892  00099C  CFDE F0B7          	movff	postinc2,sprintf@fval
  1893  0009A0  CFDE F0B8          	movff	postinc2,sprintf@fval+1
  1894  0009A4  CFDD F0B9          	movff	postdec2,sprintf@fval+2
  1895                           
  1896                           ; BSR set to: 0
  1897  0009A8  0E03               	movlw	3
  1898  0009AA  0100               	movlb	0	; () banked
  1899  0009AC  27A4               	addwf	sprintf@ap& (0+255),f,b
  1900  0009AE  0E00               	movlw	0
  1901  0009B0  23A5               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;doprnt.c: 831: if(fval < 0.0) {
  1905  0009B2  0100               	movlb	0	; () banked
  1906  0009B4  AFB9               	btfss	(sprintf@fval+2)& (0+255),7,b
  1907  0009B6  D011               	goto	l4127
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;doprnt.c: 832: fval = -fval;
  1911  0009B8  C0B7  F064         	movff	sprintf@fval,___ftneg@f1
  1912  0009BC  C0B8  F065         	movff	sprintf@fval+1,___ftneg@f1+1
  1913  0009C0  C0B9  F066         	movff	sprintf@fval+2,___ftneg@f1+2
  1914  0009C4  EC9D  F016         	call	___ftneg	;wreg free
  1915  0009C8  C064  F0B7         	movff	?___ftneg,sprintf@fval
  1916  0009CC  C065  F0B8         	movff	?___ftneg+1,sprintf@fval+1
  1917  0009D0  C066  F0B9         	movff	?___ftneg+2,sprintf@fval+2
  1918                           
  1919                           ;doprnt.c: 833: flag |= 0x03;
  1920  0009D4  0E03               	movlw	3
  1921  0009D6  0100               	movlb	0	; () banked
  1922  0009D8  13A9               	iorwf	sprintf@flag& (0+255),f,b
  1923  0009DA                     l4127:
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;doprnt.c: 834: }
  1927                           ;doprnt.c: 835: exp = 0;
  1928  0009DA  0E00               	movlw	0
  1929  0009DC  0100               	movlb	0	; () banked
  1930  0009DE  6FB4               	movwf	(sprintf@exp+1)& (0+255),b
  1931  0009E0  0E00               	movlw	0
  1932  0009E2  6FB3               	movwf	sprintf@exp& (0+255),b
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;doprnt.c: 836: if( fval!=0) {
  1936  0009E4  0100               	movlb	0	; () banked
  1937  0009E6  51B7               	movf	sprintf@fval& (0+255),w,b
  1938  0009E8  0100               	movlb	0	; () banked
  1939  0009EA  11B8               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1940  0009EC  0100               	movlb	0	; () banked
  1941  0009EE  11B9               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1942  0009F0  B4D8               	btfsc	status,2,c
  1943  0009F2  D099               	goto	l4155
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1947  0009F4  0E82               	movlw	130
  1948  0009F6  0100               	movlb	0	; () banked
  1949  0009F8  6F9B               	movwf	??_sprintf& (0+255),b
  1950  0009FA  0EFF               	movlw	255
  1951  0009FC  0100               	movlb	0	; () banked
  1952  0009FE  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  1953  000A00  C0B7  F09D         	movff	sprintf@fval,??_sprintf+2
  1954  000A04  C0B8  F09E         	movff	sprintf@fval+1,??_sprintf+3
  1955  000A08  C0B9  F09F         	movff	sprintf@fval+2,??_sprintf+4
  1956  000A0C  C0BA  F0A0         	movff	sprintf@fval+3,??_sprintf+5
  1957  000A10  0E10               	movlw	16
  1958  000A12  D006               	goto	u3890
  1959  000A14                     u3895:
  1960  000A14  0100               	movlb	0	; () banked
  1961  000A16  90D8               	bcf	status,0,c
  1962  000A18  33A0               	rrcf	(??_sprintf+5)& (0+255),f,b
  1963  000A1A  339F               	rrcf	(??_sprintf+4)& (0+255),f,b
  1964  000A1C  339E               	rrcf	(??_sprintf+3)& (0+255),f,b
  1965  000A1E  339D               	rrcf	(??_sprintf+2)& (0+255),f,b
  1966  000A20                     u3890:
  1967  000A20  2EE8               	decfsz	wreg,f,c
  1968  000A22  D7F8               	goto	u3895
  1969  000A24  0100               	movlb	0	; () banked
  1970  000A26  519D               	movf	(??_sprintf+2)& (0+255),w,b
  1971  000A28  0100               	movlb	0	; () banked
  1972  000A2A  259B               	addwf	??_sprintf& (0+255),w,b
  1973  000A2C  0100               	movlb	0	; () banked
  1974  000A2E  6FB3               	movwf	sprintf@exp& (0+255),b
  1975  000A30  0E00               	movlw	0
  1976  000A32  0100               	movlb	0	; () banked
  1977  000A34  219C               	addwfc	(??_sprintf+1)& (0+255),w,b
  1978  000A36  0100               	movlb	0	; () banked
  1979  000A38  6FB4               	movwf	(sprintf@exp+1)& (0+255),b
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;doprnt.c: 838: exp--;
  1983  000A3A  0100               	movlb	0	; () banked
  1984  000A3C  07B3               	decf	sprintf@exp& (0+255),f,b
  1985  000A3E  A0D8               	btfss	status,0,c
  1986  000A40  07B4               	decf	(sprintf@exp+1)& (0+255),f,b
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;doprnt.c: 839: exp *= 3;
  1990  000A42  C0B3  F021         	movff	sprintf@exp,___wmul@multiplier
  1991  000A46  C0B4  F022         	movff	sprintf@exp+1,___wmul@multiplier+1
  1992  000A4A  0E00               	movlw	0
  1993  000A4C  6E24               	movwf	___wmul@multiplicand+1,c
  1994  000A4E  0E03               	movlw	3
  1995  000A50  6E23               	movwf	___wmul@multiplicand,c
  1996  000A52  ECE2  F016         	call	___wmul	;wreg free
  1997  000A56  C021  F0B3         	movff	?___wmul,sprintf@exp
  1998  000A5A  C022  F0B4         	movff	?___wmul+1,sprintf@exp+1
  1999                           
  2000                           ;doprnt.c: 840: exp /= 10;
  2001  000A5E  C0B3  F019         	movff	sprintf@exp,___awdiv@dividend
  2002  000A62  C0B4  F01A         	movff	sprintf@exp+1,___awdiv@dividend+1
  2003  000A66  0E00               	movlw	0
  2004  000A68  6E1C               	movwf	___awdiv@divisor+1,c
  2005  000A6A  0E0A               	movlw	10
  2006  000A6C  6E1B               	movwf	___awdiv@divisor,c
  2007  000A6E  EC69  F014         	call	___awdiv	;wreg free
  2008  000A72  C019  F0B3         	movff	?___awdiv,sprintf@exp
  2009  000A76  C01A  F0B4         	movff	?___awdiv+1,sprintf@exp+1
  2010                           
  2011                           ;doprnt.c: 841: if(exp < 0)
  2012  000A7A  0100               	movlb	0	; () banked
  2013  000A7C  AFB4               	btfss	(sprintf@exp+1)& (0+255),7,b
  2014  000A7E  D004               	goto	l4143
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;doprnt.c: 842: exp--;
  2018  000A80  0100               	movlb	0	; () banked
  2019  000A82  07B3               	decf	sprintf@exp& (0+255),f,b
  2020  000A84  A0D8               	btfss	status,0,c
  2021  000A86  07B4               	decf	(sprintf@exp+1)& (0+255),f,b
  2022  000A88                     l4143:
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2026  000A88  0100               	movlb	0	; () banked
  2027  000A8A  51B3               	movf	sprintf@exp& (0+255),w,b
  2028  000A8C  0800               	sublw	0
  2029  000A8E  ECFA  F00B         	call	_scale
  2030  000A92  C076  F0AB         	movff	?_scale,sprintf@tmpval
  2031  000A96  C077  F0AC         	movff	?_scale+1,sprintf@tmpval+1
  2032  000A9A  C078  F0AD         	movff	?_scale+2,sprintf@tmpval+2
  2033                           
  2034                           ;doprnt.c: 847: tmpval.integ *= fval;
  2035  000A9E  C0AB  F067         	movff	sprintf@tmpval,___ftmul@f1
  2036  000AA2  C0AC  F068         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2037  000AA6  C0AD  F069         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2038  000AAA  C0B7  F06A         	movff	sprintf@fval,___ftmul@f2
  2039  000AAE  C0B8  F06B         	movff	sprintf@fval+1,___ftmul@f2+1
  2040  000AB2  C0B9  F06C         	movff	sprintf@fval+2,___ftmul@f2+2
  2041  000AB6  EC69  F010         	call	___ftmul	;wreg free
  2042  000ABA  C067  F0AB         	movff	?___ftmul,sprintf@tmpval
  2043  000ABE  C068  F0AC         	movff	?___ftmul+1,sprintf@tmpval+1
  2044  000AC2  C069  F0AD         	movff	?___ftmul+2,sprintf@tmpval+2
  2045                           
  2046                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2047  000AC6  C0AB  F08C         	movff	sprintf@tmpval,___ftge@ff1
  2048  000ACA  C0AC  F08D         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2049  000ACE  C0AD  F08E         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2050  000AD2  0E00               	movlw	0
  2051  000AD4  0100               	movlb	0	; () banked
  2052  000AD6  6F8F               	movwf	___ftge@ff2& (0+255),b
  2053  000AD8  0E80               	movlw	128
  2054  000ADA  0100               	movlb	0	; () banked
  2055  000ADC  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  2056  000ADE  0E3F               	movlw	63
  2057  000AE0  0100               	movlb	0	; () banked
  2058  000AE2  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  2059  000AE4  EC65  F013         	call	___ftge	;wreg free
  2060  000AE8  0100               	movlb	0	; () banked
  2061  000AEA  B0D8               	btfsc	status,0,c
  2062  000AEC  D005               	goto	l4151
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;doprnt.c: 849: exp--;
  2066  000AEE  0100               	movlb	0	; () banked
  2067  000AF0  07B3               	decf	sprintf@exp& (0+255),f,b
  2068  000AF2  A0D8               	btfss	status,0,c
  2069  000AF4  07B4               	decf	(sprintf@exp+1)& (0+255),f,b
  2070  000AF6  D017               	goto	l4155
  2071  000AF8                     l4151:
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2075  000AF8  C0AB  F08C         	movff	sprintf@tmpval,___ftge@ff1
  2076  000AFC  C0AC  F08D         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2077  000B00  C0AD  F08E         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2078  000B04  0E00               	movlw	0
  2079  000B06  0100               	movlb	0	; () banked
  2080  000B08  6F8F               	movwf	___ftge@ff2& (0+255),b
  2081  000B0A  0E20               	movlw	32
  2082  000B0C  0100               	movlb	0	; () banked
  2083  000B0E  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  2084  000B10  0E41               	movlw	65
  2085  000B12  0100               	movlb	0	; () banked
  2086  000B14  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  2087  000B16  EC65  F013         	call	___ftge	;wreg free
  2088  000B1A  0100               	movlb	0	; () banked
  2089  000B1C  A0D8               	btfss	status,0,c
  2090  000B1E  D003               	goto	l4155
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;doprnt.c: 851: exp++;
  2094  000B20  0100               	movlb	0	; () banked
  2095  000B22  4BB3               	infsnz	sprintf@exp& (0+255),f,b
  2096  000B24  2BB4               	incf	(sprintf@exp+1)& (0+255),f,b
  2097  000B26                     l4155:
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;doprnt.c: 852: }
  2101                           ;doprnt.c: 854: if(exp <= 0)
  2102  000B26  0100               	movlb	0	; () banked
  2103  000B28  BFB4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2104  000B2A  D007               	goto	l4157
  2105  000B2C  0100               	movlb	0	; () banked
  2106  000B2E  51B4               	movf	(sprintf@exp+1)& (0+255),w,b
  2107  000B30  E108               	bnz	l404
  2108  000B32  0100               	movlb	0	; () banked
  2109  000B34  05B3               	decf	sprintf@exp& (0+255),w,b
  2110  000B36  B0D8               	btfsc	status,0,c
  2111  000B38  D004               	goto	l404
  2112  000B3A                     l4157:
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;doprnt.c: 855: c = 1;
  2116  000B3A  0E01               	movlw	1
  2117  000B3C  0100               	movlb	0	; () banked
  2118  000B3E  6FBA               	movwf	sprintf@c& (0+255),b
  2119  000B40  D002               	goto	l405
  2120  000B42                     l404:
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;doprnt.c: 856: else
  2124                           ;doprnt.c: 857: c = exp;
  2125  000B42  C0B3  F0BA         	movff	sprintf@exp,sprintf@c
  2126  000B46                     l405:
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;doprnt.c: 858: if(
  2130                           ;doprnt.c: 866: flag & 0x200 && (exp < -4 || exp >= (int)prec)
  2131                           ;doprnt.c: 868: ) {
  2132  000B46  0100               	movlb	0	; () banked
  2133  000B48  A3AA               	btfss	(sprintf@flag+1)& (0+255),1,b
  2134  000B4A  D291               	goto	l406
  2135                           
  2136                           ; BSR set to: 0
  2137  000B4C  0100               	movlb	0	; () banked
  2138  000B4E  AFB4               	btfss	(sprintf@exp+1)& (0+255),7,b
  2139  000B50  D008               	goto	l4161
  2140  000B52  0EFC               	movlw	252
  2141  000B54  0100               	movlb	0	; () banked
  2142  000B56  5DB3               	subwf	sprintf@exp& (0+255),w,b
  2143  000B58  0EFF               	movlw	255
  2144  000B5A  0100               	movlb	0	; () banked
  2145  000B5C  59B4               	subwfb	(sprintf@exp+1)& (0+255),w,b
  2146  000B5E  A0D8               	btfss	status,0,c
  2147  000B60  D010               	goto	l4163
  2148  000B62                     l4161:
  2149                           
  2150                           ; BSR set to: 0
  2151  000B62  0100               	movlb	0	; () banked
  2152  000B64  51B5               	movf	sprintf@prec& (0+255),w,b
  2153  000B66  0100               	movlb	0	; () banked
  2154  000B68  5DB3               	subwf	sprintf@exp& (0+255),w,b
  2155  000B6A  0100               	movlb	0	; () banked
  2156  000B6C  51B4               	movf	(sprintf@exp+1)& (0+255),w,b
  2157  000B6E  0A80               	xorlw	128
  2158  000B70  0100               	movlb	0	; () banked
  2159  000B72  6F9B               	movwf	??_sprintf& (0+255),b
  2160  000B74  0100               	movlb	0	; () banked
  2161  000B76  51B6               	movf	(sprintf@prec+1)& (0+255),w,b
  2162  000B78  0A80               	xorlw	128
  2163  000B7A  0100               	movlb	0	; () banked
  2164  000B7C  599B               	subwfb	??_sprintf& (0+255),w,b
  2165  000B7E  A0D8               	btfss	status,0,c
  2166  000B80  D276               	goto	l406
  2167  000B82                     l4163:
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;doprnt.c: 870: if(prec && flag & 0x200)
  2171  000B82  0100               	movlb	0	; () banked
  2172  000B84  51B5               	movf	sprintf@prec& (0+255),w,b
  2173  000B86  0100               	movlb	0	; () banked
  2174  000B88  11B6               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2175  000B8A  B4D8               	btfsc	status,2,c
  2176  000B8C  D007               	goto	l4169
  2177                           
  2178                           ; BSR set to: 0
  2179  000B8E  0100               	movlb	0	; () banked
  2180  000B90  A3AA               	btfss	(sprintf@flag+1)& (0+255),1,b
  2181  000B92  D004               	goto	l4169
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;doprnt.c: 871: prec--;
  2185  000B94  0100               	movlb	0	; () banked
  2186  000B96  07B5               	decf	sprintf@prec& (0+255),f,b
  2187  000B98  A0D8               	btfss	status,0,c
  2188  000B9A  07B6               	decf	(sprintf@prec+1)& (0+255),f,b
  2189  000B9C                     l4169:
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;doprnt.c: 873: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
  2193  000B9C  0100               	movlb	0	; () banked
  2194  000B9E  51B6               	movf	(sprintf@prec+1)& (0+255),w,b
  2195  000BA0  E105               	bnz	u3990
  2196  000BA2  0E09               	movlw	9
  2197  000BA4  0100               	movlb	0	; () banked
  2198  000BA6  5DB5               	subwf	sprintf@prec& (0+255),w,b
  2199  000BA8  A0D8               	btfss	status,0,c
  2200  000BAA  D004               	goto	l410
  2201  000BAC                     u3990:
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;doprnt.c: 874: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
  2205  000BAC  0E08               	movlw	8
  2206  000BAE  0100               	movlb	0	; () banked
  2207  000BB0  6FBA               	movwf	sprintf@c& (0+255),b
  2208  000BB2  D002               	goto	l4173
  2209  000BB4                     l410:
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;doprnt.c: 875: else
  2213                           ;doprnt.c: 876: c = prec;
  2214  000BB4  C0B5  F0BA         	movff	sprintf@prec,sprintf@c
  2215  000BB8                     l4173:
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;doprnt.c: 877: if( fval!=0) {
  2219  000BB8  0100               	movlb	0	; () banked
  2220  000BBA  51B7               	movf	sprintf@fval& (0+255),w,b
  2221  000BBC  0100               	movlb	0	; () banked
  2222  000BBE  11B8               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2223  000BC0  0100               	movlb	0	; () banked
  2224  000BC2  11B9               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2225  000BC4  B4D8               	btfsc	status,2,c
  2226  000BC6  D0F3               	goto	l4193
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;doprnt.c: 878: fval /= scale(exp-c);
  2230  000BC8  C0B7  F07D         	movff	sprintf@fval,___ftdiv@f1
  2231  000BCC  C0B8  F07E         	movff	sprintf@fval+1,___ftdiv@f1+1
  2232  000BD0  C0B9  F07F         	movff	sprintf@fval+2,___ftdiv@f1+2
  2233  000BD4  0100               	movlb	0	; () banked
  2234  000BD6  51BA               	movf	sprintf@c& (0+255),w,b
  2235  000BD8  0800               	sublw	0
  2236  000BDA  0100               	movlb	0	; () banked
  2237  000BDC  25B3               	addwf	sprintf@exp& (0+255),w,b
  2238  000BDE  ECFA  F00B         	call	_scale
  2239  000BE2  C076  F080         	movff	?_scale,___ftdiv@f2
  2240  000BE6  C077  F081         	movff	?_scale+1,___ftdiv@f2+1
  2241  000BEA  C078  F082         	movff	?_scale+2,___ftdiv@f2+2
  2242  000BEE  EC18  F011         	call	___ftdiv	;wreg free
  2243  000BF2  C07D  F0B7         	movff	?___ftdiv,sprintf@fval
  2244  000BF6  C07E  F0B8         	movff	?___ftdiv+1,sprintf@fval+1
  2245  000BFA  C07F  F0B9         	movff	?___ftdiv+2,sprintf@fval+2
  2246                           
  2247                           ;doprnt.c: 893: if(fval - (double)(unsigned long)fval >= 0.5)
  2248  000BFE  C0B7  F083         	movff	sprintf@fval,___ftadd@f2
  2249  000C02  C0B8  F084         	movff	sprintf@fval+1,___ftadd@f2+1
  2250  000C06  C0B9  F085         	movff	sprintf@fval+2,___ftadd@f2+2
  2251  000C0A  C0B7  F027         	movff	sprintf@fval,___fttol@f1
  2252  000C0E  C0B8  F028         	movff	sprintf@fval+1,___fttol@f1+1
  2253  000C12  C0B9  F029         	movff	sprintf@fval+2,___fttol@f1+2
  2254  000C16  ECEB  F012         	call	___fttol	;wreg free
  2255  000C1A  C027  F036         	movff	?___fttol,___lltoft@c
  2256  000C1E  C028  F037         	movff	?___fttol+1,___lltoft@c+1
  2257  000C22  C029  F038         	movff	?___fttol+2,___lltoft@c+2
  2258  000C26  C02A  F039         	movff	?___fttol+3,___lltoft@c+3
  2259  000C2A  EC62  F015         	call	___lltoft	;wreg free
  2260  000C2E  C036  F064         	movff	?___lltoft,___ftneg@f1
  2261  000C32  C037  F065         	movff	?___lltoft+1,___ftneg@f1+1
  2262  000C36  C038  F066         	movff	?___lltoft+2,___ftneg@f1+2
  2263  000C3A  EC9D  F016         	call	___ftneg	;wreg free
  2264  000C3E  C064  F080         	movff	?___ftneg,___ftadd@f1
  2265  000C42  C065  F081         	movff	?___ftneg+1,___ftadd@f1+1
  2266  000C46  C066  F082         	movff	?___ftneg+2,___ftadd@f1+2
  2267  000C4A  EC05  F00E         	call	___ftadd	;wreg free
  2268  000C4E  C080  F08C         	movff	?___ftadd,___ftge@ff1
  2269  000C52  C081  F08D         	movff	?___ftadd+1,___ftge@ff1+1
  2270  000C56  C082  F08E         	movff	?___ftadd+2,___ftge@ff1+2
  2271  000C5A  0E00               	movlw	0
  2272  000C5C  0100               	movlb	0	; () banked
  2273  000C5E  6F8F               	movwf	___ftge@ff2& (0+255),b
  2274  000C60  0E00               	movlw	0
  2275  000C62  0100               	movlb	0	; () banked
  2276  000C64  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  2277  000C66  0E3F               	movlw	63
  2278  000C68  0100               	movlb	0	; () banked
  2279  000C6A  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  2280  000C6C  EC65  F013         	call	___ftge	;wreg free
  2281  000C70  0100               	movlb	0	; () banked
  2282  000C72  A0D8               	btfss	status,0,c
  2283  000C74  D017               	goto	l4181
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;doprnt.c: 894: fval += 0.5;
  2287  000C76  C0B7  F080         	movff	sprintf@fval,___ftadd@f1
  2288  000C7A  C0B8  F081         	movff	sprintf@fval+1,___ftadd@f1+1
  2289  000C7E  C0B9  F082         	movff	sprintf@fval+2,___ftadd@f1+2
  2290  000C82  0E00               	movlw	0
  2291  000C84  0100               	movlb	0	; () banked
  2292  000C86  6F83               	movwf	___ftadd@f2& (0+255),b
  2293  000C88  0E00               	movlw	0
  2294  000C8A  0100               	movlb	0	; () banked
  2295  000C8C  6F84               	movwf	(___ftadd@f2+1)& (0+255),b
  2296  000C8E  0E3F               	movlw	63
  2297  000C90  0100               	movlb	0	; () banked
  2298  000C92  6F85               	movwf	(___ftadd@f2+2)& (0+255),b
  2299  000C94  EC05  F00E         	call	___ftadd	;wreg free
  2300  000C98  C080  F0B7         	movff	?___ftadd,sprintf@fval
  2301  000C9C  C081  F0B8         	movff	?___ftadd+1,sprintf@fval+1
  2302  000CA0  C082  F0B9         	movff	?___ftadd+2,sprintf@fval+2
  2303  000CA4                     l4181:
  2304                           
  2305                           ;doprnt.c: 895: if((unsigned long)fval >= dpowers[c+1]) {
  2306  000CA4  C0BA  F09B         	movff	sprintf@c,??_sprintf
  2307  000CA8  0100               	movlb	0	; () banked
  2308  000CAA  6B9C               	clrf	(??_sprintf+1)& (0+255),b
  2309  000CAC  BF9B               	btfsc	??_sprintf& (0+255),7,b
  2310  000CAE  079C               	decf	(??_sprintf+1)& (0+255),f,b
  2311  000CB0  0100               	movlb	0	; () banked
  2312  000CB2  90D8               	bcf	status,0,c
  2313  000CB4  379B               	rlcf	??_sprintf& (0+255),f,b
  2314  000CB6  379C               	rlcf	(??_sprintf+1)& (0+255),f,b
  2315  000CB8  0100               	movlb	0	; () banked
  2316  000CBA  90D8               	bcf	status,0,c
  2317  000CBC  379B               	rlcf	??_sprintf& (0+255),f,b
  2318  000CBE  379C               	rlcf	(??_sprintf+1)& (0+255),f,b
  2319  000CC0  0E04               	movlw	4
  2320  000CC2  0100               	movlb	0	; () banked
  2321  000CC4  279B               	addwf	??_sprintf& (0+255),f,b
  2322  000CC6  0E00               	movlw	0
  2323  000CC8  239C               	addwfc	(??_sprintf+1)& (0+255),f,b
  2324  000CCA  0E01               	movlw	low _dpowers
  2325  000CCC  0100               	movlb	0	; () banked
  2326  000CCE  259B               	addwf	??_sprintf& (0+255),w,b
  2327  000CD0  6EF6               	movwf	tblptrl,c
  2328  000CD2  0E08               	movlw	high _dpowers
  2329  000CD4  219C               	addwfc	(??_sprintf+1)& (0+255),w,b
  2330  000CD6  6EF7               	movwf	tblptrh,c
  2331  000CD8                     	if	0	;There are less than 3 active tblptr bytes
  2332  000CD8                     	endif
  2333  000CD8  C0B7  F027         	movff	sprintf@fval,___fttol@f1
  2334  000CDC  C0B8  F028         	movff	sprintf@fval+1,___fttol@f1+1
  2335  000CE0  C0B9  F029         	movff	sprintf@fval+2,___fttol@f1+2
  2336  000CE4  ECEB  F012         	call	___fttol	;wreg free
  2337  000CE8  0009               	tblrd		*+
  2338  000CEA  50F5               	movf	tablat,w,c
  2339  000CEC  5C27               	subwf	?___fttol,w,c
  2340  000CEE  0009               	tblrd		*+
  2341  000CF0  50F5               	movf	tablat,w,c
  2342  000CF2  5828               	subwfb	?___fttol+1,w,c
  2343  000CF4  0009               	tblrd		*+
  2344  000CF6  50F5               	movf	tablat,w,c
  2345  000CF8  5829               	subwfb	?___fttol+2,w,c
  2346  000CFA  0009               	tblrd		*+
  2347  000CFC  50F5               	movf	tablat,w,c
  2348  000CFE  582A               	subwfb	?___fttol+3,w,c
  2349  000D00  A0D8               	btfss	status,0,c
  2350  000D02  D01B               	goto	l4187
  2351                           
  2352                           ;doprnt.c: 896: fval *= 1e-1;
  2353  000D04  C0B7  F067         	movff	sprintf@fval,___ftmul@f1
  2354  000D08  C0B8  F068         	movff	sprintf@fval+1,___ftmul@f1+1
  2355  000D0C  C0B9  F069         	movff	sprintf@fval+2,___ftmul@f1+2
  2356  000D10  0ECD               	movlw	205
  2357  000D12  0100               	movlb	0	; () banked
  2358  000D14  6F6A               	movwf	___ftmul@f2& (0+255),b
  2359  000D16  0ECC               	movlw	204
  2360  000D18  0100               	movlb	0	; () banked
  2361  000D1A  6F6B               	movwf	(___ftmul@f2+1)& (0+255),b
  2362  000D1C  0E3D               	movlw	61
  2363  000D1E  0100               	movlb	0	; () banked
  2364  000D20  6F6C               	movwf	(___ftmul@f2+2)& (0+255),b
  2365  000D22  EC69  F010         	call	___ftmul	;wreg free
  2366  000D26  C067  F0B7         	movff	?___ftmul,sprintf@fval
  2367  000D2A  C068  F0B8         	movff	?___ftmul+1,sprintf@fval+1
  2368  000D2E  C069  F0B9         	movff	?___ftmul+2,sprintf@fval+2
  2369                           
  2370                           ;doprnt.c: 897: exp++;
  2371  000D32  0100               	movlb	0	; () banked
  2372  000D34  4BB3               	infsnz	sprintf@exp& (0+255),f,b
  2373  000D36  2BB4               	incf	(sprintf@exp+1)& (0+255),f,b
  2374                           
  2375                           ;doprnt.c: 898: } else if((unsigned long)fval < dpowers[c]) {
  2376  000D38  D03A               	goto	l4193
  2377  000D3A                     l4187:
  2378  000D3A  0100               	movlb	0	; () banked
  2379  000D3C  51BA               	movf	sprintf@c& (0+255),w,b
  2380  000D3E  0D04               	mullw	4
  2381  000D40  0E01               	movlw	low _dpowers
  2382  000D42  24F3               	addwf	prodl,w,c
  2383  000D44  6EF6               	movwf	tblptrl,c
  2384  000D46  0E08               	movlw	high _dpowers
  2385  000D48  20F4               	addwfc	prodh,w,c
  2386  000D4A  6EF7               	movwf	tblptrh,c
  2387  000D4C                     	if	0	;There are less than 3 active tblptr bytes
  2388  000D4C                     	endif
  2389  000D4C  C0B7  F027         	movff	sprintf@fval,___fttol@f1
  2390  000D50  C0B8  F028         	movff	sprintf@fval+1,___fttol@f1+1
  2391  000D54  C0B9  F029         	movff	sprintf@fval+2,___fttol@f1+2
  2392  000D58  ECEB  F012         	call	___fttol	;wreg free
  2393  000D5C  0009               	tblrd		*+
  2394  000D5E  50F5               	movf	tablat,w,c
  2395  000D60  5C27               	subwf	?___fttol,w,c
  2396  000D62  0009               	tblrd		*+
  2397  000D64  50F5               	movf	tablat,w,c
  2398  000D66  5828               	subwfb	?___fttol+1,w,c
  2399  000D68  0009               	tblrd		*+
  2400  000D6A  50F5               	movf	tablat,w,c
  2401  000D6C  5829               	subwfb	?___fttol+2,w,c
  2402  000D6E  0009               	tblrd		*+
  2403  000D70  50F5               	movf	tablat,w,c
  2404  000D72  582A               	subwfb	?___fttol+3,w,c
  2405  000D74  B0D8               	btfsc	status,0,c
  2406  000D76  D01B               	goto	l4193
  2407                           
  2408                           ;doprnt.c: 899: fval *= 10.0;
  2409  000D78  C0B7  F067         	movff	sprintf@fval,___ftmul@f1
  2410  000D7C  C0B8  F068         	movff	sprintf@fval+1,___ftmul@f1+1
  2411  000D80  C0B9  F069         	movff	sprintf@fval+2,___ftmul@f1+2
  2412  000D84  0E00               	movlw	0
  2413  000D86  0100               	movlb	0	; () banked
  2414  000D88  6F6A               	movwf	___ftmul@f2& (0+255),b
  2415  000D8A  0E20               	movlw	32
  2416  000D8C  0100               	movlb	0	; () banked
  2417  000D8E  6F6B               	movwf	(___ftmul@f2+1)& (0+255),b
  2418  000D90  0E41               	movlw	65
  2419  000D92  0100               	movlb	0	; () banked
  2420  000D94  6F6C               	movwf	(___ftmul@f2+2)& (0+255),b
  2421  000D96  EC69  F010         	call	___ftmul	;wreg free
  2422  000D9A  C067  F0B7         	movff	?___ftmul,sprintf@fval
  2423  000D9E  C068  F0B8         	movff	?___ftmul+1,sprintf@fval+1
  2424  000DA2  C069  F0B9         	movff	?___ftmul+2,sprintf@fval+2
  2425                           
  2426                           ;doprnt.c: 900: exp--;
  2427  000DA6  0100               	movlb	0	; () banked
  2428  000DA8  07B3               	decf	sprintf@exp& (0+255),f,b
  2429  000DAA  A0D8               	btfss	status,0,c
  2430  000DAC  07B4               	decf	(sprintf@exp+1)& (0+255),f,b
  2431  000DAE                     l4193:
  2432                           
  2433                           ;doprnt.c: 901: }
  2434                           ;doprnt.c: 903: }
  2435                           ;doprnt.c: 959: {
  2436                           ;doprnt.c: 973: if(flag & 0x03)
  2437  000DAE  0E03               	movlw	3
  2438  000DB0  0100               	movlb	0	; () banked
  2439  000DB2  15A9               	andwf	sprintf@flag& (0+255),w,b
  2440  000DB4  0100               	movlb	0	; () banked
  2441  000DB6  6F9B               	movwf	??_sprintf& (0+255),b
  2442  000DB8  0E00               	movlw	0
  2443  000DBA  0100               	movlb	0	; () banked
  2444  000DBC  15AA               	andwf	(sprintf@flag+1)& (0+255),w,b
  2445  000DBE  0100               	movlb	0	; () banked
  2446  000DC0  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  2447  000DC2  0100               	movlb	0	; () banked
  2448  000DC4  519B               	movf	??_sprintf& (0+255),w,b
  2449  000DC6  0100               	movlb	0	; () banked
  2450  000DC8  119C               	iorwf	(??_sprintf+1)& (0+255),w,b
  2451  000DCA  B4D8               	btfsc	status,2,c
  2452  000DCC  D009               	goto	l4199
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;doprnt.c: 974: ((*sp++ = ('-')));
  2456  000DCE  C095  FFD9         	movff	sprintf@sp,fsr2l
  2457  000DD2  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  2458  000DD6  0E2D               	movlw	45
  2459  000DD8  6EDF               	movwf	indf2,c
  2460                           
  2461                           ; BSR set to: 0
  2462  000DDA  0100               	movlb	0	; () banked
  2463  000DDC  4B95               	infsnz	sprintf@sp& (0+255),f,b
  2464  000DDE  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  2465  000DE0                     l4199:
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;doprnt.c: 980: }
  2469                           ;doprnt.c: 985: val = (unsigned long)fval;
  2470  000DE0  C0B7  F027         	movff	sprintf@fval,___fttol@f1
  2471  000DE4  C0B8  F028         	movff	sprintf@fval+1,___fttol@f1+1
  2472  000DE8  C0B9  F029         	movff	sprintf@fval+2,___fttol@f1+2
  2473  000DEC  ECEB  F012         	call	___fttol	;wreg free
  2474  000DF0  C027  F0AF         	movff	?___fttol,sprintf@val
  2475  000DF4  C028  F0B0         	movff	?___fttol+1,sprintf@val+1
  2476  000DF8  C029  F0B1         	movff	?___fttol+2,sprintf@val+2
  2477  000DFC  C02A  F0B2         	movff	?___fttol+3,sprintf@val+3
  2478                           
  2479                           ;doprnt.c: 986: ((*sp++ = (val/dpowers[c] + '0')));
  2480  000E00  C0AF  F013         	movff	sprintf@val,___lldiv@dividend
  2481  000E04  C0B0  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  2482  000E08  C0B1  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  2483  000E0C  C0B2  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  2484  000E10  0100               	movlb	0	; () banked
  2485  000E12  51BA               	movf	sprintf@c& (0+255),w,b
  2486  000E14  0D04               	mullw	4
  2487  000E16  0E01               	movlw	low _dpowers
  2488  000E18  24F3               	addwf	prodl,w,c
  2489  000E1A  6EF6               	movwf	tblptrl,c
  2490  000E1C  0E08               	movlw	high _dpowers
  2491  000E1E  20F4               	addwfc	prodh,w,c
  2492  000E20  6EF7               	movwf	tblptrh,c
  2493  000E22                     	if	0	;There are less than 3 active tblptr bytes
  2494  000E22                     	endif
  2495  000E22  0009               	tblrd		*+
  2496  000E24  CFF5 F017          	movff	tablat,___lldiv@divisor
  2497  000E28  0009               	tblrd		*+
  2498  000E2A  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  2499  000E2E  0009               	tblrd		*+
  2500  000E30  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  2501  000E34  000A               	tblrd		*-
  2502  000E36  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  2503  000E3A  ECAB  F014         	call	___lldiv	;wreg free
  2504  000E3E  5013               	movf	?___lldiv,w,c
  2505  000E40  0F30               	addlw	48
  2506  000E42  C095  FFD9         	movff	sprintf@sp,fsr2l
  2507  000E46  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  2508  000E4A  6EDF               	movwf	indf2,c
  2509  000E4C  0100               	movlb	0	; () banked
  2510  000E4E  4B95               	infsnz	sprintf@sp& (0+255),f,b
  2511  000E50  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;doprnt.c: 987: val %= dpowers[c];
  2515  000E52  C0AF  F013         	movff	sprintf@val,___llmod@dividend
  2516  000E56  C0B0  F014         	movff	sprintf@val+1,___llmod@dividend+1
  2517  000E5A  C0B1  F015         	movff	sprintf@val+2,___llmod@dividend+2
  2518  000E5E  C0B2  F016         	movff	sprintf@val+3,___llmod@dividend+3
  2519  000E62  0100               	movlb	0	; () banked
  2520  000E64  51BA               	movf	sprintf@c& (0+255),w,b
  2521  000E66  0D04               	mullw	4
  2522  000E68  0E01               	movlw	low _dpowers
  2523  000E6A  24F3               	addwf	prodl,w,c
  2524  000E6C  6EF6               	movwf	tblptrl,c
  2525  000E6E  0E08               	movlw	high _dpowers
  2526  000E70  20F4               	addwfc	prodh,w,c
  2527  000E72  6EF7               	movwf	tblptrh,c
  2528  000E74                     	if	0	;There are less than 3 active tblptr bytes
  2529  000E74                     	endif
  2530  000E74  0009               	tblrd		*+
  2531  000E76  CFF5 F017          	movff	tablat,___llmod@divisor
  2532  000E7A  0009               	tblrd		*+
  2533  000E7C  CFF5 F018          	movff	tablat,___llmod@divisor+1
  2534  000E80  0009               	tblrd		*+
  2535  000E82  CFF5 F019          	movff	tablat,___llmod@divisor+2
  2536  000E86  000A               	tblrd		*-
  2537  000E88  CFF5 F01A          	movff	tablat,___llmod@divisor+3
  2538  000E8C  EC98  F015         	call	___llmod	;wreg free
  2539  000E90  C013  F0AF         	movff	?___llmod,sprintf@val
  2540  000E94  C014  F0B0         	movff	?___llmod+1,sprintf@val+1
  2541  000E98  C015  F0B1         	movff	?___llmod+2,sprintf@val+2
  2542  000E9C  C016  F0B2         	movff	?___llmod+3,sprintf@val+3
  2543                           
  2544                           ;doprnt.c: 992: if(prec)
  2545  000EA0  0100               	movlb	0	; () banked
  2546  000EA2  51B5               	movf	sprintf@prec& (0+255),w,b
  2547  000EA4  0100               	movlb	0	; () banked
  2548  000EA6  11B6               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2549  000EA8  B4D8               	btfsc	status,2,c
  2550  000EAA  D096               	goto	l4235
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;doprnt.c: 994: {
  2554                           ;doprnt.c: 995: ((*sp++ = ('.')));
  2555  000EAC  C095  FFD9         	movff	sprintf@sp,fsr2l
  2556  000EB0  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  2557  000EB4  0E2E               	movlw	46
  2558  000EB6  6EDF               	movwf	indf2,c
  2559                           
  2560                           ; BSR set to: 0
  2561  000EB8  0100               	movlb	0	; () banked
  2562  000EBA  4B95               	infsnz	sprintf@sp& (0+255),f,b
  2563  000EBC  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;doprnt.c: 996: prec -= c;
  2567  000EBE  0100               	movlb	0	; () banked
  2568  000EC0  51BA               	movf	sprintf@c& (0+255),w,b
  2569  000EC2  0100               	movlb	0	; () banked
  2570  000EC4  5FB5               	subwf	sprintf@prec& (0+255),f,b
  2571  000EC6  0E00               	movlw	0
  2572  000EC8  0100               	movlb	0	; () banked
  2573  000ECA  BFBA               	btfsc	sprintf@c& (0+255),7,b
  2574  000ECC  0EFF               	movlw	255
  2575  000ECE  0100               	movlb	0	; () banked
  2576  000ED0  5BB6               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2577                           
  2578                           ;doprnt.c: 997: while(c--) {
  2579  000ED2  D068               	goto	l4225
  2580  000ED4                     l420:
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;doprnt.c: 1002: if(flag & 0x200 && val == 0) {
  2584  000ED4  0100               	movlb	0	; () banked
  2585  000ED6  A3AA               	btfss	(sprintf@flag+1)& (0+255),1,b
  2586  000ED8  D015               	goto	l4219
  2587                           
  2588                           ; BSR set to: 0
  2589  000EDA  0100               	movlb	0	; () banked
  2590  000EDC  51AF               	movf	sprintf@val& (0+255),w,b
  2591  000EDE  0100               	movlb	0	; () banked
  2592  000EE0  11B0               	iorwf	(sprintf@val+1)& (0+255),w,b
  2593  000EE2  0100               	movlb	0	; () banked
  2594  000EE4  11B1               	iorwf	(sprintf@val+2)& (0+255),w,b
  2595  000EE6  0100               	movlb	0	; () banked
  2596  000EE8  11B2               	iorwf	(sprintf@val+3)& (0+255),w,b
  2597  000EEA  A4D8               	btfss	status,2,c
  2598  000EEC  D00B               	goto	l4219
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;doprnt.c: 1003: prec = c = 0;
  2602  000EEE  0E00               	movlw	0
  2603  000EF0  0100               	movlb	0	; () banked
  2604  000EF2  6FBA               	movwf	sprintf@c& (0+255),b
  2605  000EF4  0100               	movlb	0	; () banked
  2606  000EF6  51BA               	movf	sprintf@c& (0+255),w,b
  2607  000EF8  0100               	movlb	0	; () banked
  2608  000EFA  6FB5               	movwf	sprintf@prec& (0+255),b
  2609  000EFC  6BB6               	clrf	(sprintf@prec+1)& (0+255),b
  2610  000EFE  BFB5               	btfsc	sprintf@prec& (0+255),7,b
  2611  000F00  07B6               	decf	(sprintf@prec+1)& (0+255),f,b
  2612                           
  2613                           ;doprnt.c: 1004: break;
  2614  000F02  D064               	goto	l4233
  2615  000F04                     l4219:
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;doprnt.c: 1005: }
  2619                           ;doprnt.c: 1007: ((*sp++ = ('0' + (val/dpowers[c]))));
  2620  000F04  C0AF  F013         	movff	sprintf@val,___lldiv@dividend
  2621  000F08  C0B0  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  2622  000F0C  C0B1  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  2623  000F10  C0B2  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  2624  000F14  0100               	movlb	0	; () banked
  2625  000F16  51BA               	movf	sprintf@c& (0+255),w,b
  2626  000F18  0D04               	mullw	4
  2627  000F1A  0E01               	movlw	low _dpowers
  2628  000F1C  24F3               	addwf	prodl,w,c
  2629  000F1E  6EF6               	movwf	tblptrl,c
  2630  000F20  0E08               	movlw	high _dpowers
  2631  000F22  20F4               	addwfc	prodh,w,c
  2632  000F24  6EF7               	movwf	tblptrh,c
  2633  000F26                     	if	0	;There are less than 3 active tblptr bytes
  2634  000F26                     	endif
  2635  000F26  0009               	tblrd		*+
  2636  000F28  CFF5 F017          	movff	tablat,___lldiv@divisor
  2637  000F2C  0009               	tblrd		*+
  2638  000F2E  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  2639  000F32  0009               	tblrd		*+
  2640  000F34  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  2641  000F38  000A               	tblrd		*-
  2642  000F3A  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  2643  000F3E  ECAB  F014         	call	___lldiv	;wreg free
  2644  000F42  5013               	movf	?___lldiv,w,c
  2645  000F44  0F30               	addlw	48
  2646  000F46  C095  FFD9         	movff	sprintf@sp,fsr2l
  2647  000F4A  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  2648  000F4E  6EDF               	movwf	indf2,c
  2649  000F50  0100               	movlb	0	; () banked
  2650  000F52  4B95               	infsnz	sprintf@sp& (0+255),f,b
  2651  000F54  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;doprnt.c: 1008: val %= dpowers[c];
  2655  000F56  C0AF  F013         	movff	sprintf@val,___llmod@dividend
  2656  000F5A  C0B0  F014         	movff	sprintf@val+1,___llmod@dividend+1
  2657  000F5E  C0B1  F015         	movff	sprintf@val+2,___llmod@dividend+2
  2658  000F62  C0B2  F016         	movff	sprintf@val+3,___llmod@dividend+3
  2659  000F66  0100               	movlb	0	; () banked
  2660  000F68  51BA               	movf	sprintf@c& (0+255),w,b
  2661  000F6A  0D04               	mullw	4
  2662  000F6C  0E01               	movlw	low _dpowers
  2663  000F6E  24F3               	addwf	prodl,w,c
  2664  000F70  6EF6               	movwf	tblptrl,c
  2665  000F72  0E08               	movlw	high _dpowers
  2666  000F74  20F4               	addwfc	prodh,w,c
  2667  000F76  6EF7               	movwf	tblptrh,c
  2668  000F78                     	if	0	;There are less than 3 active tblptr bytes
  2669  000F78                     	endif
  2670  000F78  0009               	tblrd		*+
  2671  000F7A  CFF5 F017          	movff	tablat,___llmod@divisor
  2672  000F7E  0009               	tblrd		*+
  2673  000F80  CFF5 F018          	movff	tablat,___llmod@divisor+1
  2674  000F84  0009               	tblrd		*+
  2675  000F86  CFF5 F019          	movff	tablat,___llmod@divisor+2
  2676  000F8A  000A               	tblrd		*-
  2677  000F8C  CFF5 F01A          	movff	tablat,___llmod@divisor+3
  2678  000F90  EC98  F015         	call	___llmod	;wreg free
  2679  000F94  C013  F0AF         	movff	?___llmod,sprintf@val
  2680  000F98  C014  F0B0         	movff	?___llmod+1,sprintf@val+1
  2681  000F9C  C015  F0B1         	movff	?___llmod+2,sprintf@val+2
  2682  000FA0  C016  F0B2         	movff	?___llmod+3,sprintf@val+3
  2683  000FA4                     l4225:
  2684  000FA4  0100               	movlb	0	; () banked
  2685  000FA6  07BA               	decf	sprintf@c& (0+255),f,b
  2686  000FA8  0100               	movlb	0	; () banked
  2687  000FAA  29BA               	incf	sprintf@c& (0+255),w,b
  2688  000FAC  B4D8               	btfsc	status,2,c
  2689  000FAE  D00E               	goto	l4233
  2690  000FB0  D791               	goto	l420
  2691  000FB2                     l4227:
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;doprnt.c: 1012: ((*sp++ = ('0')));
  2695  000FB2  C095  FFD9         	movff	sprintf@sp,fsr2l
  2696  000FB6  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  2697  000FBA  0E30               	movlw	48
  2698  000FBC  6EDF               	movwf	indf2,c
  2699                           
  2700                           ; BSR set to: 0
  2701  000FBE  0100               	movlb	0	; () banked
  2702  000FC0  4B95               	infsnz	sprintf@sp& (0+255),f,b
  2703  000FC2  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;doprnt.c: 1013: prec--;
  2707  000FC4  0100               	movlb	0	; () banked
  2708  000FC6  07B5               	decf	sprintf@prec& (0+255),f,b
  2709  000FC8  A0D8               	btfss	status,0,c
  2710  000FCA  07B6               	decf	(sprintf@prec+1)& (0+255),f,b
  2711  000FCC                     l4233:
  2712                           
  2713                           ; BSR set to: 0
  2714  000FCC  0100               	movlb	0	; () banked
  2715  000FCE  51B5               	movf	sprintf@prec& (0+255),w,b
  2716  000FD0  0100               	movlb	0	; () banked
  2717  000FD2  11B6               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2718  000FD4  A4D8               	btfss	status,2,c
  2719  000FD6  D7ED               	goto	l4227
  2720  000FD8                     l4235:
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;doprnt.c: 1014: }
  2724                           ;doprnt.c: 1015: }
  2725                           ;doprnt.c: 1021: ((*sp++ = ('e')));
  2726  000FD8  C095  FFD9         	movff	sprintf@sp,fsr2l
  2727  000FDC  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  2728  000FE0  0E65               	movlw	101
  2729  000FE2  6EDF               	movwf	indf2,c
  2730                           
  2731                           ; BSR set to: 0
  2732  000FE4  0100               	movlb	0	; () banked
  2733  000FE6  4B95               	infsnz	sprintf@sp& (0+255),f,b
  2734  000FE8  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;doprnt.c: 1022: if(exp < 0) {
  2738  000FEA  0100               	movlb	0	; () banked
  2739  000FEC  AFB4               	btfss	(sprintf@exp+1)& (0+255),7,b
  2740  000FEE  D00F               	goto	l4247
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;doprnt.c: 1023: exp = -exp;
  2744  000FF0  0100               	movlb	0	; () banked
  2745  000FF2  6DB3               	negf	sprintf@exp& (0+255),b
  2746  000FF4  1FB4               	comf	(sprintf@exp+1)& (0+255),f,b
  2747  000FF6  B0D8               	btfsc	status,0,c
  2748  000FF8  2BB4               	incf	(sprintf@exp+1)& (0+255),f,b
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;doprnt.c: 1024: ((*sp++ = ('-')));
  2752  000FFA  C095  FFD9         	movff	sprintf@sp,fsr2l
  2753  000FFE  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  2754  001002  0E2D               	movlw	45
  2755  001004  D009               	goto	L1
  2756  001006                     l4245:
  2757                           
  2758                           ; BSR set to: 0
  2759  001006  0100               	movlb	0	; () banked
  2760  001008  4B95               	infsnz	sprintf@sp& (0+255),f,b
  2761  00100A  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  2762                           
  2763                           ;doprnt.c: 1025: } else
  2764  00100C  D007               	goto	l4251
  2765  00100E                     l4247:
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;doprnt.c: 1026: ((*sp++ = ('+')));
  2769  00100E  C095  FFD9         	movff	sprintf@sp,fsr2l
  2770  001012  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  2771  001016  0E2B               	movlw	43
  2772  001018                     L1:
  2773  001018  6EDF               	movwf	indf2,c
  2774  00101A  D7F5               	goto	l4245
  2775  00101C                     l4251:
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;doprnt.c: 1039: ((*sp++ = (exp / 10 + '0')));
  2779  00101C  C0B3  F019         	movff	sprintf@exp,___awdiv@dividend
  2780  001020  C0B4  F01A         	movff	sprintf@exp+1,___awdiv@dividend+1
  2781  001024  0E00               	movlw	0
  2782  001026  6E1C               	movwf	___awdiv@divisor+1,c
  2783  001028  0E0A               	movlw	10
  2784  00102A  6E1B               	movwf	___awdiv@divisor,c
  2785  00102C  EC69  F014         	call	___awdiv	;wreg free
  2786  001030  5019               	movf	?___awdiv,w,c
  2787  001032  0F30               	addlw	48
  2788  001034  C095  FFD9         	movff	sprintf@sp,fsr2l
  2789  001038  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  2790  00103C  6EDF               	movwf	indf2,c
  2791  00103E  0100               	movlb	0	; () banked
  2792  001040  4B95               	infsnz	sprintf@sp& (0+255),f,b
  2793  001042  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;doprnt.c: 1040: ((*sp++ = (exp % 10 + '0')));
  2797  001044  C0B3  F013         	movff	sprintf@exp,___awmod@dividend
  2798  001048  C0B4  F014         	movff	sprintf@exp+1,___awmod@dividend+1
  2799  00104C  0E00               	movlw	0
  2800  00104E  6E16               	movwf	___awmod@divisor+1,c
  2801  001050  0E0A               	movlw	10
  2802  001052  6E15               	movwf	___awmod@divisor,c
  2803  001054  EC2A  F015         	call	___awmod	;wreg free
  2804  001058  5013               	movf	?___awmod,w,c
  2805  00105A  0F30               	addlw	48
  2806  00105C  C095  FFD9         	movff	sprintf@sp,fsr2l
  2807  001060  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  2808  001064  D3AF               	goto	L2
  2809  001066                     l4257:
  2810  001066  0100               	movlb	0	; () banked
  2811  001068  4B95               	infsnz	sprintf@sp& (0+255),f,b
  2812  00106A  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  2813                           
  2814                           ;doprnt.c: 1047: continue;
  2815  00106C  D3AD               	goto	l4419
  2816  00106E                     l406:
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;doprnt.c: 1048: }
  2820                           ;doprnt.c: 1087: if(flag & 0x200) {
  2821  00106E  0100               	movlb	0	; () banked
  2822  001070  A3AA               	btfss	(sprintf@flag+1)& (0+255),1,b
  2823  001072  D104               	goto	l4295
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;doprnt.c: 1088: if(exp < 0)
  2827  001074  0100               	movlb	0	; () banked
  2828  001076  AFB4               	btfss	(sprintf@exp+1)& (0+255),7,b
  2829  001078  D012               	goto	l4263
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;doprnt.c: 1089: prec -= (exp+1);
  2833  00107A  0E01               	movlw	1
  2834  00107C  0100               	movlb	0	; () banked
  2835  00107E  25B3               	addwf	sprintf@exp& (0+255),w,b
  2836  001080  0100               	movlb	0	; () banked
  2837  001082  6F9B               	movwf	??_sprintf& (0+255),b
  2838  001084  0E00               	movlw	0
  2839  001086  0100               	movlb	0	; () banked
  2840  001088  21B4               	addwfc	(sprintf@exp+1)& (0+255),w,b
  2841  00108A  0100               	movlb	0	; () banked
  2842  00108C  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  2843  00108E  0100               	movlb	0	; () banked
  2844  001090  519B               	movf	??_sprintf& (0+255),w,b
  2845  001092  0100               	movlb	0	; () banked
  2846  001094  5FB5               	subwf	sprintf@prec& (0+255),f,b
  2847  001096  0100               	movlb	0	; () banked
  2848  001098  519C               	movf	(??_sprintf+1)& (0+255),w,b
  2849  00109A  0100               	movlb	0	; () banked
  2850  00109C  5BB6               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2851  00109E                     l4263:
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;doprnt.c: 1091: val = (unsigned long)fval;
  2855  00109E  C0B7  F027         	movff	sprintf@fval,___fttol@f1
  2856  0010A2  C0B8  F028         	movff	sprintf@fval+1,___fttol@f1+1
  2857  0010A6  C0B9  F029         	movff	sprintf@fval+2,___fttol@f1+2
  2858  0010AA  ECEB  F012         	call	___fttol	;wreg free
  2859  0010AE  C027  F0AF         	movff	?___fttol,sprintf@val
  2860  0010B2  C028  F0B0         	movff	?___fttol+1,sprintf@val+1
  2861  0010B6  C029  F0B1         	movff	?___fttol+2,sprintf@val+2
  2862  0010BA  C02A  F0B2         	movff	?___fttol+3,sprintf@val+3
  2863                           
  2864                           ;doprnt.c: 1092: for(c = 0 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2865  0010BE  0E00               	movlw	0
  2866  0010C0  0100               	movlb	0	; () banked
  2867  0010C2  6FBA               	movwf	sprintf@c& (0+255),b
  2868  0010C4                     l4267:
  2869                           
  2870                           ; BSR set to: 0
  2871  0010C4  0E0A               	movlw	10
  2872  0010C6  0100               	movlb	0	; () banked
  2873  0010C8  19BA               	xorwf	sprintf@c& (0+255),w,b
  2874  0010CA  B4D8               	btfsc	status,2,c
  2875  0010CC  D01E               	goto	l4279
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;doprnt.c: 1093: if(val < dpowers[c])
  2879                           
  2880                           ; BSR set to: 0
  2881                           
  2882                           ; BSR set to: 0
  2883  0010CE  0100               	movlb	0	; () banked
  2884  0010D0  51BA               	movf	sprintf@c& (0+255),w,b
  2885  0010D2  0D04               	mullw	4
  2886  0010D4  0E01               	movlw	low _dpowers
  2887  0010D6  24F3               	addwf	prodl,w,c
  2888  0010D8  6EF6               	movwf	tblptrl,c
  2889  0010DA  0E08               	movlw	high _dpowers
  2890  0010DC  20F4               	addwfc	prodh,w,c
  2891  0010DE  6EF7               	movwf	tblptrh,c
  2892  0010E0                     	if	0	;There are less than 3 active tblptr bytes
  2893  0010E0                     	endif
  2894  0010E0  0009               	tblrd		*+
  2895  0010E2  50F5               	movf	tablat,w,c
  2896  0010E4  0100               	movlb	0	; () banked
  2897  0010E6  5DAF               	subwf	sprintf@val& (0+255),w,b
  2898  0010E8  0009               	tblrd		*+
  2899  0010EA  50F5               	movf	tablat,w,c
  2900  0010EC  0100               	movlb	0	; () banked
  2901  0010EE  59B0               	subwfb	(sprintf@val+1)& (0+255),w,b
  2902  0010F0  0009               	tblrd		*+
  2903  0010F2  50F5               	movf	tablat,w,c
  2904  0010F4  0100               	movlb	0	; () banked
  2905  0010F6  59B1               	subwfb	(sprintf@val+2)& (0+255),w,b
  2906  0010F8  0009               	tblrd		*+
  2907  0010FA  50F5               	movf	tablat,w,c
  2908  0010FC  0100               	movlb	0	; () banked
  2909  0010FE  59B2               	subwfb	(sprintf@val+3)& (0+255),w,b
  2910  001100  A0D8               	btfss	status,0,c
  2911  001102  D003               	goto	l4279
  2912                           
  2913                           ; BSR set to: 0
  2914                           
  2915                           ; BSR set to: 0
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;doprnt.c: 1094: break;
  2919  001104  0100               	movlb	0	; () banked
  2920  001106  2BBA               	incf	sprintf@c& (0+255),f,b
  2921  001108  D7DD               	goto	l4267
  2922  00110A                     l4279:
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;doprnt.c: 1095: prec -= c;
  2926  00110A  0100               	movlb	0	; () banked
  2927  00110C  51BA               	movf	sprintf@c& (0+255),w,b
  2928  00110E  0100               	movlb	0	; () banked
  2929  001110  5FB5               	subwf	sprintf@prec& (0+255),f,b
  2930  001112  0E00               	movlw	0
  2931  001114  0100               	movlb	0	; () banked
  2932  001116  BFBA               	btfsc	sprintf@c& (0+255),7,b
  2933  001118  0EFF               	movlw	255
  2934  00111A  0100               	movlb	0	; () banked
  2935  00111C  5BB6               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2936                           
  2937                           ;doprnt.c: 1096: if(prec <= 12)
  2938  00111E  0100               	movlb	0	; () banked
  2939  001120  BFB6               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2940  001122  D008               	goto	l4281
  2941  001124  0100               	movlb	0	; () banked
  2942  001126  51B6               	movf	(sprintf@prec+1)& (0+255),w,b
  2943  001128  E11D               	bnz	l433
  2944  00112A  0E0D               	movlw	13
  2945  00112C  0100               	movlb	0	; () banked
  2946  00112E  5DB5               	subwf	sprintf@prec& (0+255),w,b
  2947  001130  B0D8               	btfsc	status,0,c
  2948  001132  D018               	goto	l433
  2949  001134                     l4281:
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;doprnt.c: 1097: fval += fround(prec);
  2953  001134  C0B7  F080         	movff	sprintf@fval,___ftadd@f1
  2954  001138  C0B8  F081         	movff	sprintf@fval+1,___ftadd@f1+1
  2955  00113C  C0B9  F082         	movff	sprintf@fval+2,___ftadd@f1+2
  2956  001140  0100               	movlb	0	; () banked
  2957  001142  51B5               	movf	sprintf@prec& (0+255),w,b
  2958  001144  EC39  F00F         	call	_fround
  2959  001148  C076  F083         	movff	?_fround,___ftadd@f2
  2960  00114C  C077  F084         	movff	?_fround+1,___ftadd@f2+1
  2961  001150  C078  F085         	movff	?_fround+2,___ftadd@f2+2
  2962  001154  EC05  F00E         	call	___ftadd	;wreg free
  2963  001158  C080  F0B7         	movff	?___ftadd,sprintf@fval
  2964  00115C  C081  F0B8         	movff	?___ftadd+1,sprintf@fval+1
  2965  001160  C082  F0B9         	movff	?___ftadd+2,sprintf@fval+2
  2966  001164                     l433:
  2967                           
  2968                           ;doprnt.c: 1100: {
  2969                           ;doprnt.c: 1101: double temp;
  2970                           ;doprnt.c: 1102: temp = scale(prec);
  2971  001164  0100               	movlb	0	; () banked
  2972  001166  51B5               	movf	sprintf@prec& (0+255),w,b
  2973  001168  ECFA  F00B         	call	_scale
  2974  00116C  C076  F0A6         	movff	?_scale,sprintf@temp
  2975  001170  C077  F0A7         	movff	?_scale+1,sprintf@temp+1
  2976  001174  C078  F0A8         	movff	?_scale+2,sprintf@temp+2
  2977                           
  2978                           ;doprnt.c: 1103: temp *= fval - (double)val;
  2979  001178  C0A6  F067         	movff	sprintf@temp,___ftmul@f1
  2980  00117C  C0A7  F068         	movff	sprintf@temp+1,___ftmul@f1+1
  2981  001180  C0A8  F069         	movff	sprintf@temp+2,___ftmul@f1+2
  2982  001184  C0B7  F083         	movff	sprintf@fval,___ftadd@f2
  2983  001188  C0B8  F084         	movff	sprintf@fval+1,___ftadd@f2+1
  2984  00118C  C0B9  F085         	movff	sprintf@fval+2,___ftadd@f2+2
  2985  001190  C0AF  F036         	movff	sprintf@val,___lltoft@c
  2986  001194  C0B0  F037         	movff	sprintf@val+1,___lltoft@c+1
  2987  001198  C0B1  F038         	movff	sprintf@val+2,___lltoft@c+2
  2988  00119C  C0B2  F039         	movff	sprintf@val+3,___lltoft@c+3
  2989  0011A0  EC62  F015         	call	___lltoft	;wreg free
  2990  0011A4  C036  F064         	movff	?___lltoft,___ftneg@f1
  2991  0011A8  C037  F065         	movff	?___lltoft+1,___ftneg@f1+1
  2992  0011AC  C038  F066         	movff	?___lltoft+2,___ftneg@f1+2
  2993  0011B0  EC9D  F016         	call	___ftneg	;wreg free
  2994  0011B4  C064  F080         	movff	?___ftneg,___ftadd@f1
  2995  0011B8  C065  F081         	movff	?___ftneg+1,___ftadd@f1+1
  2996  0011BC  C066  F082         	movff	?___ftneg+2,___ftadd@f1+2
  2997  0011C0  EC05  F00E         	call	___ftadd	;wreg free
  2998  0011C4  C080  F06A         	movff	?___ftadd,___ftmul@f2
  2999  0011C8  C081  F06B         	movff	?___ftadd+1,___ftmul@f2+1
  3000  0011CC  C082  F06C         	movff	?___ftadd+2,___ftmul@f2+2
  3001  0011D0  EC69  F010         	call	___ftmul	;wreg free
  3002  0011D4  C067  F0A6         	movff	?___ftmul,sprintf@temp
  3003  0011D8  C068  F0A7         	movff	?___ftmul+1,sprintf@temp+1
  3004  0011DC  C069  F0A8         	movff	?___ftmul+2,sprintf@temp+2
  3005                           
  3006                           ;doprnt.c: 1104: val = (unsigned long)temp;
  3007  0011E0  C0A6  F027         	movff	sprintf@temp,___fttol@f1
  3008  0011E4  C0A7  F028         	movff	sprintf@temp+1,___fttol@f1+1
  3009  0011E8  C0A8  F029         	movff	sprintf@temp+2,___fttol@f1+2
  3010  0011EC  ECEB  F012         	call	___fttol	;wreg free
  3011  0011F0  C027  F0AF         	movff	?___fttol,sprintf@val
  3012  0011F4  C028  F0B0         	movff	?___fttol+1,sprintf@val+1
  3013  0011F8  C029  F0B1         	movff	?___fttol+2,sprintf@val+2
  3014  0011FC  C02A  F0B2         	movff	?___fttol+3,sprintf@val+3
  3015                           
  3016                           ;doprnt.c: 1105: }
  3017                           ;doprnt.c: 1106: while(prec && val % 10 == 0) {
  3018  001200  D01E               	goto	l4291
  3019  001202                     l4287:
  3020                           
  3021                           ;doprnt.c: 1107: val /= 10;
  3022  001202  C0AF  F013         	movff	sprintf@val,___lldiv@dividend
  3023  001206  C0B0  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  3024  00120A  C0B1  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  3025  00120E  C0B2  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  3026  001212  0E0A               	movlw	10
  3027  001214  6E17               	movwf	___lldiv@divisor,c
  3028  001216  0E00               	movlw	0
  3029  001218  6E18               	movwf	___lldiv@divisor+1,c
  3030  00121A  0E00               	movlw	0
  3031  00121C  6E19               	movwf	___lldiv@divisor+2,c
  3032  00121E  0E00               	movlw	0
  3033  001220  6E1A               	movwf	___lldiv@divisor+3,c
  3034  001222  ECAB  F014         	call	___lldiv	;wreg free
  3035  001226  C013  F0AF         	movff	?___lldiv,sprintf@val
  3036  00122A  C014  F0B0         	movff	?___lldiv+1,sprintf@val+1
  3037  00122E  C015  F0B1         	movff	?___lldiv+2,sprintf@val+2
  3038  001232  C016  F0B2         	movff	?___lldiv+3,sprintf@val+3
  3039                           
  3040                           ;doprnt.c: 1108: prec--;
  3041  001236  0100               	movlb	0	; () banked
  3042  001238  07B5               	decf	sprintf@prec& (0+255),f,b
  3043  00123A  A0D8               	btfss	status,0,c
  3044  00123C  07B6               	decf	(sprintf@prec+1)& (0+255),f,b
  3045  00123E                     l4291:
  3046  00123E  0100               	movlb	0	; () banked
  3047  001240  51B5               	movf	sprintf@prec& (0+255),w,b
  3048  001242  0100               	movlb	0	; () banked
  3049  001244  11B6               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3050  001246  B4D8               	btfsc	status,2,c
  3051  001248  D03C               	goto	l4299
  3052                           
  3053                           ; BSR set to: 0
  3054  00124A  C0AF  F013         	movff	sprintf@val,___llmod@dividend
  3055  00124E  C0B0  F014         	movff	sprintf@val+1,___llmod@dividend+1
  3056  001252  C0B1  F015         	movff	sprintf@val+2,___llmod@dividend+2
  3057  001256  C0B2  F016         	movff	sprintf@val+3,___llmod@dividend+3
  3058  00125A  0E0A               	movlw	10
  3059  00125C  6E17               	movwf	___llmod@divisor,c
  3060  00125E  0E00               	movlw	0
  3061  001260  6E18               	movwf	___llmod@divisor+1,c
  3062  001262  0E00               	movlw	0
  3063  001264  6E19               	movwf	___llmod@divisor+2,c
  3064  001266  0E00               	movlw	0
  3065  001268  6E1A               	movwf	___llmod@divisor+3,c
  3066  00126A  EC98  F015         	call	___llmod	;wreg free
  3067  00126E  5013               	movf	?___llmod,w,c
  3068  001270  1014               	iorwf	?___llmod+1,w,c
  3069  001272  1015               	iorwf	?___llmod+2,w,c
  3070  001274  1016               	iorwf	?___llmod+3,w,c
  3071  001276  A4D8               	btfss	status,2,c
  3072  001278  D024               	goto	l4299
  3073  00127A  D7C3               	goto	l4287
  3074  00127C                     l4295:
  3075                           
  3076                           ;doprnt.c: 1112: if(prec <= 12)
  3077  00127C  0100               	movlb	0	; () banked
  3078  00127E  BFB6               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3079  001280  D008               	goto	l4297
  3080  001282  0100               	movlb	0	; () banked
  3081  001284  51B6               	movf	(sprintf@prec+1)& (0+255),w,b
  3082  001286  E11D               	bnz	l4299
  3083  001288  0E0D               	movlw	13
  3084  00128A  0100               	movlb	0	; () banked
  3085  00128C  5DB5               	subwf	sprintf@prec& (0+255),w,b
  3086  00128E  B0D8               	btfsc	status,0,c
  3087  001290  D018               	goto	l4299
  3088  001292                     l4297:
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;doprnt.c: 1113: fval += fround(prec);
  3092  001292  C0B7  F080         	movff	sprintf@fval,___ftadd@f1
  3093  001296  C0B8  F081         	movff	sprintf@fval+1,___ftadd@f1+1
  3094  00129A  C0B9  F082         	movff	sprintf@fval+2,___ftadd@f1+2
  3095  00129E  0100               	movlb	0	; () banked
  3096  0012A0  51B5               	movf	sprintf@prec& (0+255),w,b
  3097  0012A2  EC39  F00F         	call	_fround
  3098  0012A6  C076  F083         	movff	?_fround,___ftadd@f2
  3099  0012AA  C077  F084         	movff	?_fround+1,___ftadd@f2+1
  3100  0012AE  C078  F085         	movff	?_fround+2,___ftadd@f2+2
  3101  0012B2  EC05  F00E         	call	___ftadd	;wreg free
  3102  0012B6  C080  F0B7         	movff	?___ftadd,sprintf@fval
  3103  0012BA  C081  F0B8         	movff	?___ftadd+1,sprintf@fval+1
  3104  0012BE  C082  F0B9         	movff	?___ftadd+2,sprintf@fval+2
  3105  0012C2                     l4299:
  3106                           
  3107                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3108  0012C2  0100               	movlb	0	; () banked
  3109  0012C4  BFB4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3110  0012C6  D008               	goto	l4301
  3111  0012C8  0100               	movlb	0	; () banked
  3112  0012CA  51B4               	movf	(sprintf@exp+1)& (0+255),w,b
  3113  0012CC  E126               	bnz	l4307
  3114  0012CE  0E0A               	movlw	10
  3115  0012D0  0100               	movlb	0	; () banked
  3116  0012D2  5DB3               	subwf	sprintf@exp& (0+255),w,b
  3117  0012D4  B0D8               	btfsc	status,0,c
  3118  0012D6  D021               	goto	l4307
  3119  0012D8                     l4301:
  3120                           
  3121                           ; BSR set to: 0
  3122  0012D8  0100               	movlb	0	; () banked
  3123  0012DA  51B7               	movf	sprintf@fval& (0+255),w,b
  3124  0012DC  0100               	movlb	0	; () banked
  3125  0012DE  11B8               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3126  0012E0  0100               	movlb	0	; () banked
  3127  0012E2  11B9               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3128  0012E4  B4D8               	btfsc	status,2,c
  3129  0012E6  D05F               	goto	l4321
  3130                           
  3131                           ; BSR set to: 0
  3132  0012E8  C0B7  F027         	movff	sprintf@fval,___fttol@f1
  3133  0012EC  C0B8  F028         	movff	sprintf@fval+1,___fttol@f1+1
  3134  0012F0  C0B9  F029         	movff	sprintf@fval+2,___fttol@f1+2
  3135  0012F4  ECEB  F012         	call	___fttol	;wreg free
  3136  0012F8  5027               	movf	?___fttol,w,c
  3137  0012FA  1028               	iorwf	?___fttol+1,w,c
  3138  0012FC  1029               	iorwf	?___fttol+2,w,c
  3139  0012FE  102A               	iorwf	?___fttol+3,w,c
  3140  001300  A4D8               	btfss	status,2,c
  3141  001302  D051               	goto	l4321
  3142  001304  0100               	movlb	0	; () banked
  3143  001306  BFB4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3144  001308  D04E               	goto	l4321
  3145  00130A  0100               	movlb	0	; () banked
  3146  00130C  51B4               	movf	(sprintf@exp+1)& (0+255),w,b
  3147  00130E  E105               	bnz	l4307
  3148  001310  0E02               	movlw	2
  3149  001312  0100               	movlb	0	; () banked
  3150  001314  5DB3               	subwf	sprintf@exp& (0+255),w,b
  3151  001316  A0D8               	btfss	status,0,c
  3152  001318  D046               	goto	l4321
  3153  00131A                     l4307:
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3157  00131A  C0AB  F08C         	movff	sprintf@tmpval,___ftge@ff1
  3158  00131E  C0AC  F08D         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3159  001322  C0AD  F08E         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3160  001326  0E70               	movlw	112
  3161  001328  0100               	movlb	0	; () banked
  3162  00132A  6F8F               	movwf	___ftge@ff2& (0+255),b
  3163  00132C  0E89               	movlw	137
  3164  00132E  0100               	movlb	0	; () banked
  3165  001330  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  3166  001332  0E40               	movlw	64
  3167  001334  0100               	movlb	0	; () banked
  3168  001336  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  3169  001338  EC65  F013         	call	___ftge	;wreg free
  3170  00133C  0100               	movlb	0	; () banked
  3171  00133E  B0D8               	btfsc	status,0,c
  3172  001340  D003               	goto	l4311
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3176  001342  0100               	movlb	0	; () banked
  3177  001344  0EF7               	movlw	247
  3178  001346  D002               	goto	L3
  3179  001348                     l4311:
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3183  001348  0100               	movlb	0	; () banked
  3184  00134A  0EF8               	movlw	248
  3185  00134C                     L3:
  3186  00134C  27B3               	addwf	sprintf@exp& (0+255),f,b
  3187  00134E  0EFF               	movlw	255
  3188  001350  23B4               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;doprnt.c: 1124: }
  3192                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3193                           
  3194                           ; BSR set to: 0
  3195  001352  0100               	movlb	0	; () banked
  3196  001354  51B3               	movf	sprintf@exp& (0+255),w,b
  3197  001356  ECFA  F00B         	call	_scale
  3198  00135A  C076  F0AB         	movff	?_scale,sprintf@tmpval
  3199  00135E  C077  F0AC         	movff	?_scale+1,sprintf@tmpval+1
  3200  001362  C078  F0AD         	movff	?_scale+2,sprintf@tmpval+2
  3201                           
  3202                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3203  001366  C0B7  F013         	movff	sprintf@fval,__tdiv_to_l_@f1
  3204  00136A  C0B8  F014         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3205  00136E  C0B9  F015         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3206  001372  C0AB  F016         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3207  001376  C0AC  F017         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3208  00137A  C0AD  F018         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3209  00137E  ECBE  F011         	call	__tdiv_to_l_	;wreg free
  3210  001382  C013  F0AF         	movff	?__tdiv_to_l_,sprintf@val
  3211  001386  C014  F0B0         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3212  00138A  C015  F0B1         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3213  00138E  C016  F0B2         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3214                           
  3215                           ;doprnt.c: 1129: fval = 0.0;
  3216  001392  0E00               	movlw	0
  3217  001394  0100               	movlb	0	; () banked
  3218  001396  6FB7               	movwf	sprintf@fval& (0+255),b
  3219  001398  0E00               	movlw	0
  3220  00139A  0100               	movlb	0	; () banked
  3221  00139C  6FB8               	movwf	(sprintf@fval+1)& (0+255),b
  3222  00139E  0E00               	movlw	0
  3223  0013A0  0100               	movlb	0	; () banked
  3224  0013A2  6FB9               	movwf	(sprintf@fval+2)& (0+255),b
  3225                           
  3226                           ;doprnt.c: 1130: } else {
  3227  0013A4  D033               	goto	l4325
  3228  0013A6                     l4321:
  3229                           
  3230                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3231  0013A6  C0B7  F027         	movff	sprintf@fval,___fttol@f1
  3232  0013AA  C0B8  F028         	movff	sprintf@fval+1,___fttol@f1+1
  3233  0013AE  C0B9  F029         	movff	sprintf@fval+2,___fttol@f1+2
  3234  0013B2  ECEB  F012         	call	___fttol	;wreg free
  3235  0013B6  C027  F0AF         	movff	?___fttol,sprintf@val
  3236  0013BA  C028  F0B0         	movff	?___fttol+1,sprintf@val+1
  3237  0013BE  C029  F0B1         	movff	?___fttol+2,sprintf@val+2
  3238  0013C2  C02A  F0B2         	movff	?___fttol+3,sprintf@val+3
  3239                           
  3240                           ;doprnt.c: 1132: fval -= (double)val;
  3241  0013C6  C0B7  F08C         	movff	sprintf@fval,___ftsub@f1
  3242  0013CA  C0B8  F08D         	movff	sprintf@fval+1,___ftsub@f1+1
  3243  0013CE  C0B9  F08E         	movff	sprintf@fval+2,___ftsub@f1+2
  3244  0013D2  C0AF  F036         	movff	sprintf@val,___lltoft@c
  3245  0013D6  C0B0  F037         	movff	sprintf@val+1,___lltoft@c+1
  3246  0013DA  C0B1  F038         	movff	sprintf@val+2,___lltoft@c+2
  3247  0013DE  C0B2  F039         	movff	sprintf@val+3,___lltoft@c+3
  3248  0013E2  EC62  F015         	call	___lltoft	;wreg free
  3249  0013E6  C036  F08F         	movff	?___lltoft,___ftsub@f2
  3250  0013EA  C037  F090         	movff	?___lltoft+1,___ftsub@f2+1
  3251  0013EE  C038  F091         	movff	?___lltoft+2,___ftsub@f2+2
  3252  0013F2  ECCB  F015         	call	___ftsub	;wreg free
  3253  0013F6  C08C  F0B7         	movff	?___ftsub,sprintf@fval
  3254  0013FA  C08D  F0B8         	movff	?___ftsub+1,sprintf@fval+1
  3255  0013FE  C08E  F0B9         	movff	?___ftsub+2,sprintf@fval+2
  3256                           
  3257                           ;doprnt.c: 1133: exp = 0;
  3258  001402  0E00               	movlw	0
  3259  001404  0100               	movlb	0	; () banked
  3260  001406  6FB4               	movwf	(sprintf@exp+1)& (0+255),b
  3261  001408  0E00               	movlw	0
  3262  00140A  6FB3               	movwf	sprintf@exp& (0+255),b
  3263  00140C                     l4325:
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;doprnt.c: 1134: }
  3267                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3268  00140C  0E01               	movlw	1
  3269  00140E  0100               	movlb	0	; () banked
  3270  001410  6FBA               	movwf	sprintf@c& (0+255),b
  3271  001412                     l4327:
  3272                           
  3273                           ; BSR set to: 0
  3274  001412  0E0A               	movlw	10
  3275  001414  0100               	movlb	0	; () banked
  3276  001416  19BA               	xorwf	sprintf@c& (0+255),w,b
  3277  001418  B4D8               	btfsc	status,2,c
  3278  00141A  D01E               	goto	l4339
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;doprnt.c: 1137: if(val < dpowers[c])
  3282                           
  3283                           ; BSR set to: 0
  3284                           
  3285                           ; BSR set to: 0
  3286  00141C  0100               	movlb	0	; () banked
  3287  00141E  51BA               	movf	sprintf@c& (0+255),w,b
  3288  001420  0D04               	mullw	4
  3289  001422  0E01               	movlw	low _dpowers
  3290  001424  24F3               	addwf	prodl,w,c
  3291  001426  6EF6               	movwf	tblptrl,c
  3292  001428  0E08               	movlw	high _dpowers
  3293  00142A  20F4               	addwfc	prodh,w,c
  3294  00142C  6EF7               	movwf	tblptrh,c
  3295  00142E                     	if	0	;There are less than 3 active tblptr bytes
  3296  00142E                     	endif
  3297  00142E  0009               	tblrd		*+
  3298  001430  50F5               	movf	tablat,w,c
  3299  001432  0100               	movlb	0	; () banked
  3300  001434  5DAF               	subwf	sprintf@val& (0+255),w,b
  3301  001436  0009               	tblrd		*+
  3302  001438  50F5               	movf	tablat,w,c
  3303  00143A  0100               	movlb	0	; () banked
  3304  00143C  59B0               	subwfb	(sprintf@val+1)& (0+255),w,b
  3305  00143E  0009               	tblrd		*+
  3306  001440  50F5               	movf	tablat,w,c
  3307  001442  0100               	movlb	0	; () banked
  3308  001444  59B1               	subwfb	(sprintf@val+2)& (0+255),w,b
  3309  001446  0009               	tblrd		*+
  3310  001448  50F5               	movf	tablat,w,c
  3311  00144A  0100               	movlb	0	; () banked
  3312  00144C  59B2               	subwfb	(sprintf@val+3)& (0+255),w,b
  3313  00144E  A0D8               	btfss	status,0,c
  3314  001450  D003               	goto	l4339
  3315                           
  3316                           ; BSR set to: 0
  3317                           
  3318                           ; BSR set to: 0
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;doprnt.c: 1138: break;
  3322  001452  0100               	movlb	0	; () banked
  3323  001454  2BBA               	incf	sprintf@c& (0+255),f,b
  3324  001456  D7DD               	goto	l4327
  3325  001458                     l4339:
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;doprnt.c: 1175: {
  3329                           ;doprnt.c: 1188: if(flag & 0x03)
  3330  001458  0E03               	movlw	3
  3331  00145A  0100               	movlb	0	; () banked
  3332  00145C  15A9               	andwf	sprintf@flag& (0+255),w,b
  3333  00145E  0100               	movlb	0	; () banked
  3334  001460  6F9B               	movwf	??_sprintf& (0+255),b
  3335  001462  0E00               	movlw	0
  3336  001464  0100               	movlb	0	; () banked
  3337  001466  15AA               	andwf	(sprintf@flag+1)& (0+255),w,b
  3338  001468  0100               	movlb	0	; () banked
  3339  00146A  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  3340  00146C  0100               	movlb	0	; () banked
  3341  00146E  519B               	movf	??_sprintf& (0+255),w,b
  3342  001470  0100               	movlb	0	; () banked
  3343  001472  119C               	iorwf	(??_sprintf+1)& (0+255),w,b
  3344  001474  B4D8               	btfsc	status,2,c
  3345  001476  D054               	goto	l4353
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3349  001478  C095  FFD9         	movff	sprintf@sp,fsr2l
  3350  00147C  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  3351  001480  0E2D               	movlw	45
  3352  001482  D04C               	goto	L4
  3353  001484                     l4343:
  3354                           
  3355                           ; BSR set to: 0
  3356  001484  0100               	movlb	0	; () banked
  3357  001486  4B95               	infsnz	sprintf@sp& (0+255),f,b
  3358  001488  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;doprnt.c: 1195: }
  3362                           ;doprnt.c: 1196: while(c--) {
  3363  00148A  D04A               	goto	l4353
  3364  00148C                     l4345:
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;doprnt.c: 1200: {
  3368                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3369  00148C  C0AF  F013         	movff	sprintf@val,___lldiv@dividend
  3370  001490  C0B0  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  3371  001494  C0B1  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  3372  001498  C0B2  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  3373  00149C  0100               	movlb	0	; () banked
  3374  00149E  51BA               	movf	sprintf@c& (0+255),w,b
  3375  0014A0  0D04               	mullw	4
  3376  0014A2  0E01               	movlw	low _dpowers
  3377  0014A4  24F3               	addwf	prodl,w,c
  3378  0014A6  6EF6               	movwf	tblptrl,c
  3379  0014A8  0E08               	movlw	high _dpowers
  3380  0014AA  20F4               	addwfc	prodh,w,c
  3381  0014AC  6EF7               	movwf	tblptrh,c
  3382  0014AE                     	if	0	;There are less than 3 active tblptr bytes
  3383  0014AE                     	endif
  3384  0014AE  0009               	tblrd		*+
  3385  0014B0  CFF5 F017          	movff	tablat,___lldiv@divisor
  3386  0014B4  0009               	tblrd		*+
  3387  0014B6  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  3388  0014BA  0009               	tblrd		*+
  3389  0014BC  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  3390  0014C0  000A               	tblrd		*-
  3391  0014C2  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  3392  0014C6  ECAB  F014         	call	___lldiv	;wreg free
  3393  0014CA  C013  F0AB         	movff	?___lldiv,sprintf@tmpval
  3394  0014CE  C014  F0AC         	movff	?___lldiv+1,sprintf@tmpval+1
  3395  0014D2  C015  F0AD         	movff	?___lldiv+2,sprintf@tmpval+2
  3396  0014D6  C016  F0AE         	movff	?___lldiv+3,sprintf@tmpval+3
  3397                           
  3398                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3399  0014DA  C0AB  F013         	movff	sprintf@tmpval,___llmod@dividend
  3400  0014DE  C0AC  F014         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3401  0014E2  C0AD  F015         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3402  0014E6  C0AE  F016         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3403  0014EA  0E0A               	movlw	10
  3404  0014EC  6E17               	movwf	___llmod@divisor,c
  3405  0014EE  0E00               	movlw	0
  3406  0014F0  6E18               	movwf	___llmod@divisor+1,c
  3407  0014F2  0E00               	movlw	0
  3408  0014F4  6E19               	movwf	___llmod@divisor+2,c
  3409  0014F6  0E00               	movlw	0
  3410  0014F8  6E1A               	movwf	___llmod@divisor+3,c
  3411  0014FA  EC98  F015         	call	___llmod	;wreg free
  3412  0014FE  C013  F0AB         	movff	?___llmod,sprintf@tmpval
  3413  001502  C014  F0AC         	movff	?___llmod+1,sprintf@tmpval+1
  3414  001506  C015  F0AD         	movff	?___llmod+2,sprintf@tmpval+2
  3415  00150A  C016  F0AE         	movff	?___llmod+3,sprintf@tmpval+3
  3416                           
  3417                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3418  00150E  0100               	movlb	0	; () banked
  3419  001510  51AB               	movf	sprintf@tmpval& (0+255),w,b
  3420  001512  0F30               	addlw	48
  3421  001514  C095  FFD9         	movff	sprintf@sp,fsr2l
  3422  001518  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  3423  00151C                     L4:
  3424  00151C  6EDF               	movwf	indf2,c
  3425  00151E  D7B2               	goto	l4343
  3426  001520                     l4353:
  3427                           
  3428                           ; BSR set to: 0
  3429  001520  0100               	movlb	0	; () banked
  3430  001522  07BA               	decf	sprintf@c& (0+255),f,b
  3431  001524  0100               	movlb	0	; () banked
  3432  001526  29BA               	incf	sprintf@c& (0+255),w,b
  3433  001528  B4D8               	btfsc	status,2,c
  3434  00152A  D00E               	goto	l4361
  3435  00152C  D7AF               	goto	l4345
  3436  00152E                     l4355:
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3440  00152E  C095  FFD9         	movff	sprintf@sp,fsr2l
  3441  001532  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  3442  001536  0E30               	movlw	48
  3443  001538  6EDF               	movwf	indf2,c
  3444                           
  3445                           ; BSR set to: 0
  3446  00153A  0100               	movlb	0	; () banked
  3447  00153C  4B95               	infsnz	sprintf@sp& (0+255),f,b
  3448  00153E  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;doprnt.c: 1209: exp--;
  3452  001540  0100               	movlb	0	; () banked
  3453  001542  07B3               	decf	sprintf@exp& (0+255),f,b
  3454  001544  A0D8               	btfss	status,0,c
  3455  001546  07B4               	decf	(sprintf@exp+1)& (0+255),f,b
  3456  001548                     l4361:
  3457                           
  3458                           ; BSR set to: 0
  3459  001548  0100               	movlb	0	; () banked
  3460  00154A  BFB4               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3461  00154C  D007               	goto	l4363
  3462  00154E  0100               	movlb	0	; () banked
  3463  001550  51B4               	movf	(sprintf@exp+1)& (0+255),w,b
  3464  001552  E1ED               	bnz	l4355
  3465  001554  0100               	movlb	0	; () banked
  3466  001556  05B3               	decf	sprintf@exp& (0+255),w,b
  3467  001558  B0D8               	btfsc	status,0,c
  3468  00155A  D7E9               	goto	l4355
  3469  00155C                     l4363:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;doprnt.c: 1210: }
  3473                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3474  00155C  0100               	movlb	0	; () banked
  3475  00155E  BFB6               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3476  001560  D00C               	goto	l461
  3477  001562  0100               	movlb	0	; () banked
  3478  001564  51B6               	movf	(sprintf@prec+1)& (0+255),w,b
  3479  001566  E105               	bnz	u4310
  3480  001568  0E09               	movlw	9
  3481  00156A  0100               	movlb	0	; () banked
  3482  00156C  5DB5               	subwf	sprintf@prec& (0+255),w,b
  3483  00156E  A0D8               	btfss	status,0,c
  3484  001570  D004               	goto	l461
  3485  001572                     u4310:
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3489  001572  0E08               	movlw	8
  3490  001574  0100               	movlb	0	; () banked
  3491  001576  6FBA               	movwf	sprintf@c& (0+255),b
  3492  001578  D002               	goto	l4367
  3493  00157A                     l461:
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;doprnt.c: 1213: else
  3497                           ;doprnt.c: 1214: c = prec;
  3498  00157A  C0B5  F0BA         	movff	sprintf@prec,sprintf@c
  3499  00157E                     l4367:
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;doprnt.c: 1215: prec -= c;
  3503  00157E  0100               	movlb	0	; () banked
  3504  001580  51BA               	movf	sprintf@c& (0+255),w,b
  3505  001582  0100               	movlb	0	; () banked
  3506  001584  5FB5               	subwf	sprintf@prec& (0+255),f,b
  3507  001586  0E00               	movlw	0
  3508  001588  0100               	movlb	0	; () banked
  3509  00158A  BFBA               	btfsc	sprintf@c& (0+255),7,b
  3510  00158C  0EFF               	movlw	255
  3511  00158E  0100               	movlb	0	; () banked
  3512  001590  5BB6               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;doprnt.c: 1219: if(c)
  3516  001592  0100               	movlb	0	; () banked
  3517  001594  51BA               	movf	sprintf@c& (0+255),w,b
  3518  001596  0100               	movlb	0	; () banked
  3519  001598  B4D8               	btfsc	status,2,c
  3520  00159A  D009               	goto	l4375
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3524  00159C  C095  FFD9         	movff	sprintf@sp,fsr2l
  3525  0015A0  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  3526  0015A4  0E2E               	movlw	46
  3527  0015A6  6EDF               	movwf	indf2,c
  3528                           
  3529                           ; BSR set to: 0
  3530  0015A8  0100               	movlb	0	; () banked
  3531  0015AA  4B95               	infsnz	sprintf@sp& (0+255),f,b
  3532  0015AC  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  3533  0015AE                     l4375:
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3537  0015AE  0100               	movlb	0	; () banked
  3538  0015B0  51BA               	movf	sprintf@c& (0+255),w,b
  3539  0015B2  ECFA  F00B         	call	_scale
  3540  0015B6  C076  F0A1         	movff	?_scale,_sprintf$1750
  3541  0015BA  C077  F0A2         	movff	?_scale+1,_sprintf$1750+1
  3542  0015BE  C078  F0A3         	movff	?_scale+2,_sprintf$1750+2
  3543                           
  3544                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3545  0015C2  C0B7  F06A         	movff	sprintf@fval,___ftmul@f2
  3546  0015C6  C0B8  F06B         	movff	sprintf@fval+1,___ftmul@f2+1
  3547  0015CA  C0B9  F06C         	movff	sprintf@fval+2,___ftmul@f2+2
  3548  0015CE  C0A1  F067         	movff	_sprintf$1750,___ftmul@f1
  3549  0015D2  C0A2  F068         	movff	_sprintf$1750+1,___ftmul@f1+1
  3550  0015D6  C0A3  F069         	movff	_sprintf$1750+2,___ftmul@f1+2
  3551  0015DA  EC69  F010         	call	___ftmul	;wreg free
  3552  0015DE  C067  F027         	movff	?___ftmul,___fttol@f1
  3553  0015E2  C068  F028         	movff	?___ftmul+1,___fttol@f1+1
  3554  0015E6  C069  F029         	movff	?___ftmul+2,___fttol@f1+2
  3555  0015EA  ECEB  F012         	call	___fttol	;wreg free
  3556  0015EE  C027  F0AF         	movff	?___fttol,sprintf@val
  3557  0015F2  C028  F0B0         	movff	?___fttol+1,sprintf@val+1
  3558  0015F6  C029  F0B1         	movff	?___fttol+2,sprintf@val+2
  3559  0015FA  C02A  F0B2         	movff	?___fttol+3,sprintf@val+3
  3560                           
  3561                           ;doprnt.c: 1228: while(c--) {
  3562  0015FE  D073               	goto	l4389
  3563  001600                     l4379:
  3564                           
  3565                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3566  001600  C0AF  F013         	movff	sprintf@val,___lldiv@dividend
  3567  001604  C0B0  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  3568  001608  C0B1  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  3569  00160C  C0B2  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  3570  001610  0100               	movlb	0	; () banked
  3571  001612  51BA               	movf	sprintf@c& (0+255),w,b
  3572  001614  0D04               	mullw	4
  3573  001616  0E01               	movlw	low _dpowers
  3574  001618  24F3               	addwf	prodl,w,c
  3575  00161A  6EF6               	movwf	tblptrl,c
  3576  00161C  0E08               	movlw	high _dpowers
  3577  00161E  20F4               	addwfc	prodh,w,c
  3578  001620  6EF7               	movwf	tblptrh,c
  3579  001622                     	if	0	;There are less than 3 active tblptr bytes
  3580  001622                     	endif
  3581  001622  0009               	tblrd		*+
  3582  001624  CFF5 F017          	movff	tablat,___lldiv@divisor
  3583  001628  0009               	tblrd		*+
  3584  00162A  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  3585  00162E  0009               	tblrd		*+
  3586  001630  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  3587  001634  000A               	tblrd		*-
  3588  001636  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  3589  00163A  ECAB  F014         	call	___lldiv	;wreg free
  3590  00163E  C013  F0AB         	movff	?___lldiv,sprintf@tmpval
  3591  001642  C014  F0AC         	movff	?___lldiv+1,sprintf@tmpval+1
  3592  001646  C015  F0AD         	movff	?___lldiv+2,sprintf@tmpval+2
  3593  00164A  C016  F0AE         	movff	?___lldiv+3,sprintf@tmpval+3
  3594                           
  3595                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3596  00164E  C0AB  F013         	movff	sprintf@tmpval,___llmod@dividend
  3597  001652  C0AC  F014         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3598  001656  C0AD  F015         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3599  00165A  C0AE  F016         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3600  00165E  0E0A               	movlw	10
  3601  001660  6E17               	movwf	___llmod@divisor,c
  3602  001662  0E00               	movlw	0
  3603  001664  6E18               	movwf	___llmod@divisor+1,c
  3604  001666  0E00               	movlw	0
  3605  001668  6E19               	movwf	___llmod@divisor+2,c
  3606  00166A  0E00               	movlw	0
  3607  00166C  6E1A               	movwf	___llmod@divisor+3,c
  3608  00166E  EC98  F015         	call	___llmod	;wreg free
  3609  001672  C013  F0AB         	movff	?___llmod,sprintf@tmpval
  3610  001676  C014  F0AC         	movff	?___llmod+1,sprintf@tmpval+1
  3611  00167A  C015  F0AD         	movff	?___llmod+2,sprintf@tmpval+2
  3612  00167E  C016  F0AE         	movff	?___llmod+3,sprintf@tmpval+3
  3613                           
  3614                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3615  001682  0100               	movlb	0	; () banked
  3616  001684  51AB               	movf	sprintf@tmpval& (0+255),w,b
  3617  001686  0F30               	addlw	48
  3618  001688  C095  FFD9         	movff	sprintf@sp,fsr2l
  3619  00168C  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  3620  001690  6EDF               	movwf	indf2,c
  3621                           
  3622                           ; BSR set to: 0
  3623  001692  0100               	movlb	0	; () banked
  3624  001694  4B95               	infsnz	sprintf@sp& (0+255),f,b
  3625  001696  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;doprnt.c: 1232: val %= dpowers[c];
  3629  001698  C0AF  F013         	movff	sprintf@val,___llmod@dividend
  3630  00169C  C0B0  F014         	movff	sprintf@val+1,___llmod@dividend+1
  3631  0016A0  C0B1  F015         	movff	sprintf@val+2,___llmod@dividend+2
  3632  0016A4  C0B2  F016         	movff	sprintf@val+3,___llmod@dividend+3
  3633  0016A8  0100               	movlb	0	; () banked
  3634  0016AA  51BA               	movf	sprintf@c& (0+255),w,b
  3635  0016AC  0D04               	mullw	4
  3636  0016AE  0E01               	movlw	low _dpowers
  3637  0016B0  24F3               	addwf	prodl,w,c
  3638  0016B2  6EF6               	movwf	tblptrl,c
  3639  0016B4  0E08               	movlw	high _dpowers
  3640  0016B6  20F4               	addwfc	prodh,w,c
  3641  0016B8  6EF7               	movwf	tblptrh,c
  3642  0016BA                     	if	0	;There are less than 3 active tblptr bytes
  3643  0016BA                     	endif
  3644  0016BA  0009               	tblrd		*+
  3645  0016BC  CFF5 F017          	movff	tablat,___llmod@divisor
  3646  0016C0  0009               	tblrd		*+
  3647  0016C2  CFF5 F018          	movff	tablat,___llmod@divisor+1
  3648  0016C6  0009               	tblrd		*+
  3649  0016C8  CFF5 F019          	movff	tablat,___llmod@divisor+2
  3650  0016CC  000A               	tblrd		*-
  3651  0016CE  CFF5 F01A          	movff	tablat,___llmod@divisor+3
  3652  0016D2  EC98  F015         	call	___llmod	;wreg free
  3653  0016D6  C013  F0AF         	movff	?___llmod,sprintf@val
  3654  0016DA  C014  F0B0         	movff	?___llmod+1,sprintf@val+1
  3655  0016DE  C015  F0B1         	movff	?___llmod+2,sprintf@val+2
  3656  0016E2  C016  F0B2         	movff	?___llmod+3,sprintf@val+3
  3657  0016E6                     l4389:
  3658  0016E6  0100               	movlb	0	; () banked
  3659  0016E8  07BA               	decf	sprintf@c& (0+255),f,b
  3660  0016EA  0100               	movlb	0	; () banked
  3661  0016EC  29BA               	incf	sprintf@c& (0+255),w,b
  3662  0016EE  B4D8               	btfsc	status,2,c
  3663  0016F0  D00E               	goto	l4397
  3664  0016F2  D786               	goto	l4379
  3665  0016F4                     l4391:
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3669  0016F4  C095  FFD9         	movff	sprintf@sp,fsr2l
  3670  0016F8  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  3671  0016FC  0E30               	movlw	48
  3672  0016FE  6EDF               	movwf	indf2,c
  3673                           
  3674                           ; BSR set to: 0
  3675  001700  0100               	movlb	0	; () banked
  3676  001702  4B95               	infsnz	sprintf@sp& (0+255),f,b
  3677  001704  2B96               	incf	(sprintf@sp+1)& (0+255),f,b
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;doprnt.c: 1237: prec--;
  3681  001706  0100               	movlb	0	; () banked
  3682  001708  07B5               	decf	sprintf@prec& (0+255),f,b
  3683  00170A  A0D8               	btfss	status,0,c
  3684  00170C  07B6               	decf	(sprintf@prec+1)& (0+255),f,b
  3685  00170E                     l4397:
  3686                           
  3687                           ; BSR set to: 0
  3688  00170E  0100               	movlb	0	; () banked
  3689  001710  51B5               	movf	sprintf@prec& (0+255),w,b
  3690  001712  0100               	movlb	0	; () banked
  3691  001714  11B6               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3692  001716  B4D8               	btfsc	status,2,c
  3693  001718  D057               	goto	l4419
  3694  00171A  D7EC               	goto	l4391
  3695  00171C                     l4399:
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;doprnt.c: 1246: }
  3699                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3700  00171C  0100               	movlb	0	; () banked
  3701  00171E  51B5               	movf	sprintf@prec& (0+255),w,b
  3702  001720  0100               	movlb	0	; () banked
  3703  001722  11B6               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3704  001724  A4D8               	btfss	status,2,c
  3705  001726  D00D               	goto	l4405
  3706                           
  3707                           ; BSR set to: 0
  3708  001728  0100               	movlb	0	; () banked
  3709  00172A  51AF               	movf	sprintf@val& (0+255),w,b
  3710  00172C  0100               	movlb	0	; () banked
  3711  00172E  11B0               	iorwf	(sprintf@val+1)& (0+255),w,b
  3712  001730  0100               	movlb	0	; () banked
  3713  001732  11B1               	iorwf	(sprintf@val+2)& (0+255),w,b
  3714  001734  0100               	movlb	0	; () banked
  3715  001736  11B2               	iorwf	(sprintf@val+3)& (0+255),w,b
  3716  001738  A4D8               	btfss	status,2,c
  3717  00173A  D003               	goto	l4405
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;doprnt.c: 1291: prec++;
  3721  00173C  0100               	movlb	0	; () banked
  3722  00173E  4BB5               	infsnz	sprintf@prec& (0+255),f,b
  3723  001740  2BB6               	incf	(sprintf@prec+1)& (0+255),f,b
  3724  001742                     l4405:
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;doprnt.c: 1339: if(c < prec)
  3728  001742  0E80               	movlw	128
  3729  001744  0100               	movlb	0	; () banked
  3730  001746  BFBA               	btfsc	sprintf@c& (0+255),7,b
  3731  001748  0E7F               	movlw	127
  3732  00174A  0100               	movlb	0	; () banked
  3733  00174C  6F9B               	movwf	??_sprintf& (0+255),b
  3734  00174E  0100               	movlb	0	; () banked
  3735  001750  51B5               	movf	sprintf@prec& (0+255),w,b
  3736  001752  0100               	movlb	0	; () banked
  3737  001754  5DBA               	subwf	sprintf@c& (0+255),w,b
  3738  001756  0100               	movlb	0	; () banked
  3739  001758  51B6               	movf	(sprintf@prec+1)& (0+255),w,b
  3740  00175A  0A80               	xorlw	128
  3741  00175C  0100               	movlb	0	; () banked
  3742  00175E  599B               	subwfb	??_sprintf& (0+255),w,b
  3743  001760  B0D8               	btfsc	status,0,c
  3744  001762  D003               	goto	l4409
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;doprnt.c: 1340: c = prec;
  3748  001764  C0B5  F0BA         	movff	sprintf@prec,sprintf@c
  3749  001768  D018               	goto	l4413
  3750  00176A                     l4409:
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;doprnt.c: 1341: else if(prec < c)
  3754  00176A  0100               	movlb	0	; () banked
  3755  00176C  51B6               	movf	(sprintf@prec+1)& (0+255),w,b
  3756  00176E  0A80               	xorlw	128
  3757  001770  0100               	movlb	0	; () banked
  3758  001772  6F9B               	movwf	??_sprintf& (0+255),b
  3759  001774  0100               	movlb	0	; () banked
  3760  001776  51BA               	movf	sprintf@c& (0+255),w,b
  3761  001778  0100               	movlb	0	; () banked
  3762  00177A  5DB5               	subwf	sprintf@prec& (0+255),w,b
  3763  00177C  0E80               	movlw	128
  3764  00177E  0100               	movlb	0	; () banked
  3765  001780  BFBA               	btfsc	sprintf@c& (0+255),7,b
  3766  001782  0E7F               	movlw	127
  3767  001784  0100               	movlb	0	; () banked
  3768  001786  599B               	subwfb	??_sprintf& (0+255),w,b
  3769  001788  B0D8               	btfsc	status,0,c
  3770  00178A  D007               	goto	l4413
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;doprnt.c: 1342: prec = c;
  3774  00178C  0100               	movlb	0	; () banked
  3775  00178E  51BA               	movf	sprintf@c& (0+255),w,b
  3776  001790  0100               	movlb	0	; () banked
  3777  001792  6FB5               	movwf	sprintf@prec& (0+255),b
  3778  001794  6BB6               	clrf	(sprintf@prec+1)& (0+255),b
  3779  001796  BFB5               	btfsc	sprintf@prec& (0+255),7,b
  3780  001798  07B6               	decf	(sprintf@prec+1)& (0+255),f,b
  3781  00179A                     l4413:
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;doprnt.c: 1422: {
  3785                           ;doprnt.c: 1438: if(flag & 0x03)
  3786  00179A  0E03               	movlw	3
  3787  00179C  0100               	movlb	0	; () banked
  3788  00179E  15A9               	andwf	sprintf@flag& (0+255),w,b
  3789  0017A0  0100               	movlb	0	; () banked
  3790  0017A2  6F9B               	movwf	??_sprintf& (0+255),b
  3791  0017A4  0E00               	movlw	0
  3792  0017A6  0100               	movlb	0	; () banked
  3793  0017A8  15AA               	andwf	(sprintf@flag+1)& (0+255),w,b
  3794  0017AA  0100               	movlb	0	; () banked
  3795  0017AC  6F9C               	movwf	(??_sprintf+1)& (0+255),b
  3796  0017AE  0100               	movlb	0	; () banked
  3797  0017B0  519B               	movf	??_sprintf& (0+255),w,b
  3798  0017B2  0100               	movlb	0	; () banked
  3799  0017B4  119C               	iorwf	(??_sprintf+1)& (0+255),w,b
  3800  0017B6  B4D8               	btfsc	status,2,c
  3801  0017B8  D007               	goto	l4419
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3805  0017BA  C095  FFD9         	movff	sprintf@sp,fsr2l
  3806  0017BE  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  3807  0017C2  0E2D               	movlw	45
  3808  0017C4                     L2:
  3809  0017C4  6EDF               	movwf	indf2,c
  3810  0017C6  D44F               	goto	l4257
  3811  0017C8                     l4419:
  3812                           
  3813                           ; BSR set to: 0
  3814  0017C8  C097  FFF6         	movff	sprintf@f,tblptrl
  3815  0017CC  C098  FFF7         	movff	sprintf@f+1,tblptrh
  3816  0017D0  0100               	movlb	0	; () banked
  3817  0017D2  4B97               	infsnz	sprintf@f& (0+255),f,b
  3818  0017D4  2B98               	incf	(sprintf@f+1)& (0+255),f,b
  3819  0017D6                     	if	0	;tblptru may be non-zero
  3820  0017D6                     	endif
  3821  0017D6                     	if	0	;tblptru may be non-zero
  3822  0017D6                     	endif
  3823  0017D6  0008               	tblrd		*
  3824  0017D8  CFF5 F0BA          	movff	tablat,sprintf@c
  3825  0017DC  0100               	movlb	0	; () banked
  3826  0017DE  51BA               	movf	sprintf@c& (0+255),w,b
  3827  0017E0  A4D8               	btfss	status,2,c
  3828  0017E2  EF4E  F004         	goto	l4081
  3829  0017E6                     l4421:
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;doprnt.c: 1538: *sp = 0;
  3833  0017E6  C095  FFD9         	movff	sprintf@sp,fsr2l
  3834  0017EA  C096  FFDA         	movff	sprintf@sp+1,fsr2h
  3835  0017EE  0E00               	movlw	0
  3836  0017F0  6EDF               	movwf	indf2,c
  3837  0017F2  0012               	return	
  3838  0017F4                     __end_of_sprintf:
  3839                           	opt stack 0
  3840                           tblptru	equ	0xFF8
  3841                           tblptrh	equ	0xFF7
  3842                           tblptrl	equ	0xFF6
  3843                           tablat	equ	0xFF5
  3844                           prodh	equ	0xFF4
  3845                           prodl	equ	0xFF3
  3846                           intcon	equ	0xFF2
  3847                           intcon2	equ	0xFF1
  3848                           intcon3	equ	0xFF0
  3849                           postinc0	equ	0xFEE
  3850                           wreg	equ	0xFE8
  3851                           indf2	equ	0xFDF
  3852                           postinc2	equ	0xFDE
  3853                           postdec2	equ	0xFDD
  3854                           fsr2h	equ	0xFDA
  3855                           fsr2l	equ	0xFD9
  3856                           status	equ	0xFD8
  3857                           
  3858 ;; *************** function _scale *****************
  3859 ;; Defined at:
  3860 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;  scl             1    wreg     char 
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  scl             1   28[BANK0 ] char 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  3   22[BANK0 ] char 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3874 ;;      Params:         0       3       0       0       0       0       0       0       0
  3875 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3876 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3877 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3878 ;;Total ram usage:        7 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    5
  3881 ;; This function calls:
  3882 ;;		___awdiv
  3883 ;;		___awmod
  3884 ;;		___ftmul
  3885 ;;		___wmul
  3886 ;; This function is called by:
  3887 ;;		_sprintf
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text10
  3892  0017F4                     __ptext10:
  3893                           	opt stack 0
  3894  0017F4                     _scale:
  3895                           	opt stack 24
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;incstack = 0
  3899                           ;scale@scl stored from wreg
  3900  0017F4  0100               	movlb	0	; () banked
  3901  0017F6  6F7C               	movwf	scale@scl& (0+255),b
  3902                           
  3903                           ;doprnt.c: 428: if(scl < 0) {
  3904  0017F8  0100               	movlb	0	; () banked
  3905  0017FA  AF7C               	btfss	scale@scl& (0+255),7,b
  3906  0017FC  D104               	goto	l4047
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;doprnt.c: 429: scl = -scl;
  3910  0017FE  0100               	movlb	0	; () banked
  3911  001800  6D7C               	negf	scale@scl& (0+255),b
  3912                           
  3913                           ;doprnt.c: 430: if(scl>=110)
  3914  001802  0100               	movlb	0	; () banked
  3915  001804  517C               	movf	scale@scl& (0+255),w,b
  3916  001806  0A80               	xorlw	128
  3917  001808  0F12               	addlw	-238
  3918  00180A  A0D8               	btfss	status,0,c
  3919  00180C  D094               	goto	l4037
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3923  00180E  0E00               	movlw	0
  3924  001810  6E24               	movwf	___wmul@multiplicand+1,c
  3925  001812  0E03               	movlw	3
  3926  001814  6E23               	movwf	___wmul@multiplicand,c
  3927  001816  0E00               	movlw	0
  3928  001818  6E1C               	movwf	___awdiv@divisor+1,c
  3929  00181A  0E0A               	movlw	10
  3930  00181C  6E1B               	movwf	___awdiv@divisor,c
  3931  00181E  0E00               	movlw	0
  3932  001820  6E16               	movwf	___awmod@divisor+1,c
  3933  001822  0E64               	movlw	100
  3934  001824  6E15               	movwf	___awmod@divisor,c
  3935  001826  0100               	movlb	0	; () banked
  3936  001828  517C               	movf	scale@scl& (0+255),w,b
  3937  00182A  6E13               	movwf	___awmod@dividend,c
  3938  00182C  6A14               	clrf	___awmod@dividend+1,c
  3939  00182E  BE13               	btfsc	___awmod@dividend,7,c
  3940  001830  0614               	decf	___awmod@dividend+1,f,c
  3941  001832  EC2A  F015         	call	___awmod	;wreg free
  3942  001836  C013  F019         	movff	?___awmod,___awdiv@dividend
  3943  00183A  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  3944  00183E  EC69  F014         	call	___awdiv	;wreg free
  3945  001842  0E09               	movlw	9
  3946  001844  2419               	addwf	?___awdiv,w,c
  3947  001846  6E21               	movwf	___wmul@multiplier,c
  3948  001848  0E00               	movlw	0
  3949  00184A  201A               	addwfc	?___awdiv+1,w,c
  3950  00184C  6E22               	movwf	___wmul@multiplier+1,c
  3951  00184E  ECE2  F016         	call	___wmul	;wreg free
  3952  001852  0E50               	movlw	low __npowers_
  3953  001854  2421               	addwf	?___wmul,w,c
  3954  001856  6EF6               	movwf	tblptrl,c
  3955  001858  0E08               	movlw	high __npowers_
  3956  00185A  2022               	addwfc	?___wmul+1,w,c
  3957  00185C  6EF7               	movwf	tblptrh,c
  3958  00185E                     	if	0	;There are less than 3 active tblptr bytes
  3959  00185E                     	endif
  3960  00185E  0009               	tblrd		*+
  3961  001860  CFF5 F06A          	movff	tablat,___ftmul@f2
  3962  001864  0009               	tblrd		*+
  3963  001866  CFF5 F06B          	movff	tablat,___ftmul@f2+1
  3964  00186A  000A               	tblrd		*-
  3965  00186C  CFF5 F06C          	movff	tablat,___ftmul@f2+2
  3966  001870  0E00               	movlw	0
  3967  001872  6E1C               	movwf	___awdiv@divisor+1,c
  3968  001874  0E64               	movlw	100
  3969  001876  6E1B               	movwf	___awdiv@divisor,c
  3970  001878  0100               	movlb	0	; () banked
  3971  00187A  517C               	movf	scale@scl& (0+255),w,b
  3972  00187C  6E19               	movwf	___awdiv@dividend,c
  3973  00187E  6A1A               	clrf	___awdiv@dividend+1,c
  3974  001880  BE19               	btfsc	___awdiv@dividend,7,c
  3975  001882  061A               	decf	___awdiv@dividend+1,f,c
  3976  001884  EC69  F014         	call	___awdiv	;wreg free
  3977  001888  0E12               	movlw	18
  3978  00188A  2419               	addwf	?___awdiv,w,c
  3979  00188C  6E21               	movwf	___wmul@multiplier,c
  3980  00188E  0E00               	movlw	0
  3981  001890  201A               	addwfc	?___awdiv+1,w,c
  3982  001892  6E22               	movwf	___wmul@multiplier+1,c
  3983  001894  0E00               	movlw	0
  3984  001896  6E24               	movwf	___wmul@multiplicand+1,c
  3985  001898  0E03               	movlw	3
  3986  00189A  6E23               	movwf	___wmul@multiplicand,c
  3987  00189C  ECE2  F016         	call	___wmul	;wreg free
  3988  0018A0  0E50               	movlw	low __npowers_
  3989  0018A2  2421               	addwf	?___wmul,w,c
  3990  0018A4  6EF6               	movwf	tblptrl,c
  3991  0018A6  0E08               	movlw	high __npowers_
  3992  0018A8  2022               	addwfc	?___wmul+1,w,c
  3993  0018AA  6EF7               	movwf	tblptrh,c
  3994  0018AC                     	if	0	;There are less than 3 active tblptr bytes
  3995  0018AC                     	endif
  3996  0018AC  0009               	tblrd		*+
  3997  0018AE  CFF5 F067          	movff	tablat,___ftmul@f1
  3998  0018B2  0009               	tblrd		*+
  3999  0018B4  CFF5 F068          	movff	tablat,___ftmul@f1+1
  4000  0018B8  000A               	tblrd		*-
  4001  0018BA  CFF5 F069          	movff	tablat,___ftmul@f1+2
  4002  0018BE  EC69  F010         	call	___ftmul	;wreg free
  4003  0018C2  C067  F079         	movff	?___ftmul,_scale$1749
  4004  0018C6  C068  F07A         	movff	?___ftmul+1,_scale$1749+1
  4005  0018CA  C069  F07B         	movff	?___ftmul+2,_scale$1749+2
  4006                           
  4007                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4008  0018CE  C079  F067         	movff	_scale$1749,___ftmul@f1
  4009  0018D2  C07A  F068         	movff	_scale$1749+1,___ftmul@f1+1
  4010  0018D6  C07B  F069         	movff	_scale$1749+2,___ftmul@f1+2
  4011  0018DA  0E00               	movlw	0
  4012  0018DC  6E24               	movwf	___wmul@multiplicand+1,c
  4013  0018DE  0E03               	movlw	3
  4014  0018E0  6E23               	movwf	___wmul@multiplicand,c
  4015  0018E2  0E00               	movlw	0
  4016  0018E4  6E16               	movwf	___awmod@divisor+1,c
  4017  0018E6  0E0A               	movlw	10
  4018  0018E8  6E15               	movwf	___awmod@divisor,c
  4019  0018EA  0100               	movlb	0	; () banked
  4020  0018EC  517C               	movf	scale@scl& (0+255),w,b
  4021  0018EE  6E13               	movwf	___awmod@dividend,c
  4022  0018F0  6A14               	clrf	___awmod@dividend+1,c
  4023  0018F2  BE13               	btfsc	___awmod@dividend,7,c
  4024  0018F4  0614               	decf	___awmod@dividend+1,f,c
  4025  0018F6  EC2A  F015         	call	___awmod	;wreg free
  4026  0018FA  C013  F021         	movff	?___awmod,___wmul@multiplier
  4027  0018FE  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4028  001902  ECE2  F016         	call	___wmul	;wreg free
  4029  001906  0E50               	movlw	low __npowers_
  4030  001908  2421               	addwf	?___wmul,w,c
  4031  00190A  6EF6               	movwf	tblptrl,c
  4032  00190C  0E08               	movlw	high __npowers_
  4033  00190E  2022               	addwfc	?___wmul+1,w,c
  4034  001910  6EF7               	movwf	tblptrh,c
  4035  001912                     	if	0	;There are less than 3 active tblptr bytes
  4036  001912                     	endif
  4037  001912  0009               	tblrd		*+
  4038  001914  CFF5 F06A          	movff	tablat,___ftmul@f2
  4039  001918  0009               	tblrd		*+
  4040  00191A  CFF5 F06B          	movff	tablat,___ftmul@f2+1
  4041  00191E  000A               	tblrd		*-
  4042  001920  CFF5 F06C          	movff	tablat,___ftmul@f2+2
  4043  001924  EC69  F010         	call	___ftmul	;wreg free
  4044  001928  C067  F076         	movff	?___ftmul,?_scale
  4045  00192C  C068  F077         	movff	?___ftmul+1,?_scale+1
  4046  001930  C069  F078         	movff	?___ftmul+2,?_scale+2
  4047  001934  0012               	return	
  4048  001936                     l4037:
  4049                           
  4050                           ;doprnt.c: 432: else if(scl > 10)
  4051  001936  0100               	movlb	0	; () banked
  4052  001938  517C               	movf	scale@scl& (0+255),w,b
  4053  00193A  0A80               	xorlw	128
  4054  00193C  0F75               	addlw	-139
  4055  00193E  A0D8               	btfss	status,0,c
  4056  001940  D04F               	goto	l4043
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4060  001942  0E00               	movlw	0
  4061  001944  6E1C               	movwf	___awdiv@divisor+1,c
  4062  001946  0E0A               	movlw	10
  4063  001948  6E1B               	movwf	___awdiv@divisor,c
  4064  00194A  0100               	movlb	0	; () banked
  4065  00194C  517C               	movf	scale@scl& (0+255),w,b
  4066  00194E  6E19               	movwf	___awdiv@dividend,c
  4067  001950  6A1A               	clrf	___awdiv@dividend+1,c
  4068  001952  BE19               	btfsc	___awdiv@dividend,7,c
  4069  001954  061A               	decf	___awdiv@dividend+1,f,c
  4070  001956  EC69  F014         	call	___awdiv	;wreg free
  4071  00195A  0E09               	movlw	9
  4072  00195C  2419               	addwf	?___awdiv,w,c
  4073  00195E  6E21               	movwf	___wmul@multiplier,c
  4074  001960  0E00               	movlw	0
  4075  001962  201A               	addwfc	?___awdiv+1,w,c
  4076  001964  6E22               	movwf	___wmul@multiplier+1,c
  4077  001966  0E00               	movlw	0
  4078  001968  6E24               	movwf	___wmul@multiplicand+1,c
  4079  00196A  0E03               	movlw	3
  4080  00196C  6E23               	movwf	___wmul@multiplicand,c
  4081  00196E  ECE2  F016         	call	___wmul	;wreg free
  4082  001972  0E50               	movlw	low __npowers_
  4083  001974  2421               	addwf	?___wmul,w,c
  4084  001976  6EF6               	movwf	tblptrl,c
  4085  001978  0E08               	movlw	high __npowers_
  4086  00197A  2022               	addwfc	?___wmul+1,w,c
  4087  00197C  6EF7               	movwf	tblptrh,c
  4088  00197E                     	if	0	;There are less than 3 active tblptr bytes
  4089  00197E                     	endif
  4090  00197E  0009               	tblrd		*+
  4091  001980  CFF5 F067          	movff	tablat,___ftmul@f1
  4092  001984  0009               	tblrd		*+
  4093  001986  CFF5 F068          	movff	tablat,___ftmul@f1+1
  4094  00198A  000A               	tblrd		*-
  4095  00198C  CFF5 F069          	movff	tablat,___ftmul@f1+2
  4096  001990  0E00               	movlw	0
  4097  001992  6E24               	movwf	___wmul@multiplicand+1,c
  4098  001994  0E03               	movlw	3
  4099  001996  6E23               	movwf	___wmul@multiplicand,c
  4100  001998  0E00               	movlw	0
  4101  00199A  6E16               	movwf	___awmod@divisor+1,c
  4102  00199C  0E0A               	movlw	10
  4103  00199E  6E15               	movwf	___awmod@divisor,c
  4104  0019A0  0100               	movlb	0	; () banked
  4105  0019A2  517C               	movf	scale@scl& (0+255),w,b
  4106  0019A4  6E13               	movwf	___awmod@dividend,c
  4107  0019A6  6A14               	clrf	___awmod@dividend+1,c
  4108  0019A8  BE13               	btfsc	___awmod@dividend,7,c
  4109  0019AA  0614               	decf	___awmod@dividend+1,f,c
  4110  0019AC  EC2A  F015         	call	___awmod	;wreg free
  4111  0019B0  C013  F021         	movff	?___awmod,___wmul@multiplier
  4112  0019B4  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4113  0019B8  ECE2  F016         	call	___wmul	;wreg free
  4114  0019BC  0E50               	movlw	low __npowers_
  4115  0019BE  2421               	addwf	?___wmul,w,c
  4116  0019C0  6EF6               	movwf	tblptrl,c
  4117  0019C2  0E08               	movlw	high __npowers_
  4118  0019C4  2022               	addwfc	?___wmul+1,w,c
  4119  0019C6  6EF7               	movwf	tblptrh,c
  4120  0019C8                     	if	0	;There are less than 3 active tblptr bytes
  4121  0019C8                     	endif
  4122  0019C8  0009               	tblrd		*+
  4123  0019CA  CFF5 F06A          	movff	tablat,___ftmul@f2
  4124  0019CE  0009               	tblrd		*+
  4125  0019D0  CFF5 F06B          	movff	tablat,___ftmul@f2+1
  4126  0019D4  000A               	tblrd		*-
  4127  0019D6  CFF5 F06C          	movff	tablat,___ftmul@f2+2
  4128  0019DA  EC69  F010         	call	___ftmul	;wreg free
  4129  0019DE  D7A4               	goto	L5
  4130  0019E0                     l4043:
  4131                           
  4132                           ;doprnt.c: 434: return _npowers_[scl];
  4133  0019E0  0100               	movlb	0	; () banked
  4134  0019E2  517C               	movf	scale@scl& (0+255),w,b
  4135  0019E4  0D03               	mullw	3
  4136  0019E6  0E50               	movlw	low __npowers_
  4137  0019E8  24F3               	addwf	prodl,w,c
  4138  0019EA  6EF6               	movwf	tblptrl,c
  4139  0019EC  0E08               	movlw	high __npowers_
  4140  0019EE  20F4               	addwfc	prodh,w,c
  4141  0019F0  6EF7               	movwf	tblptrh,c
  4142  0019F2                     	if	0	;There are less than 3 active tblptr bytes
  4143  0019F2                     	endif
  4144  0019F2  0009               	tblrd		*+
  4145  0019F4  CFF5 F076          	movff	tablat,?_scale
  4146  0019F8  0009               	tblrd		*+
  4147  0019FA  CFF5 F077          	movff	tablat,?_scale+1
  4148  0019FE  000A               	tblrd		*-
  4149  001A00  CFF5 F078          	movff	tablat,?_scale+2
  4150                           
  4151                           ; BSR set to: 0
  4152  001A04  0012               	return	
  4153  001A06                     l4047:
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;doprnt.c: 435: }
  4157                           ;doprnt.c: 436: if(scl>=110)
  4158  001A06  0100               	movlb	0	; () banked
  4159  001A08  517C               	movf	scale@scl& (0+255),w,b
  4160  001A0A  0A80               	xorlw	128
  4161  001A0C  0F12               	addlw	-238
  4162  001A0E  A0D8               	btfss	status,0,c
  4163  001A10  D094               	goto	l4055
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4167  001A12  0E00               	movlw	0
  4168  001A14  6E24               	movwf	___wmul@multiplicand+1,c
  4169  001A16  0E03               	movlw	3
  4170  001A18  6E23               	movwf	___wmul@multiplicand,c
  4171  001A1A  0E00               	movlw	0
  4172  001A1C  6E1C               	movwf	___awdiv@divisor+1,c
  4173  001A1E  0E0A               	movlw	10
  4174  001A20  6E1B               	movwf	___awdiv@divisor,c
  4175  001A22  0E00               	movlw	0
  4176  001A24  6E16               	movwf	___awmod@divisor+1,c
  4177  001A26  0E64               	movlw	100
  4178  001A28  6E15               	movwf	___awmod@divisor,c
  4179  001A2A  0100               	movlb	0	; () banked
  4180  001A2C  517C               	movf	scale@scl& (0+255),w,b
  4181  001A2E  6E13               	movwf	___awmod@dividend,c
  4182  001A30  6A14               	clrf	___awmod@dividend+1,c
  4183  001A32  BE13               	btfsc	___awmod@dividend,7,c
  4184  001A34  0614               	decf	___awmod@dividend+1,f,c
  4185  001A36  EC2A  F015         	call	___awmod	;wreg free
  4186  001A3A  C013  F019         	movff	?___awmod,___awdiv@dividend
  4187  001A3E  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  4188  001A42  EC69  F014         	call	___awdiv	;wreg free
  4189  001A46  0E09               	movlw	9
  4190  001A48  2419               	addwf	?___awdiv,w,c
  4191  001A4A  6E21               	movwf	___wmul@multiplier,c
  4192  001A4C  0E00               	movlw	0
  4193  001A4E  201A               	addwfc	?___awdiv+1,w,c
  4194  001A50  6E22               	movwf	___wmul@multiplier+1,c
  4195  001A52  ECE2  F016         	call	___wmul	;wreg free
  4196  001A56  0E29               	movlw	low __powers_
  4197  001A58  2421               	addwf	?___wmul,w,c
  4198  001A5A  6EF6               	movwf	tblptrl,c
  4199  001A5C  0E08               	movlw	high __powers_
  4200  001A5E  2022               	addwfc	?___wmul+1,w,c
  4201  001A60  6EF7               	movwf	tblptrh,c
  4202  001A62                     	if	0	;There are less than 3 active tblptr bytes
  4203  001A62                     	endif
  4204  001A62  0009               	tblrd		*+
  4205  001A64  CFF5 F06A          	movff	tablat,___ftmul@f2
  4206  001A68  0009               	tblrd		*+
  4207  001A6A  CFF5 F06B          	movff	tablat,___ftmul@f2+1
  4208  001A6E  000A               	tblrd		*-
  4209  001A70  CFF5 F06C          	movff	tablat,___ftmul@f2+2
  4210  001A74  0E00               	movlw	0
  4211  001A76  6E1C               	movwf	___awdiv@divisor+1,c
  4212  001A78  0E64               	movlw	100
  4213  001A7A  6E1B               	movwf	___awdiv@divisor,c
  4214  001A7C  0100               	movlb	0	; () banked
  4215  001A7E  517C               	movf	scale@scl& (0+255),w,b
  4216  001A80  6E19               	movwf	___awdiv@dividend,c
  4217  001A82  6A1A               	clrf	___awdiv@dividend+1,c
  4218  001A84  BE19               	btfsc	___awdiv@dividend,7,c
  4219  001A86  061A               	decf	___awdiv@dividend+1,f,c
  4220  001A88  EC69  F014         	call	___awdiv	;wreg free
  4221  001A8C  0E12               	movlw	18
  4222  001A8E  2419               	addwf	?___awdiv,w,c
  4223  001A90  6E21               	movwf	___wmul@multiplier,c
  4224  001A92  0E00               	movlw	0
  4225  001A94  201A               	addwfc	?___awdiv+1,w,c
  4226  001A96  6E22               	movwf	___wmul@multiplier+1,c
  4227  001A98  0E00               	movlw	0
  4228  001A9A  6E24               	movwf	___wmul@multiplicand+1,c
  4229  001A9C  0E03               	movlw	3
  4230  001A9E  6E23               	movwf	___wmul@multiplicand,c
  4231  001AA0  ECE2  F016         	call	___wmul	;wreg free
  4232  001AA4  0E29               	movlw	low __powers_
  4233  001AA6  2421               	addwf	?___wmul,w,c
  4234  001AA8  6EF6               	movwf	tblptrl,c
  4235  001AAA  0E08               	movlw	high __powers_
  4236  001AAC  2022               	addwfc	?___wmul+1,w,c
  4237  001AAE  6EF7               	movwf	tblptrh,c
  4238  001AB0                     	if	0	;There are less than 3 active tblptr bytes
  4239  001AB0                     	endif
  4240  001AB0  0009               	tblrd		*+
  4241  001AB2  CFF5 F067          	movff	tablat,___ftmul@f1
  4242  001AB6  0009               	tblrd		*+
  4243  001AB8  CFF5 F068          	movff	tablat,___ftmul@f1+1
  4244  001ABC  000A               	tblrd		*-
  4245  001ABE  CFF5 F069          	movff	tablat,___ftmul@f1+2
  4246  001AC2  EC69  F010         	call	___ftmul	;wreg free
  4247  001AC6  C067  F079         	movff	?___ftmul,_scale$1749
  4248  001ACA  C068  F07A         	movff	?___ftmul+1,_scale$1749+1
  4249  001ACE  C069  F07B         	movff	?___ftmul+2,_scale$1749+2
  4250                           
  4251                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4252  001AD2  C079  F067         	movff	_scale$1749,___ftmul@f1
  4253  001AD6  C07A  F068         	movff	_scale$1749+1,___ftmul@f1+1
  4254  001ADA  C07B  F069         	movff	_scale$1749+2,___ftmul@f1+2
  4255  001ADE  0E00               	movlw	0
  4256  001AE0  6E24               	movwf	___wmul@multiplicand+1,c
  4257  001AE2  0E03               	movlw	3
  4258  001AE4  6E23               	movwf	___wmul@multiplicand,c
  4259  001AE6  0E00               	movlw	0
  4260  001AE8  6E16               	movwf	___awmod@divisor+1,c
  4261  001AEA  0E0A               	movlw	10
  4262  001AEC  6E15               	movwf	___awmod@divisor,c
  4263  001AEE  0100               	movlb	0	; () banked
  4264  001AF0  517C               	movf	scale@scl& (0+255),w,b
  4265  001AF2  6E13               	movwf	___awmod@dividend,c
  4266  001AF4  6A14               	clrf	___awmod@dividend+1,c
  4267  001AF6  BE13               	btfsc	___awmod@dividend,7,c
  4268  001AF8  0614               	decf	___awmod@dividend+1,f,c
  4269  001AFA  EC2A  F015         	call	___awmod	;wreg free
  4270  001AFE  C013  F021         	movff	?___awmod,___wmul@multiplier
  4271  001B02  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4272  001B06  ECE2  F016         	call	___wmul	;wreg free
  4273  001B0A  0E29               	movlw	low __powers_
  4274  001B0C  2421               	addwf	?___wmul,w,c
  4275  001B0E  6EF6               	movwf	tblptrl,c
  4276  001B10  0E08               	movlw	high __powers_
  4277  001B12  2022               	addwfc	?___wmul+1,w,c
  4278  001B14  6EF7               	movwf	tblptrh,c
  4279  001B16                     	if	0	;There are less than 3 active tblptr bytes
  4280  001B16                     	endif
  4281  001B16  0009               	tblrd		*+
  4282  001B18  CFF5 F06A          	movff	tablat,___ftmul@f2
  4283  001B1C  0009               	tblrd		*+
  4284  001B1E  CFF5 F06B          	movff	tablat,___ftmul@f2+1
  4285  001B22  000A               	tblrd		*-
  4286  001B24  CFF5 F06C          	movff	tablat,___ftmul@f2+2
  4287  001B28  EC69  F010         	call	___ftmul	;wreg free
  4288  001B2C  C067  F076         	movff	?___ftmul,?_scale
  4289  001B30  C068  F077         	movff	?___ftmul+1,?_scale+1
  4290  001B34  C069  F078         	movff	?___ftmul+2,?_scale+2
  4291  001B38  0012               	return	
  4292  001B3A                     l4055:
  4293                           
  4294                           ;doprnt.c: 438: else if(scl > 10)
  4295  001B3A  0100               	movlb	0	; () banked
  4296  001B3C  517C               	movf	scale@scl& (0+255),w,b
  4297  001B3E  0A80               	xorlw	128
  4298  001B40  0F75               	addlw	-139
  4299  001B42  A0D8               	btfss	status,0,c
  4300  001B44  D04F               	goto	l4061
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4304  001B46  0E00               	movlw	0
  4305  001B48  6E1C               	movwf	___awdiv@divisor+1,c
  4306  001B4A  0E0A               	movlw	10
  4307  001B4C  6E1B               	movwf	___awdiv@divisor,c
  4308  001B4E  0100               	movlb	0	; () banked
  4309  001B50  517C               	movf	scale@scl& (0+255),w,b
  4310  001B52  6E19               	movwf	___awdiv@dividend,c
  4311  001B54  6A1A               	clrf	___awdiv@dividend+1,c
  4312  001B56  BE19               	btfsc	___awdiv@dividend,7,c
  4313  001B58  061A               	decf	___awdiv@dividend+1,f,c
  4314  001B5A  EC69  F014         	call	___awdiv	;wreg free
  4315  001B5E  0E09               	movlw	9
  4316  001B60  2419               	addwf	?___awdiv,w,c
  4317  001B62  6E21               	movwf	___wmul@multiplier,c
  4318  001B64  0E00               	movlw	0
  4319  001B66  201A               	addwfc	?___awdiv+1,w,c
  4320  001B68  6E22               	movwf	___wmul@multiplier+1,c
  4321  001B6A  0E00               	movlw	0
  4322  001B6C  6E24               	movwf	___wmul@multiplicand+1,c
  4323  001B6E  0E03               	movlw	3
  4324  001B70  6E23               	movwf	___wmul@multiplicand,c
  4325  001B72  ECE2  F016         	call	___wmul	;wreg free
  4326  001B76  0E29               	movlw	low __powers_
  4327  001B78  2421               	addwf	?___wmul,w,c
  4328  001B7A  6EF6               	movwf	tblptrl,c
  4329  001B7C  0E08               	movlw	high __powers_
  4330  001B7E  2022               	addwfc	?___wmul+1,w,c
  4331  001B80  6EF7               	movwf	tblptrh,c
  4332  001B82                     	if	0	;There are less than 3 active tblptr bytes
  4333  001B82                     	endif
  4334  001B82  0009               	tblrd		*+
  4335  001B84  CFF5 F067          	movff	tablat,___ftmul@f1
  4336  001B88  0009               	tblrd		*+
  4337  001B8A  CFF5 F068          	movff	tablat,___ftmul@f1+1
  4338  001B8E  000A               	tblrd		*-
  4339  001B90  CFF5 F069          	movff	tablat,___ftmul@f1+2
  4340  001B94  0E00               	movlw	0
  4341  001B96  6E24               	movwf	___wmul@multiplicand+1,c
  4342  001B98  0E03               	movlw	3
  4343  001B9A  6E23               	movwf	___wmul@multiplicand,c
  4344  001B9C  0E00               	movlw	0
  4345  001B9E  6E16               	movwf	___awmod@divisor+1,c
  4346  001BA0  0E0A               	movlw	10
  4347  001BA2  6E15               	movwf	___awmod@divisor,c
  4348  001BA4  0100               	movlb	0	; () banked
  4349  001BA6  517C               	movf	scale@scl& (0+255),w,b
  4350  001BA8  6E13               	movwf	___awmod@dividend,c
  4351  001BAA  6A14               	clrf	___awmod@dividend+1,c
  4352  001BAC  BE13               	btfsc	___awmod@dividend,7,c
  4353  001BAE  0614               	decf	___awmod@dividend+1,f,c
  4354  001BB0  EC2A  F015         	call	___awmod	;wreg free
  4355  001BB4  C013  F021         	movff	?___awmod,___wmul@multiplier
  4356  001BB8  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4357  001BBC  ECE2  F016         	call	___wmul	;wreg free
  4358  001BC0  0E29               	movlw	low __powers_
  4359  001BC2  2421               	addwf	?___wmul,w,c
  4360  001BC4  6EF6               	movwf	tblptrl,c
  4361  001BC6  0E08               	movlw	high __powers_
  4362  001BC8  2022               	addwfc	?___wmul+1,w,c
  4363  001BCA  6EF7               	movwf	tblptrh,c
  4364  001BCC                     	if	0	;There are less than 3 active tblptr bytes
  4365  001BCC                     	endif
  4366  001BCC  0009               	tblrd		*+
  4367  001BCE  CFF5 F06A          	movff	tablat,___ftmul@f2
  4368  001BD2  0009               	tblrd		*+
  4369  001BD4  CFF5 F06B          	movff	tablat,___ftmul@f2+1
  4370  001BD8  000A               	tblrd		*-
  4371  001BDA  CFF5 F06C          	movff	tablat,___ftmul@f2+2
  4372  001BDE  EC69  F010         	call	___ftmul	;wreg free
  4373  001BE2  D7A4               	goto	L6
  4374  001BE4                     l4061:
  4375                           
  4376                           ;doprnt.c: 440: return _powers_[scl];
  4377  001BE4  0100               	movlb	0	; () banked
  4378  001BE6  517C               	movf	scale@scl& (0+255),w,b
  4379  001BE8  0D03               	mullw	3
  4380  001BEA  0E29               	movlw	low __powers_
  4381  001BEC  24F3               	addwf	prodl,w,c
  4382  001BEE  6EF6               	movwf	tblptrl,c
  4383  001BF0  0E08               	movlw	high __powers_
  4384  001BF2  20F4               	addwfc	prodh,w,c
  4385  001BF4  6EF7               	movwf	tblptrh,c
  4386  001BF6                     	if	0	;There are less than 3 active tblptr bytes
  4387  001BF6                     	endif
  4388  001BF6  0009               	tblrd		*+
  4389  001BF8  CFF5 F076          	movff	tablat,?_scale
  4390  001BFC  0009               	tblrd		*+
  4391  001BFE  CFF5 F077          	movff	tablat,?_scale+1
  4392  001C02  000A               	tblrd		*-
  4393  001C04  CFF5 F078          	movff	tablat,?_scale+2
  4394  001C08  0012               	return	
  4395  001C0A                     __end_of_scale:
  4396                           	opt stack 0
  4397                           tblptru	equ	0xFF8
  4398                           tblptrh	equ	0xFF7
  4399                           tblptrl	equ	0xFF6
  4400                           tablat	equ	0xFF5
  4401                           prodh	equ	0xFF4
  4402                           prodl	equ	0xFF3
  4403                           intcon	equ	0xFF2
  4404                           intcon2	equ	0xFF1
  4405                           intcon3	equ	0xFF0
  4406                           postinc0	equ	0xFEE
  4407                           wreg	equ	0xFE8
  4408                           indf2	equ	0xFDF
  4409                           postinc2	equ	0xFDE
  4410                           postdec2	equ	0xFDD
  4411                           fsr2h	equ	0xFDA
  4412                           fsr2l	equ	0xFD9
  4413                           status	equ	0xFD8
  4414                           
  4415 ;; *************** function _isdigit *****************
  4416 ;; Defined at:
  4417 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  c               1    wreg     unsigned char 
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  c               1   20[COMRAM] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;		None               void
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4431 ;;      Params:         0       0       0       0       0       0       0       0       0
  4432 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4433 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4434 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4435 ;;Total ram usage:        3 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    3
  4438 ;; This function calls:
  4439 ;;		Nothing
  4440 ;; This function is called by:
  4441 ;;		_sprintf
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           	psect	text11
  4446  002E50                     __ptext11:
  4447                           	opt stack 0
  4448  002E50                     _isdigit:
  4449                           	opt stack 26
  4450                           
  4451                           ;incstack = 0
  4452                           ;isdigit@c stored from wreg
  4453  002E50  6E15               	movwf	isdigit@c,c
  4454  002E52  0E00               	movlw	0
  4455  002E54  6E14               	movwf	_isdigit$1361,c
  4456  002E56  0E3A               	movlw	58
  4457  002E58  6015               	cpfslt	isdigit@c,c
  4458  002E5A  D005               	goto	l2933
  4459  002E5C  0E2F               	movlw	47
  4460  002E5E  6415               	cpfsgt	isdigit@c,c
  4461  002E60  D002               	goto	l2933
  4462  002E62  0E01               	movlw	1
  4463  002E64  6E14               	movwf	_isdigit$1361,c
  4464  002E66                     l2933:
  4465  002E66  C014  F013         	movff	_isdigit$1361,??_isdigit
  4466  002E6A  3013               	rrcf	??_isdigit,w,c
  4467  002E6C  0012               	return	
  4468  002E6E                     __end_of_isdigit:
  4469                           	opt stack 0
  4470                           tblptru	equ	0xFF8
  4471                           tblptrh	equ	0xFF7
  4472                           tblptrl	equ	0xFF6
  4473                           tablat	equ	0xFF5
  4474                           prodh	equ	0xFF4
  4475                           prodl	equ	0xFF3
  4476                           intcon	equ	0xFF2
  4477                           intcon2	equ	0xFF1
  4478                           intcon3	equ	0xFF0
  4479                           postinc0	equ	0xFEE
  4480                           wreg	equ	0xFE8
  4481                           indf2	equ	0xFDF
  4482                           postinc2	equ	0xFDE
  4483                           postdec2	equ	0xFDD
  4484                           fsr2h	equ	0xFDA
  4485                           fsr2l	equ	0xFD9
  4486                           status	equ	0xFD8
  4487                           
  4488 ;; *************** function _fround *****************
  4489 ;; Defined at:
  4490 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  prec            1    wreg     unsigned char 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;  prec            1   31[BANK0 ] unsigned char 
  4495 ;; Return value:  Size  Location     Type
  4496 ;;                  3   22[BANK0 ] unsigned char 
  4497 ;; Registers used:
  4498 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4499 ;; Tracked objects:
  4500 ;;		On entry : 0/0
  4501 ;;		On exit  : 0/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4504 ;;      Params:         0       3       0       0       0       0       0       0       0
  4505 ;;      Locals:         0       7       0       0       0       0       0       0       0
  4506 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4507 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4508 ;;Total ram usage:       10 bytes
  4509 ;; Hardware stack levels used:    1
  4510 ;; Hardware stack levels required when called:    5
  4511 ;; This function calls:
  4512 ;;		___awdiv
  4513 ;;		___awmod
  4514 ;;		___ftmul
  4515 ;;		___wmul
  4516 ;; This function is called by:
  4517 ;;		_sprintf
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text12
  4522  001E72                     __ptext12:
  4523                           	opt stack 0
  4524  001E72                     _fround:
  4525                           	opt stack 24
  4526                           
  4527                           ;incstack = 0
  4528                           ;fround@prec stored from wreg
  4529  001E72  0100               	movlb	0	; () banked
  4530  001E74  6F7F               	movwf	fround@prec& (0+255),b
  4531                           
  4532                           ;doprnt.c: 413: if(prec>=110)
  4533  001E76  0E6D               	movlw	109
  4534  001E78  0100               	movlb	0	; () banked
  4535  001E7A  657F               	cpfsgt	fround@prec& (0+255),b
  4536  001E7C  D0A2               	goto	l4015
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4540  001E7E  0E00               	movlw	0
  4541  001E80  6E24               	movwf	___wmul@multiplicand+1,c
  4542  001E82  0E03               	movlw	3
  4543  001E84  6E23               	movwf	___wmul@multiplicand,c
  4544  001E86  0E00               	movlw	0
  4545  001E88  6E1C               	movwf	___awdiv@divisor+1,c
  4546  001E8A  0E0A               	movlw	10
  4547  001E8C  6E1B               	movwf	___awdiv@divisor,c
  4548  001E8E  0E00               	movlw	0
  4549  001E90  6E16               	movwf	___awmod@divisor+1,c
  4550  001E92  0E64               	movlw	100
  4551  001E94  6E15               	movwf	___awmod@divisor,c
  4552  001E96  C07F  F013         	movff	fround@prec,___awmod@dividend
  4553  001E9A  6A14               	clrf	___awmod@dividend+1,c
  4554  001E9C  EC2A  F015         	call	___awmod	;wreg free
  4555  001EA0  C013  F019         	movff	?___awmod,___awdiv@dividend
  4556  001EA4  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  4557  001EA8  EC69  F014         	call	___awdiv	;wreg free
  4558  001EAC  0E09               	movlw	9
  4559  001EAE  2419               	addwf	?___awdiv,w,c
  4560  001EB0  6E21               	movwf	___wmul@multiplier,c
  4561  001EB2  0E00               	movlw	0
  4562  001EB4  201A               	addwfc	?___awdiv+1,w,c
  4563  001EB6  6E22               	movwf	___wmul@multiplier+1,c
  4564  001EB8  ECE2  F016         	call	___wmul	;wreg free
  4565  001EBC  0E50               	movlw	low __npowers_
  4566  001EBE  2421               	addwf	?___wmul,w,c
  4567  001EC0  6EF6               	movwf	tblptrl,c
  4568  001EC2  0E08               	movlw	high __npowers_
  4569  001EC4  2022               	addwfc	?___wmul+1,w,c
  4570  001EC6  6EF7               	movwf	tblptrh,c
  4571  001EC8                     	if	0	;There are less than 3 active tblptr bytes
  4572  001EC8                     	endif
  4573  001EC8  0009               	tblrd		*+
  4574  001ECA  CFF5 F06A          	movff	tablat,___ftmul@f2
  4575  001ECE  0009               	tblrd		*+
  4576  001ED0  CFF5 F06B          	movff	tablat,___ftmul@f2+1
  4577  001ED4  000A               	tblrd		*-
  4578  001ED6  CFF5 F06C          	movff	tablat,___ftmul@f2+2
  4579  001EDA  0E00               	movlw	0
  4580  001EDC  6E1C               	movwf	___awdiv@divisor+1,c
  4581  001EDE  0E64               	movlw	100
  4582  001EE0  6E1B               	movwf	___awdiv@divisor,c
  4583  001EE2  C07F  F019         	movff	fround@prec,___awdiv@dividend
  4584  001EE6  6A1A               	clrf	___awdiv@dividend+1,c
  4585  001EE8  EC69  F014         	call	___awdiv	;wreg free
  4586  001EEC  0E12               	movlw	18
  4587  001EEE  2419               	addwf	?___awdiv,w,c
  4588  001EF0  6E21               	movwf	___wmul@multiplier,c
  4589  001EF2  0E00               	movlw	0
  4590  001EF4  201A               	addwfc	?___awdiv+1,w,c
  4591  001EF6  6E22               	movwf	___wmul@multiplier+1,c
  4592  001EF8  0E00               	movlw	0
  4593  001EFA  6E24               	movwf	___wmul@multiplicand+1,c
  4594  001EFC  0E03               	movlw	3
  4595  001EFE  6E23               	movwf	___wmul@multiplicand,c
  4596  001F00  ECE2  F016         	call	___wmul	;wreg free
  4597  001F04  0E50               	movlw	low __npowers_
  4598  001F06  2421               	addwf	?___wmul,w,c
  4599  001F08  6EF6               	movwf	tblptrl,c
  4600  001F0A  0E08               	movlw	high __npowers_
  4601  001F0C  2022               	addwfc	?___wmul+1,w,c
  4602  001F0E  6EF7               	movwf	tblptrh,c
  4603  001F10                     	if	0	;There are less than 3 active tblptr bytes
  4604  001F10                     	endif
  4605  001F10  0009               	tblrd		*+
  4606  001F12  CFF5 F067          	movff	tablat,___ftmul@f1
  4607  001F16  0009               	tblrd		*+
  4608  001F18  CFF5 F068          	movff	tablat,___ftmul@f1+1
  4609  001F1C  000A               	tblrd		*-
  4610  001F1E  CFF5 F069          	movff	tablat,___ftmul@f1+2
  4611  001F22  EC69  F010         	call	___ftmul	;wreg free
  4612  001F26  C067  F07C         	movff	?___ftmul,_fround$1747
  4613  001F2A  C068  F07D         	movff	?___ftmul+1,_fround$1747+1
  4614  001F2E  C069  F07E         	movff	?___ftmul+2,_fround$1747+2
  4615                           
  4616                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4617  001F32  0E00               	movlw	0
  4618  001F34  6E24               	movwf	___wmul@multiplicand+1,c
  4619  001F36  0E03               	movlw	3
  4620  001F38  6E23               	movwf	___wmul@multiplicand,c
  4621  001F3A  0E00               	movlw	0
  4622  001F3C  6E16               	movwf	___awmod@divisor+1,c
  4623  001F3E  0E0A               	movlw	10
  4624  001F40  6E15               	movwf	___awmod@divisor,c
  4625  001F42  C07F  F013         	movff	fround@prec,___awmod@dividend
  4626  001F46  6A14               	clrf	___awmod@dividend+1,c
  4627  001F48  EC2A  F015         	call	___awmod	;wreg free
  4628  001F4C  C013  F021         	movff	?___awmod,___wmul@multiplier
  4629  001F50  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4630  001F54  ECE2  F016         	call	___wmul	;wreg free
  4631  001F58  0E50               	movlw	low __npowers_
  4632  001F5A  2421               	addwf	?___wmul,w,c
  4633  001F5C  6EF6               	movwf	tblptrl,c
  4634  001F5E  0E08               	movlw	high __npowers_
  4635  001F60  2022               	addwfc	?___wmul+1,w,c
  4636  001F62  6EF7               	movwf	tblptrh,c
  4637  001F64                     	if	0	;There are less than 3 active tblptr bytes
  4638  001F64                     	endif
  4639  001F64  0009               	tblrd		*+
  4640  001F66  CFF5 F06A          	movff	tablat,___ftmul@f2
  4641  001F6A  0009               	tblrd		*+
  4642  001F6C  CFF5 F06B          	movff	tablat,___ftmul@f2+1
  4643  001F70  000A               	tblrd		*-
  4644  001F72  CFF5 F06C          	movff	tablat,___ftmul@f2+2
  4645  001F76  C07C  F067         	movff	_fround$1747,___ftmul@f1
  4646  001F7A  C07D  F068         	movff	_fround$1747+1,___ftmul@f1+1
  4647  001F7E  C07E  F069         	movff	_fround$1747+2,___ftmul@f1+2
  4648  001F82  EC69  F010         	call	___ftmul	;wreg free
  4649  001F86  C067  F079         	movff	?___ftmul,_fround$1748
  4650  001F8A  C068  F07A         	movff	?___ftmul+1,_fround$1748+1
  4651  001F8E  C069  F07B         	movff	?___ftmul+2,_fround$1748+2
  4652                           
  4653                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4654  001F92  C079  F067         	movff	_fround$1748,___ftmul@f1
  4655  001F96  C07A  F068         	movff	_fround$1748+1,___ftmul@f1+1
  4656  001F9A  C07B  F069         	movff	_fround$1748+2,___ftmul@f1+2
  4657  001F9E  0E00               	movlw	0
  4658  001FA0  0100               	movlb	0	; () banked
  4659  001FA2  6F6A               	movwf	___ftmul@f2& (0+255),b
  4660  001FA4  0E00               	movlw	0
  4661  001FA6  0100               	movlb	0	; () banked
  4662  001FA8  6F6B               	movwf	(___ftmul@f2+1)& (0+255),b
  4663  001FAA  0E3F               	movlw	63
  4664  001FAC  0100               	movlb	0	; () banked
  4665  001FAE  6F6C               	movwf	(___ftmul@f2+2)& (0+255),b
  4666  001FB0  EC69  F010         	call	___ftmul	;wreg free
  4667  001FB4  C067  F076         	movff	?___ftmul,?_fround
  4668  001FB8  C068  F077         	movff	?___ftmul+1,?_fround+1
  4669  001FBC  C069  F078         	movff	?___ftmul+2,?_fround+2
  4670  001FC0  0012               	return	
  4671  001FC2                     l4015:
  4672                           
  4673                           ;doprnt.c: 415: else if(prec > 10)
  4674  001FC2  0E0A               	movlw	10
  4675  001FC4  0100               	movlb	0	; () banked
  4676  001FC6  657F               	cpfsgt	fround@prec& (0+255),b
  4677  001FC8  D060               	goto	l4023
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4681  001FCA  0E00               	movlw	0
  4682  001FCC  6E24               	movwf	___wmul@multiplicand+1,c
  4683  001FCE  0E03               	movlw	3
  4684  001FD0  6E23               	movwf	___wmul@multiplicand,c
  4685  001FD2  0E00               	movlw	0
  4686  001FD4  6E16               	movwf	___awmod@divisor+1,c
  4687  001FD6  0E0A               	movlw	10
  4688  001FD8  6E15               	movwf	___awmod@divisor,c
  4689  001FDA  C07F  F013         	movff	fround@prec,___awmod@dividend
  4690  001FDE  6A14               	clrf	___awmod@dividend+1,c
  4691  001FE0  EC2A  F015         	call	___awmod	;wreg free
  4692  001FE4  C013  F021         	movff	?___awmod,___wmul@multiplier
  4693  001FE8  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4694  001FEC  ECE2  F016         	call	___wmul	;wreg free
  4695  001FF0  0E50               	movlw	low __npowers_
  4696  001FF2  2421               	addwf	?___wmul,w,c
  4697  001FF4  6EF6               	movwf	tblptrl,c
  4698  001FF6  0E08               	movlw	high __npowers_
  4699  001FF8  2022               	addwfc	?___wmul+1,w,c
  4700  001FFA  6EF7               	movwf	tblptrh,c
  4701  001FFC                     	if	0	;There are less than 3 active tblptr bytes
  4702  001FFC                     	endif
  4703  001FFC  0009               	tblrd		*+
  4704  001FFE  CFF5 F06A          	movff	tablat,___ftmul@f2
  4705  002002  0009               	tblrd		*+
  4706  002004  CFF5 F06B          	movff	tablat,___ftmul@f2+1
  4707  002008  000A               	tblrd		*-
  4708  00200A  CFF5 F06C          	movff	tablat,___ftmul@f2+2
  4709  00200E  0E00               	movlw	0
  4710  002010  6E1C               	movwf	___awdiv@divisor+1,c
  4711  002012  0E0A               	movlw	10
  4712  002014  6E1B               	movwf	___awdiv@divisor,c
  4713  002016  C07F  F019         	movff	fround@prec,___awdiv@dividend
  4714  00201A  6A1A               	clrf	___awdiv@dividend+1,c
  4715  00201C  EC69  F014         	call	___awdiv	;wreg free
  4716  002020  0E09               	movlw	9
  4717  002022  2419               	addwf	?___awdiv,w,c
  4718  002024  6E21               	movwf	___wmul@multiplier,c
  4719  002026  0E00               	movlw	0
  4720  002028  201A               	addwfc	?___awdiv+1,w,c
  4721  00202A  6E22               	movwf	___wmul@multiplier+1,c
  4722  00202C  0E00               	movlw	0
  4723  00202E  6E24               	movwf	___wmul@multiplicand+1,c
  4724  002030  0E03               	movlw	3
  4725  002032  6E23               	movwf	___wmul@multiplicand,c
  4726  002034  ECE2  F016         	call	___wmul	;wreg free
  4727  002038  0E50               	movlw	low __npowers_
  4728  00203A  2421               	addwf	?___wmul,w,c
  4729  00203C  6EF6               	movwf	tblptrl,c
  4730  00203E  0E08               	movlw	high __npowers_
  4731  002040  2022               	addwfc	?___wmul+1,w,c
  4732  002042  6EF7               	movwf	tblptrh,c
  4733  002044                     	if	0	;There are less than 3 active tblptr bytes
  4734  002044                     	endif
  4735  002044  0009               	tblrd		*+
  4736  002046  CFF5 F067          	movff	tablat,___ftmul@f1
  4737  00204A  0009               	tblrd		*+
  4738  00204C  CFF5 F068          	movff	tablat,___ftmul@f1+1
  4739  002050  000A               	tblrd		*-
  4740  002052  CFF5 F069          	movff	tablat,___ftmul@f1+2
  4741  002056  EC69  F010         	call	___ftmul	;wreg free
  4742  00205A  C067  F07C         	movff	?___ftmul,_fround$1747
  4743  00205E  C068  F07D         	movff	?___ftmul+1,_fround$1747+1
  4744  002062  C069  F07E         	movff	?___ftmul+2,_fround$1747+2
  4745                           
  4746                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4747  002066  C07C  F067         	movff	_fround$1747,___ftmul@f1
  4748  00206A  C07D  F068         	movff	_fround$1747+1,___ftmul@f1+1
  4749  00206E  C07E  F069         	movff	_fround$1747+2,___ftmul@f1+2
  4750  002072  0E00               	movlw	0
  4751  002074  0100               	movlb	0	; () banked
  4752  002076  6F6A               	movwf	___ftmul@f2& (0+255),b
  4753  002078  0E00               	movlw	0
  4754  00207A  0100               	movlb	0	; () banked
  4755  00207C  6F6B               	movwf	(___ftmul@f2+1)& (0+255),b
  4756  00207E  0E3F               	movlw	63
  4757  002080  0100               	movlb	0	; () banked
  4758  002082  6F6C               	movwf	(___ftmul@f2+2)& (0+255),b
  4759  002084  EC69  F010         	call	___ftmul	;wreg free
  4760  002088  D795               	goto	L7
  4761  00208A                     l4023:
  4762                           
  4763                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4764  00208A  0100               	movlb	0	; () banked
  4765  00208C  517F               	movf	fround@prec& (0+255),w,b
  4766  00208E  0D03               	mullw	3
  4767  002090  0E50               	movlw	low __npowers_
  4768  002092  24F3               	addwf	prodl,w,c
  4769  002094  6EF6               	movwf	tblptrl,c
  4770  002096  0E08               	movlw	high __npowers_
  4771  002098  20F4               	addwfc	prodh,w,c
  4772  00209A  6EF7               	movwf	tblptrh,c
  4773  00209C                     	if	0	;There are less than 3 active tblptr bytes
  4774  00209C                     	endif
  4775  00209C  0009               	tblrd		*+
  4776  00209E  CFF5 F067          	movff	tablat,___ftmul@f1
  4777  0020A2  0009               	tblrd		*+
  4778  0020A4  CFF5 F068          	movff	tablat,___ftmul@f1+1
  4779  0020A8  000A               	tblrd		*-
  4780  0020AA  CFF5 F069          	movff	tablat,___ftmul@f1+2
  4781  0020AE  0E00               	movlw	0
  4782  0020B0  0100               	movlb	0	; () banked
  4783  0020B2  6F6A               	movwf	___ftmul@f2& (0+255),b
  4784  0020B4  0E00               	movlw	0
  4785  0020B6  0100               	movlb	0	; () banked
  4786  0020B8  6F6B               	movwf	(___ftmul@f2+1)& (0+255),b
  4787  0020BA  0E3F               	movlw	63
  4788  0020BC  0100               	movlb	0	; () banked
  4789  0020BE  6F6C               	movwf	(___ftmul@f2+2)& (0+255),b
  4790  0020C0  EC69  F010         	call	___ftmul	;wreg free
  4791  0020C4  C067  F076         	movff	?___ftmul,?_fround
  4792  0020C8  C068  F077         	movff	?___ftmul+1,?_fround+1
  4793  0020CC  C069  F078         	movff	?___ftmul+2,?_fround+2
  4794  0020D0  0012               	return	
  4795  0020D2                     __end_of_fround:
  4796                           	opt stack 0
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           intcon	equ	0xFF2
  4804                           intcon2	equ	0xFF1
  4805                           intcon3	equ	0xFF0
  4806                           postinc0	equ	0xFEE
  4807                           wreg	equ	0xFE8
  4808                           indf2	equ	0xFDF
  4809                           postinc2	equ	0xFDE
  4810                           postdec2	equ	0xFDD
  4811                           fsr2h	equ	0xFDA
  4812                           fsr2l	equ	0xFD9
  4813                           status	equ	0xFD8
  4814                           
  4815 ;; *************** function ___wmul *****************
  4816 ;; Defined at:
  4817 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;  multiplier      2   32[COMRAM] unsigned int 
  4820 ;;  multiplicand    2   34[COMRAM] unsigned int 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  product         2   36[COMRAM] unsigned int 
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  2   32[COMRAM] unsigned int 
  4825 ;; Registers used:
  4826 ;;		wreg, status,2, status,0, prodl, prodh
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4832 ;;      Params:         4       0       0       0       0       0       0       0       0
  4833 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4834 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4835 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4836 ;;Total ram usage:        6 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    3
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		_fround
  4843 ;;		_scale
  4844 ;;		_sprintf
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           	psect	text13
  4849  002DC4                     __ptext13:
  4850                           	opt stack 0
  4851  002DC4                     ___wmul:
  4852                           	opt stack 25
  4853                           
  4854                           ;incstack = 0
  4855  002DC4  5021               	movf	___wmul@multiplier,w,c
  4856  002DC6  0223               	mulwf	___wmul@multiplicand,c
  4857  002DC8  CFF3 F025          	movff	prodl,___wmul@product
  4858  002DCC  CFF4 F026          	movff	prodh,___wmul@product+1
  4859  002DD0  5021               	movf	___wmul@multiplier,w,c
  4860  002DD2  0224               	mulwf	___wmul@multiplicand+1,c
  4861  002DD4  50F3               	movf	prodl,w,c
  4862  002DD6  2626               	addwf	___wmul@product+1,f,c
  4863  002DD8  5022               	movf	___wmul@multiplier+1,w,c
  4864  002DDA  0223               	mulwf	___wmul@multiplicand,c
  4865  002DDC  50F3               	movf	prodl,w,c
  4866  002DDE  2626               	addwf	___wmul@product+1,f,c
  4867  002DE0  C025  F021         	movff	___wmul@product,?___wmul
  4868  002DE4  C026  F022         	movff	___wmul@product+1,?___wmul+1
  4869  002DE8  0012               	return	
  4870  002DEA                     __end_of___wmul:
  4871                           	opt stack 0
  4872                           tblptru	equ	0xFF8
  4873                           tblptrh	equ	0xFF7
  4874                           tblptrl	equ	0xFF6
  4875                           tablat	equ	0xFF5
  4876                           prodh	equ	0xFF4
  4877                           prodl	equ	0xFF3
  4878                           intcon	equ	0xFF2
  4879                           intcon2	equ	0xFF1
  4880                           intcon3	equ	0xFF0
  4881                           postinc0	equ	0xFEE
  4882                           wreg	equ	0xFE8
  4883                           indf2	equ	0xFDF
  4884                           postinc2	equ	0xFDE
  4885                           postdec2	equ	0xFDD
  4886                           fsr2h	equ	0xFDA
  4887                           fsr2l	equ	0xFD9
  4888                           status	equ	0xFD8
  4889                           
  4890 ;; *************** function ___ftmul *****************
  4891 ;; Defined at:
  4892 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;  f1              3    7[BANK0 ] float 
  4895 ;;  f2              3   10[BANK0 ] float 
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
  4898 ;;  sign            1   21[BANK0 ] unsigned char 
  4899 ;;  cntr            1   20[BANK0 ] unsigned char 
  4900 ;;  exp             1   16[BANK0 ] unsigned char 
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  3    7[BANK0 ] float 
  4903 ;; Registers used:
  4904 ;;		wreg, status,2, status,0, cstack
  4905 ;; Tracked objects:
  4906 ;;		On entry : 0/0
  4907 ;;		On exit  : 0/0
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4910 ;;      Params:         0       6       0       0       0       0       0       0       0
  4911 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4912 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4913 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4914 ;;Total ram usage:       15 bytes
  4915 ;; Hardware stack levels used:    1
  4916 ;; Hardware stack levels required when called:    4
  4917 ;; This function calls:
  4918 ;;		___ftpack
  4919 ;; This function is called by:
  4920 ;;		_fround
  4921 ;;		_scale
  4922 ;;		_sprintf
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text14
  4927  0020D2                     __ptext14:
  4928                           	opt stack 0
  4929  0020D2                     ___ftmul:
  4930                           	opt stack 24
  4931                           
  4932                           ;incstack = 0
  4933  0020D2  C069  F06D         	movff	___ftmul@f1+2,??___ftmul
  4934  0020D6  0100               	movlb	0	; () banked
  4935  0020D8  6B6E               	clrf	(??___ftmul+1)& (0+255),b
  4936  0020DA  6B6F               	clrf	(??___ftmul+2)& (0+255),b
  4937  0020DC  0100               	movlb	0	; () banked
  4938  0020DE  3568               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  4939  0020E0  0100               	movlb	0	; () banked
  4940  0020E2  376D               	rlcf	??___ftmul& (0+255),f,b
  4941  0020E4  E301               	bnc	u3671
  4942  0020E6  816E               	bsf	(??___ftmul+1)& (0+255),0,b
  4943  0020E8                     u3671:
  4944  0020E8  0100               	movlb	0	; () banked
  4945  0020EA  516D               	movf	??___ftmul& (0+255),w,b
  4946  0020EC  0100               	movlb	0	; () banked
  4947  0020EE  6F70               	movwf	___ftmul@exp& (0+255),b
  4948  0020F0  0100               	movlb	0	; () banked
  4949  0020F2  5170               	movf	___ftmul@exp& (0+255),w,b
  4950  0020F4  A4D8               	btfss	status,2,c
  4951  0020F6  D00A               	goto	l3963
  4952                           
  4953                           ; BSR set to: 0
  4954  0020F8  0E00               	movlw	0
  4955  0020FA  0100               	movlb	0	; () banked
  4956  0020FC  6F67               	movwf	?___ftmul& (0+255),b
  4957  0020FE  0E00               	movlw	0
  4958  002100  0100               	movlb	0	; () banked
  4959  002102  6F68               	movwf	(?___ftmul+1)& (0+255),b
  4960  002104  0E00               	movlw	0
  4961  002106  0100               	movlb	0	; () banked
  4962  002108  6F69               	movwf	(?___ftmul+2)& (0+255),b
  4963                           
  4964                           ; BSR set to: 0
  4965  00210A  0012               	return	
  4966  00210C                     l3963:
  4967                           
  4968                           ; BSR set to: 0
  4969  00210C  C06C  F06D         	movff	___ftmul@f2+2,??___ftmul
  4970  002110  0100               	movlb	0	; () banked
  4971  002112  6B6E               	clrf	(??___ftmul+1)& (0+255),b
  4972  002114  6B6F               	clrf	(??___ftmul+2)& (0+255),b
  4973  002116  0100               	movlb	0	; () banked
  4974  002118  356B               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  4975  00211A  0100               	movlb	0	; () banked
  4976  00211C  376D               	rlcf	??___ftmul& (0+255),f,b
  4977  00211E  E301               	bnc	u3691
  4978  002120  816E               	bsf	(??___ftmul+1)& (0+255),0,b
  4979  002122                     u3691:
  4980  002122  0100               	movlb	0	; () banked
  4981  002124  516D               	movf	??___ftmul& (0+255),w,b
  4982  002126  0100               	movlb	0	; () banked
  4983  002128  6F75               	movwf	___ftmul@sign& (0+255),b
  4984  00212A  0100               	movlb	0	; () banked
  4985  00212C  5175               	movf	___ftmul@sign& (0+255),w,b
  4986  00212E  A4D8               	btfss	status,2,c
  4987  002130  D00A               	goto	l3969
  4988                           
  4989                           ; BSR set to: 0
  4990  002132  0E00               	movlw	0
  4991  002134  0100               	movlb	0	; () banked
  4992  002136  6F67               	movwf	?___ftmul& (0+255),b
  4993  002138  0E00               	movlw	0
  4994  00213A  0100               	movlb	0	; () banked
  4995  00213C  6F68               	movwf	(?___ftmul+1)& (0+255),b
  4996  00213E  0E00               	movlw	0
  4997  002140  0100               	movlb	0	; () banked
  4998  002142  6F69               	movwf	(?___ftmul+2)& (0+255),b
  4999                           
  5000                           ; BSR set to: 0
  5001  002144  0012               	return	
  5002  002146                     l3969:
  5003                           
  5004                           ; BSR set to: 0
  5005  002146  0100               	movlb	0	; () banked
  5006  002148  5175               	movf	___ftmul@sign& (0+255),w,b
  5007  00214A  0F7B               	addlw	123
  5008  00214C  0100               	movlb	0	; () banked
  5009  00214E  2770               	addwf	___ftmul@exp& (0+255),f,b
  5010                           
  5011                           ; BSR set to: 0
  5012  002150  C069  F075         	movff	___ftmul@f1+2,___ftmul@sign
  5013  002154  0100               	movlb	0	; () banked
  5014  002156  516C               	movf	(___ftmul@f2+2)& (0+255),w,b
  5015  002158  0100               	movlb	0	; () banked
  5016  00215A  1B75               	xorwf	___ftmul@sign& (0+255),f,b
  5017  00215C  0E80               	movlw	128
  5018  00215E  0100               	movlb	0	; () banked
  5019  002160  1775               	andwf	___ftmul@sign& (0+255),f,b
  5020                           
  5021                           ; BSR set to: 0
  5022  002162  0100               	movlb	0	; () banked
  5023  002164  8F68               	bsf	(___ftmul@f1+1)& (0+255),7,b
  5024                           
  5025                           ; BSR set to: 0
  5026  002166  0100               	movlb	0	; () banked
  5027  002168  8F6B               	bsf	(___ftmul@f2+1)& (0+255),7,b
  5028                           
  5029                           ; BSR set to: 0
  5030  00216A  0EFF               	movlw	255
  5031  00216C  0100               	movlb	0	; () banked
  5032  00216E  176A               	andwf	___ftmul@f2& (0+255),f,b
  5033  002170  0EFF               	movlw	255
  5034  002172  0100               	movlb	0	; () banked
  5035  002174  176B               	andwf	(___ftmul@f2+1)& (0+255),f,b
  5036  002176  0E00               	movlw	0
  5037  002178  0100               	movlb	0	; () banked
  5038  00217A  176C               	andwf	(___ftmul@f2+2)& (0+255),f,b
  5039                           
  5040                           ; BSR set to: 0
  5041  00217C  0E00               	movlw	0
  5042  00217E  0100               	movlb	0	; () banked
  5043  002180  6F71               	movwf	___ftmul@f3_as_product& (0+255),b
  5044  002182  0E00               	movlw	0
  5045  002184  0100               	movlb	0	; () banked
  5046  002186  6F72               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  5047  002188  0E00               	movlw	0
  5048  00218A  0100               	movlb	0	; () banked
  5049  00218C  6F73               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  5050                           
  5051                           ; BSR set to: 0
  5052  00218E  0E07               	movlw	7
  5053  002190  0100               	movlb	0	; () banked
  5054  002192  6F74               	movwf	___ftmul@cntr& (0+255),b
  5055  002194                     l3983:
  5056                           
  5057                           ; BSR set to: 0
  5058  002194  0100               	movlb	0	; () banked
  5059  002196  A167               	btfss	___ftmul@f1& (0+255),0,b
  5060  002198  D00C               	goto	l3987
  5061                           
  5062                           ; BSR set to: 0
  5063  00219A  0100               	movlb	0	; () banked
  5064  00219C  516A               	movf	___ftmul@f2& (0+255),w,b
  5065  00219E  0100               	movlb	0	; () banked
  5066  0021A0  2771               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5067  0021A2  0100               	movlb	0	; () banked
  5068  0021A4  516B               	movf	(___ftmul@f2+1)& (0+255),w,b
  5069  0021A6  0100               	movlb	0	; () banked
  5070  0021A8  2372               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5071  0021AA  0100               	movlb	0	; () banked
  5072  0021AC  516C               	movf	(___ftmul@f2+2)& (0+255),w,b
  5073  0021AE  0100               	movlb	0	; () banked
  5074  0021B0  2373               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5075  0021B2                     l3987:
  5076                           
  5077                           ; BSR set to: 0
  5078  0021B2  0100               	movlb	0	; () banked
  5079  0021B4  90D8               	bcf	status,0,c
  5080  0021B6  3369               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5081  0021B8  3368               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5082  0021BA  3367               	rrcf	___ftmul@f1& (0+255),f,b
  5083  0021BC  0100               	movlb	0	; () banked
  5084  0021BE  90D8               	bcf	status,0,c
  5085  0021C0  376A               	rlcf	___ftmul@f2& (0+255),f,b
  5086  0021C2  376B               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  5087  0021C4  376C               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  5088                           
  5089                           ; BSR set to: 0
  5090  0021C6  0100               	movlb	0	; () banked
  5091  0021C8  2F74               	decfsz	___ftmul@cntr& (0+255),f,b
  5092  0021CA  D7E4               	goto	l3983
  5093                           
  5094                           ; BSR set to: 0
  5095                           
  5096                           ; BSR set to: 0
  5097  0021CC  0E09               	movlw	9
  5098  0021CE  0100               	movlb	0	; () banked
  5099  0021D0  6F74               	movwf	___ftmul@cntr& (0+255),b
  5100  0021D2                     l3993:
  5101                           
  5102                           ; BSR set to: 0
  5103  0021D2  0100               	movlb	0	; () banked
  5104  0021D4  A167               	btfss	___ftmul@f1& (0+255),0,b
  5105  0021D6  D00C               	goto	l3997
  5106                           
  5107                           ; BSR set to: 0
  5108  0021D8  0100               	movlb	0	; () banked
  5109  0021DA  516A               	movf	___ftmul@f2& (0+255),w,b
  5110  0021DC  0100               	movlb	0	; () banked
  5111  0021DE  2771               	addwf	___ftmul@f3_as_product& (0+255),f,b
  5112  0021E0  0100               	movlb	0	; () banked
  5113  0021E2  516B               	movf	(___ftmul@f2+1)& (0+255),w,b
  5114  0021E4  0100               	movlb	0	; () banked
  5115  0021E6  2372               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  5116  0021E8  0100               	movlb	0	; () banked
  5117  0021EA  516C               	movf	(___ftmul@f2+2)& (0+255),w,b
  5118  0021EC  0100               	movlb	0	; () banked
  5119  0021EE  2373               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  5120  0021F0                     l3997:
  5121                           
  5122                           ; BSR set to: 0
  5123  0021F0  0100               	movlb	0	; () banked
  5124  0021F2  90D8               	bcf	status,0,c
  5125  0021F4  3369               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  5126  0021F6  3368               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  5127  0021F8  3367               	rrcf	___ftmul@f1& (0+255),f,b
  5128  0021FA  0100               	movlb	0	; () banked
  5129  0021FC  90D8               	bcf	status,0,c
  5130  0021FE  3373               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  5131  002200  3372               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  5132  002202  3371               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  5133                           
  5134                           ; BSR set to: 0
  5135  002204  0100               	movlb	0	; () banked
  5136  002206  2F74               	decfsz	___ftmul@cntr& (0+255),f,b
  5137  002208  D7E4               	goto	l3993
  5138                           
  5139                           ; BSR set to: 0
  5140                           
  5141                           ; BSR set to: 0
  5142  00220A  C071  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  5143  00220E  C072  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5144  002212  C073  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5145  002216  C070  F016         	movff	___ftmul@exp,___ftpack@exp
  5146  00221A  C075  F017         	movff	___ftmul@sign,___ftpack@sign
  5147  00221E  ECC9  F013         	call	___ftpack	;wreg free
  5148  002222  C013  F067         	movff	?___ftpack,?___ftmul
  5149  002226  C014  F068         	movff	?___ftpack+1,?___ftmul+1
  5150  00222A  C015  F069         	movff	?___ftpack+2,?___ftmul+2
  5151  00222E  0012               	return	
  5152  002230                     __end_of___ftmul:
  5153                           	opt stack 0
  5154                           tblptru	equ	0xFF8
  5155                           tblptrh	equ	0xFF7
  5156                           tblptrl	equ	0xFF6
  5157                           tablat	equ	0xFF5
  5158                           prodh	equ	0xFF4
  5159                           prodl	equ	0xFF3
  5160                           intcon	equ	0xFF2
  5161                           intcon2	equ	0xFF1
  5162                           intcon3	equ	0xFF0
  5163                           postinc0	equ	0xFEE
  5164                           wreg	equ	0xFE8
  5165                           indf2	equ	0xFDF
  5166                           postinc2	equ	0xFDE
  5167                           postdec2	equ	0xFDD
  5168                           fsr2h	equ	0xFDA
  5169                           fsr2l	equ	0xFD9
  5170                           status	equ	0xFD8
  5171                           
  5172 ;; *************** function ___awmod *****************
  5173 ;; Defined at:
  5174 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;  dividend        2   18[COMRAM] int 
  5177 ;;  divisor         2   20[COMRAM] int 
  5178 ;; Auto vars:     Size  Location     Type
  5179 ;;  sign            1   23[COMRAM] unsigned char 
  5180 ;;  counter         1   22[COMRAM] unsigned char 
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  2   18[COMRAM] int 
  5183 ;; Registers used:
  5184 ;;		wreg, status,2, status,0
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5190 ;;      Params:         4       0       0       0       0       0       0       0       0
  5191 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5192 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5193 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5194 ;;Total ram usage:        6 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:    3
  5197 ;; This function calls:
  5198 ;;		Nothing
  5199 ;; This function is called by:
  5200 ;;		_fround
  5201 ;;		_scale
  5202 ;;		_sprintf
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           	psect	text15
  5207  002A54                     __ptext15:
  5208                           	opt stack 0
  5209  002A54                     ___awmod:
  5210                           	opt stack 25
  5211                           
  5212                           ;incstack = 0
  5213  002A54  0E00               	movlw	0
  5214  002A56  6E18               	movwf	___awmod@sign,c
  5215  002A58  AE14               	btfss	___awmod@dividend+1,7,c
  5216  002A5A  D006               	goto	l2783
  5217  002A5C  6C13               	negf	___awmod@dividend,c
  5218  002A5E  1E14               	comf	___awmod@dividend+1,f,c
  5219  002A60  B0D8               	btfsc	status,0,c
  5220  002A62  2A14               	incf	___awmod@dividend+1,f,c
  5221  002A64  0E01               	movlw	1
  5222  002A66  6E18               	movwf	___awmod@sign,c
  5223  002A68                     l2783:
  5224  002A68  AE16               	btfss	___awmod@divisor+1,7,c
  5225  002A6A  D004               	goto	l2787
  5226  002A6C  6C15               	negf	___awmod@divisor,c
  5227  002A6E  1E16               	comf	___awmod@divisor+1,f,c
  5228  002A70  B0D8               	btfsc	status,0,c
  5229  002A72  2A16               	incf	___awmod@divisor+1,f,c
  5230  002A74                     l2787:
  5231  002A74  5015               	movf	___awmod@divisor,w,c
  5232  002A76  1016               	iorwf	___awmod@divisor+1,w,c
  5233  002A78  B4D8               	btfsc	status,2,c
  5234  002A7A  D018               	goto	l2803
  5235  002A7C  0E01               	movlw	1
  5236  002A7E  6E17               	movwf	___awmod@counter,c
  5237  002A80  D004               	goto	l2793
  5238  002A82                     l2791:
  5239  002A82  90D8               	bcf	status,0,c
  5240  002A84  3615               	rlcf	___awmod@divisor,f,c
  5241  002A86  3616               	rlcf	___awmod@divisor+1,f,c
  5242  002A88  2A17               	incf	___awmod@counter,f,c
  5243  002A8A                     l2793:
  5244  002A8A  AE16               	btfss	___awmod@divisor+1,7,c
  5245  002A8C  D7FA               	goto	l2791
  5246  002A8E                     l2795:
  5247  002A8E  5015               	movf	___awmod@divisor,w,c
  5248  002A90  5C13               	subwf	___awmod@dividend,w,c
  5249  002A92  5016               	movf	___awmod@divisor+1,w,c
  5250  002A94  5814               	subwfb	___awmod@dividend+1,w,c
  5251  002A96  A0D8               	btfss	status,0,c
  5252  002A98  D004               	goto	l2799
  5253  002A9A  5015               	movf	___awmod@divisor,w,c
  5254  002A9C  5E13               	subwf	___awmod@dividend,f,c
  5255  002A9E  5016               	movf	___awmod@divisor+1,w,c
  5256  002AA0  5A14               	subwfb	___awmod@dividend+1,f,c
  5257  002AA2                     l2799:
  5258  002AA2  90D8               	bcf	status,0,c
  5259  002AA4  3216               	rrcf	___awmod@divisor+1,f,c
  5260  002AA6  3215               	rrcf	___awmod@divisor,f,c
  5261  002AA8  2E17               	decfsz	___awmod@counter,f,c
  5262  002AAA  D7F1               	goto	l2795
  5263  002AAC                     l2803:
  5264  002AAC  5018               	movf	___awmod@sign,w,c
  5265  002AAE  B4D8               	btfsc	status,2,c
  5266  002AB0  D004               	goto	l2807
  5267  002AB2  6C13               	negf	___awmod@dividend,c
  5268  002AB4  1E14               	comf	___awmod@dividend+1,f,c
  5269  002AB6  B0D8               	btfsc	status,0,c
  5270  002AB8  2A14               	incf	___awmod@dividend+1,f,c
  5271  002ABA                     l2807:
  5272  002ABA  C013  F013         	movff	___awmod@dividend,?___awmod
  5273  002ABE  C014  F014         	movff	___awmod@dividend+1,?___awmod+1
  5274  002AC2  0012               	return	
  5275  002AC4                     __end_of___awmod:
  5276                           	opt stack 0
  5277                           tblptru	equ	0xFF8
  5278                           tblptrh	equ	0xFF7
  5279                           tblptrl	equ	0xFF6
  5280                           tablat	equ	0xFF5
  5281                           prodh	equ	0xFF4
  5282                           prodl	equ	0xFF3
  5283                           intcon	equ	0xFF2
  5284                           intcon2	equ	0xFF1
  5285                           intcon3	equ	0xFF0
  5286                           postinc0	equ	0xFEE
  5287                           wreg	equ	0xFE8
  5288                           indf2	equ	0xFDF
  5289                           postinc2	equ	0xFDE
  5290                           postdec2	equ	0xFDD
  5291                           fsr2h	equ	0xFDA
  5292                           fsr2l	equ	0xFD9
  5293                           status	equ	0xFD8
  5294                           
  5295 ;; *************** function ___awdiv *****************
  5296 ;; Defined at:
  5297 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  5298 ;; Parameters:    Size  Location     Type
  5299 ;;  dividend        2   24[COMRAM] int 
  5300 ;;  divisor         2   26[COMRAM] int 
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;  quotient        2   30[COMRAM] int 
  5303 ;;  sign            1   29[COMRAM] unsigned char 
  5304 ;;  counter         1   28[COMRAM] unsigned char 
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  2   24[COMRAM] int 
  5307 ;; Registers used:
  5308 ;;		wreg, status,2, status,0
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5314 ;;      Params:         4       0       0       0       0       0       0       0       0
  5315 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5316 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5317 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5318 ;;Total ram usage:        8 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    3
  5321 ;; This function calls:
  5322 ;;		Nothing
  5323 ;; This function is called by:
  5324 ;;		_fround
  5325 ;;		_scale
  5326 ;;		_sprintf
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text16
  5331  0028D2                     __ptext16:
  5332                           	opt stack 0
  5333  0028D2                     ___awdiv:
  5334                           	opt stack 25
  5335                           
  5336                           ;incstack = 0
  5337  0028D2  0E00               	movlw	0
  5338  0028D4  6E1E               	movwf	___awdiv@sign,c
  5339  0028D6  AE1C               	btfss	___awdiv@divisor+1,7,c
  5340  0028D8  D006               	goto	l2739
  5341  0028DA  6C1B               	negf	___awdiv@divisor,c
  5342  0028DC  1E1C               	comf	___awdiv@divisor+1,f,c
  5343  0028DE  B0D8               	btfsc	status,0,c
  5344  0028E0  2A1C               	incf	___awdiv@divisor+1,f,c
  5345  0028E2  0E01               	movlw	1
  5346  0028E4  6E1E               	movwf	___awdiv@sign,c
  5347  0028E6                     l2739:
  5348  0028E6  AE1A               	btfss	___awdiv@dividend+1,7,c
  5349  0028E8  D006               	goto	l2745
  5350  0028EA  6C19               	negf	___awdiv@dividend,c
  5351  0028EC  1E1A               	comf	___awdiv@dividend+1,f,c
  5352  0028EE  B0D8               	btfsc	status,0,c
  5353  0028F0  2A1A               	incf	___awdiv@dividend+1,f,c
  5354  0028F2  0E01               	movlw	1
  5355  0028F4  1A1E               	xorwf	___awdiv@sign,f,c
  5356  0028F6                     l2745:
  5357  0028F6  0E00               	movlw	0
  5358  0028F8  6E20               	movwf	___awdiv@quotient+1,c
  5359  0028FA  0E00               	movlw	0
  5360  0028FC  6E1F               	movwf	___awdiv@quotient,c
  5361  0028FE  501B               	movf	___awdiv@divisor,w,c
  5362  002900  101C               	iorwf	___awdiv@divisor+1,w,c
  5363  002902  B4D8               	btfsc	status,2,c
  5364  002904  D01C               	goto	l2767
  5365  002906  0E01               	movlw	1
  5366  002908  6E1D               	movwf	___awdiv@counter,c
  5367  00290A  D004               	goto	l2753
  5368  00290C                     l2751:
  5369  00290C  90D8               	bcf	status,0,c
  5370  00290E  361B               	rlcf	___awdiv@divisor,f,c
  5371  002910  361C               	rlcf	___awdiv@divisor+1,f,c
  5372  002912  2A1D               	incf	___awdiv@counter,f,c
  5373  002914                     l2753:
  5374  002914  AE1C               	btfss	___awdiv@divisor+1,7,c
  5375  002916  D7FA               	goto	l2751
  5376  002918                     l2755:
  5377  002918  90D8               	bcf	status,0,c
  5378  00291A  361F               	rlcf	___awdiv@quotient,f,c
  5379  00291C  3620               	rlcf	___awdiv@quotient+1,f,c
  5380  00291E  501B               	movf	___awdiv@divisor,w,c
  5381  002920  5C19               	subwf	___awdiv@dividend,w,c
  5382  002922  501C               	movf	___awdiv@divisor+1,w,c
  5383  002924  581A               	subwfb	___awdiv@dividend+1,w,c
  5384  002926  A0D8               	btfss	status,0,c
  5385  002928  D005               	goto	l2763
  5386  00292A  501B               	movf	___awdiv@divisor,w,c
  5387  00292C  5E19               	subwf	___awdiv@dividend,f,c
  5388  00292E  501C               	movf	___awdiv@divisor+1,w,c
  5389  002930  5A1A               	subwfb	___awdiv@dividend+1,f,c
  5390  002932  801F               	bsf	___awdiv@quotient,0,c
  5391  002934                     l2763:
  5392  002934  90D8               	bcf	status,0,c
  5393  002936  321C               	rrcf	___awdiv@divisor+1,f,c
  5394  002938  321B               	rrcf	___awdiv@divisor,f,c
  5395  00293A  2E1D               	decfsz	___awdiv@counter,f,c
  5396  00293C  D7ED               	goto	l2755
  5397  00293E                     l2767:
  5398  00293E  501E               	movf	___awdiv@sign,w,c
  5399  002940  B4D8               	btfsc	status,2,c
  5400  002942  D004               	goto	l2771
  5401  002944  6C1F               	negf	___awdiv@quotient,c
  5402  002946  1E20               	comf	___awdiv@quotient+1,f,c
  5403  002948  B0D8               	btfsc	status,0,c
  5404  00294A  2A20               	incf	___awdiv@quotient+1,f,c
  5405  00294C                     l2771:
  5406  00294C  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  5407  002950  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  5408  002954  0012               	return	
  5409  002956                     __end_of___awdiv:
  5410                           	opt stack 0
  5411                           tblptru	equ	0xFF8
  5412                           tblptrh	equ	0xFF7
  5413                           tblptrl	equ	0xFF6
  5414                           tablat	equ	0xFF5
  5415                           prodh	equ	0xFF4
  5416                           prodl	equ	0xFF3
  5417                           intcon	equ	0xFF2
  5418                           intcon2	equ	0xFF1
  5419                           intcon3	equ	0xFF0
  5420                           postinc0	equ	0xFEE
  5421                           wreg	equ	0xFE8
  5422                           indf2	equ	0xFDF
  5423                           postinc2	equ	0xFDE
  5424                           postdec2	equ	0xFDD
  5425                           fsr2h	equ	0xFDA
  5426                           fsr2l	equ	0xFD9
  5427                           status	equ	0xFD8
  5428                           
  5429 ;; *************** function __tdiv_to_l_ *****************
  5430 ;; Defined at:
  5431 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdivl.c"
  5432 ;; Parameters:    Size  Location     Type
  5433 ;;  f1              3   18[COMRAM] float 
  5434 ;;  f2              3   21[COMRAM] float 
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;  quot            4   27[COMRAM] unsigned long 
  5437 ;;  exp1            1   32[COMRAM] unsigned char 
  5438 ;;  cntr            1   31[COMRAM] unsigned char 
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  4   18[COMRAM] unsigned long 
  5441 ;; Registers used:
  5442 ;;		wreg, status,2, status,0
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5448 ;;      Params:         6       0       0       0       0       0       0       0       0
  5449 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5450 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5451 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5452 ;;Total ram usage:       15 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    3
  5455 ;; This function calls:
  5456 ;;		Nothing
  5457 ;; This function is called by:
  5458 ;;		_sprintf
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           	psect	text17
  5463  00237C                     __ptext17:
  5464                           	opt stack 0
  5465  00237C                     __tdiv_to_l_:
  5466                           	opt stack 26
  5467                           
  5468                           ;incstack = 0
  5469  00237C  C015  F019         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5470  002380  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5471  002382  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5472  002384  3414               	rlcf	__tdiv_to_l_@f1+1,w,c
  5473  002386  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5474  002388  E301               	bnc	u2451
  5475  00238A  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5476  00238C                     u2451:
  5477  00238C  5019               	movf	??__tdiv_to_l_,w,c
  5478  00238E  6E21               	movwf	__tdiv_to_l_@exp1,c
  5479  002390  5021               	movf	__tdiv_to_l_@exp1,w,c
  5480  002392  A4D8               	btfss	status,2,c
  5481  002394  D009               	goto	l2943
  5482  002396  0E00               	movlw	0
  5483  002398  6E13               	movwf	?__tdiv_to_l_,c
  5484  00239A  0E00               	movlw	0
  5485  00239C  6E14               	movwf	?__tdiv_to_l_+1,c
  5486  00239E  0E00               	movlw	0
  5487  0023A0  6E15               	movwf	?__tdiv_to_l_+2,c
  5488  0023A2  0E00               	movlw	0
  5489  0023A4  6E16               	movwf	?__tdiv_to_l_+3,c
  5490  0023A6  0012               	return	
  5491  0023A8                     l2943:
  5492  0023A8  C018  F019         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5493  0023AC  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5494  0023AE  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5495  0023B0  3417               	rlcf	__tdiv_to_l_@f2+1,w,c
  5496  0023B2  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5497  0023B4  E301               	bnc	u2471
  5498  0023B6  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5499  0023B8                     u2471:
  5500  0023B8  5019               	movf	??__tdiv_to_l_,w,c
  5501  0023BA  6E20               	movwf	__tdiv_to_l_@cntr,c
  5502  0023BC  5020               	movf	__tdiv_to_l_@cntr,w,c
  5503  0023BE  A4D8               	btfss	status,2,c
  5504  0023C0  D009               	goto	l2949
  5505  0023C2  0E00               	movlw	0
  5506  0023C4  6E13               	movwf	?__tdiv_to_l_,c
  5507  0023C6  0E00               	movlw	0
  5508  0023C8  6E14               	movwf	?__tdiv_to_l_+1,c
  5509  0023CA  0E00               	movlw	0
  5510  0023CC  6E15               	movwf	?__tdiv_to_l_+2,c
  5511  0023CE  0E00               	movlw	0
  5512  0023D0  6E16               	movwf	?__tdiv_to_l_+3,c
  5513  0023D2  0012               	return	
  5514  0023D4                     l2949:
  5515  0023D4  8E14               	bsf	__tdiv_to_l_@f1+1,7,c
  5516  0023D6  0EFF               	movlw	255
  5517  0023D8  1613               	andwf	__tdiv_to_l_@f1,f,c
  5518  0023DA  0EFF               	movlw	255
  5519  0023DC  1614               	andwf	__tdiv_to_l_@f1+1,f,c
  5520  0023DE  0E00               	movlw	0
  5521  0023E0  1615               	andwf	__tdiv_to_l_@f1+2,f,c
  5522  0023E2  8E17               	bsf	__tdiv_to_l_@f2+1,7,c
  5523  0023E4  0EFF               	movlw	255
  5524  0023E6  1616               	andwf	__tdiv_to_l_@f2,f,c
  5525  0023E8  0EFF               	movlw	255
  5526  0023EA  1617               	andwf	__tdiv_to_l_@f2+1,f,c
  5527  0023EC  0E00               	movlw	0
  5528  0023EE  1618               	andwf	__tdiv_to_l_@f2+2,f,c
  5529  0023F0  0E00               	movlw	0
  5530  0023F2  6E1C               	movwf	__tdiv_to_l_@quot,c
  5531  0023F4  0E00               	movlw	0
  5532  0023F6  6E1D               	movwf	__tdiv_to_l_@quot+1,c
  5533  0023F8  0E00               	movlw	0
  5534  0023FA  6E1E               	movwf	__tdiv_to_l_@quot+2,c
  5535  0023FC  0E00               	movlw	0
  5536  0023FE  6E1F               	movwf	__tdiv_to_l_@quot+3,c
  5537  002400  0E7F               	movlw	127
  5538  002402  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  5539  002404  5020               	movf	__tdiv_to_l_@cntr,w,c
  5540  002406  0F98               	addlw	152
  5541  002408  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  5542  00240A  0E18               	movlw	24
  5543  00240C  6E20               	movwf	__tdiv_to_l_@cntr,c
  5544  00240E                     l783:
  5545  00240E  90D8               	bcf	status,0,c
  5546  002410  361C               	rlcf	__tdiv_to_l_@quot,f,c
  5547  002412  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  5548  002414  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  5549  002416  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  5550  002418  5016               	movf	__tdiv_to_l_@f2,w,c
  5551  00241A  5C13               	subwf	__tdiv_to_l_@f1,w,c
  5552  00241C  5017               	movf	__tdiv_to_l_@f2+1,w,c
  5553  00241E  5814               	subwfb	__tdiv_to_l_@f1+1,w,c
  5554  002420  5018               	movf	__tdiv_to_l_@f2+2,w,c
  5555  002422  5815               	subwfb	__tdiv_to_l_@f1+2,w,c
  5556  002424  A0D8               	btfss	status,0,c
  5557  002426  D007               	goto	l784
  5558  002428  5016               	movf	__tdiv_to_l_@f2,w,c
  5559  00242A  5E13               	subwf	__tdiv_to_l_@f1,f,c
  5560  00242C  5017               	movf	__tdiv_to_l_@f2+1,w,c
  5561  00242E  5A14               	subwfb	__tdiv_to_l_@f1+1,f,c
  5562  002430  5018               	movf	__tdiv_to_l_@f2+2,w,c
  5563  002432  5A15               	subwfb	__tdiv_to_l_@f1+2,f,c
  5564  002434  801C               	bsf	__tdiv_to_l_@quot,0,c
  5565  002436                     l784:
  5566  002436  90D8               	bcf	status,0,c
  5567  002438  3613               	rlcf	__tdiv_to_l_@f1,f,c
  5568  00243A  3614               	rlcf	__tdiv_to_l_@f1+1,f,c
  5569  00243C  3615               	rlcf	__tdiv_to_l_@f1+2,f,c
  5570  00243E  2E20               	decfsz	__tdiv_to_l_@cntr,f,c
  5571  002440  D7E6               	goto	l783
  5572  002442  AE21               	btfss	__tdiv_to_l_@exp1,7,c
  5573  002444  D016               	goto	l2983
  5574  002446  5021               	movf	__tdiv_to_l_@exp1,w,c
  5575  002448  0A80               	xorlw	128
  5576  00244A  0F97               	addlw	151
  5577  00244C  B0D8               	btfsc	status,0,c
  5578  00244E  D009               	goto	l2979
  5579  002450  0E00               	movlw	0
  5580  002452  6E13               	movwf	?__tdiv_to_l_,c
  5581  002454  0E00               	movlw	0
  5582  002456  6E14               	movwf	?__tdiv_to_l_+1,c
  5583  002458  0E00               	movlw	0
  5584  00245A  6E15               	movwf	?__tdiv_to_l_+2,c
  5585  00245C  0E00               	movlw	0
  5586  00245E  6E16               	movwf	?__tdiv_to_l_+3,c
  5587  002460  0012               	return	
  5588  002462                     l2979:
  5589  002462  90D8               	bcf	status,0,c
  5590  002464  321F               	rrcf	__tdiv_to_l_@quot+3,f,c
  5591  002466  321E               	rrcf	__tdiv_to_l_@quot+2,f,c
  5592  002468  321D               	rrcf	__tdiv_to_l_@quot+1,f,c
  5593  00246A  321C               	rrcf	__tdiv_to_l_@quot,f,c
  5594  00246C  3E21               	incfsz	__tdiv_to_l_@exp1,f,c
  5595  00246E  D7F9               	goto	l2979
  5596  002470  D015               	goto	l790
  5597  002472                     l2983:
  5598  002472  0E17               	movlw	23
  5599  002474  6421               	cpfsgt	__tdiv_to_l_@exp1,c
  5600  002476  D00F               	goto	l2991
  5601  002478  0E00               	movlw	0
  5602  00247A  6E13               	movwf	?__tdiv_to_l_,c
  5603  00247C  0E00               	movlw	0
  5604  00247E  6E14               	movwf	?__tdiv_to_l_+1,c
  5605  002480  0E00               	movlw	0
  5606  002482  6E15               	movwf	?__tdiv_to_l_+2,c
  5607  002484  0E00               	movlw	0
  5608  002486  6E16               	movwf	?__tdiv_to_l_+3,c
  5609  002488  0012               	return	
  5610  00248A                     l2989:
  5611  00248A  90D8               	bcf	status,0,c
  5612  00248C  361C               	rlcf	__tdiv_to_l_@quot,f,c
  5613  00248E  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  5614  002490  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  5615  002492  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  5616  002494  0621               	decf	__tdiv_to_l_@exp1,f,c
  5617  002496                     l2991:
  5618  002496  5021               	movf	__tdiv_to_l_@exp1,w,c
  5619  002498  A4D8               	btfss	status,2,c
  5620  00249A  D7F7               	goto	l2989
  5621  00249C                     l790:
  5622  00249C  C01C  F013         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5623  0024A0  C01D  F014         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5624  0024A4  C01E  F015         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5625  0024A8  C01F  F016         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5626  0024AC  0012               	return		;funcret
  5627  0024AE                     __end_of__tdiv_to_l_:
  5628                           	opt stack 0
  5629                           tblptru	equ	0xFF8
  5630                           tblptrh	equ	0xFF7
  5631                           tblptrl	equ	0xFF6
  5632                           tablat	equ	0xFF5
  5633                           prodh	equ	0xFF4
  5634                           prodl	equ	0xFF3
  5635                           intcon	equ	0xFF2
  5636                           intcon2	equ	0xFF1
  5637                           intcon3	equ	0xFF0
  5638                           postinc0	equ	0xFEE
  5639                           wreg	equ	0xFE8
  5640                           indf2	equ	0xFDF
  5641                           postinc2	equ	0xFDE
  5642                           postdec2	equ	0xFDD
  5643                           fsr2h	equ	0xFDA
  5644                           fsr2l	equ	0xFD9
  5645                           status	equ	0xFD8
  5646                           
  5647 ;; *************** function __div_to_l_ *****************
  5648 ;; Defined at:
  5649 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fldivl.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;  f1              3   18[COMRAM] unsigned long 
  5652 ;;  f2              3   21[COMRAM] unsigned long 
  5653 ;; Auto vars:     Size  Location     Type
  5654 ;;  quot            4   24[COMRAM] unsigned long 
  5655 ;;  exp1            1   29[COMRAM] unsigned char 
  5656 ;;  cntr            1   28[COMRAM] unsigned char 
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  4   18[COMRAM] unsigned long 
  5659 ;; Registers used:
  5660 ;;		wreg, status,2, status,0
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5666 ;;      Params:         6       0       0       0       0       0       0       0       0
  5667 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5668 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5669 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5670 ;;Total ram usage:       12 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; Hardware stack levels required when called:    3
  5673 ;; This function calls:
  5674 ;;		Nothing
  5675 ;; This function is called by:
  5676 ;;		_sprintf
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           	psect	text18
  5681  0024AE                     __ptext18:
  5682                           	opt stack 0
  5683  0024AE                     __div_to_l_:
  5684                           	opt stack 26
  5685                           
  5686                           ;incstack = 0
  5687  0024AE  3415               	rlcf	__div_to_l_@f1+2,w,c
  5688  0024B0  3416               	rlcf	__div_to_l_@f1+3,w,c
  5689  0024B2  6E1E               	movwf	__div_to_l_@exp1,c
  5690  0024B4  501E               	movf	__div_to_l_@exp1,w,c
  5691  0024B6  A4D8               	btfss	status,2,c
  5692  0024B8  D009               	goto	l2999
  5693  0024BA  0E00               	movlw	0
  5694  0024BC  6E13               	movwf	?__div_to_l_,c
  5695  0024BE  0E00               	movlw	0
  5696  0024C0  6E14               	movwf	?__div_to_l_+1,c
  5697  0024C2  0E00               	movlw	0
  5698  0024C4  6E15               	movwf	?__div_to_l_+2,c
  5699  0024C6  0E00               	movlw	0
  5700  0024C8  6E16               	movwf	?__div_to_l_+3,c
  5701  0024CA  0012               	return	
  5702  0024CC                     l2999:
  5703  0024CC  3418               	rlcf	__div_to_l_@f2+2,w,c
  5704  0024CE  3419               	rlcf	__div_to_l_@f2+3,w,c
  5705  0024D0  6E1D               	movwf	__div_to_l_@cntr,c
  5706  0024D2  501D               	movf	__div_to_l_@cntr,w,c
  5707  0024D4  A4D8               	btfss	status,2,c
  5708  0024D6  D009               	goto	l3005
  5709  0024D8  0E00               	movlw	0
  5710  0024DA  6E13               	movwf	?__div_to_l_,c
  5711  0024DC  0E00               	movlw	0
  5712  0024DE  6E14               	movwf	?__div_to_l_+1,c
  5713  0024E0  0E00               	movlw	0
  5714  0024E2  6E15               	movwf	?__div_to_l_+2,c
  5715  0024E4  0E00               	movlw	0
  5716  0024E6  6E16               	movwf	?__div_to_l_+3,c
  5717  0024E8  0012               	return	
  5718  0024EA                     l3005:
  5719  0024EA  8E15               	bsf	__div_to_l_@f1+2,7,c
  5720  0024EC  0EFF               	movlw	255
  5721  0024EE  1613               	andwf	__div_to_l_@f1,f,c
  5722  0024F0  0EFF               	movlw	255
  5723  0024F2  1614               	andwf	__div_to_l_@f1+1,f,c
  5724  0024F4  0EFF               	movlw	255
  5725  0024F6  1615               	andwf	__div_to_l_@f1+2,f,c
  5726  0024F8  0E00               	movlw	0
  5727  0024FA  1616               	andwf	__div_to_l_@f1+3,f,c
  5728  0024FC  8E18               	bsf	__div_to_l_@f2+2,7,c
  5729  0024FE  0EFF               	movlw	255
  5730  002500  1616               	andwf	__div_to_l_@f2,f,c
  5731  002502  0EFF               	movlw	255
  5732  002504  1617               	andwf	__div_to_l_@f2+1,f,c
  5733  002506  0EFF               	movlw	255
  5734  002508  1618               	andwf	__div_to_l_@f2+2,f,c
  5735  00250A  0E00               	movlw	0
  5736  00250C  1619               	andwf	__div_to_l_@f2+3,f,c
  5737  00250E  0E00               	movlw	0
  5738  002510  6E19               	movwf	__div_to_l_@quot,c
  5739  002512  0E00               	movlw	0
  5740  002514  6E1A               	movwf	__div_to_l_@quot+1,c
  5741  002516  0E00               	movlw	0
  5742  002518  6E1B               	movwf	__div_to_l_@quot+2,c
  5743  00251A  0E00               	movlw	0
  5744  00251C  6E1C               	movwf	__div_to_l_@quot+3,c
  5745  00251E  0E7F               	movlw	127
  5746  002520  5E1E               	subwf	__div_to_l_@exp1,f,c
  5747  002522  501D               	movf	__div_to_l_@cntr,w,c
  5748  002524  0FA0               	addlw	160
  5749  002526  5E1E               	subwf	__div_to_l_@exp1,f,c
  5750  002528  0E20               	movlw	32
  5751  00252A  6E1D               	movwf	__div_to_l_@cntr,c
  5752  00252C                     l3019:
  5753  00252C  90D8               	bcf	status,0,c
  5754  00252E  3619               	rlcf	__div_to_l_@quot,f,c
  5755  002530  361A               	rlcf	__div_to_l_@quot+1,f,c
  5756  002532  361B               	rlcf	__div_to_l_@quot+2,f,c
  5757  002534  361C               	rlcf	__div_to_l_@quot+3,f,c
  5758  002536  5016               	movf	__div_to_l_@f2,w,c
  5759  002538  5C13               	subwf	__div_to_l_@f1,w,c
  5760  00253A  5017               	movf	__div_to_l_@f2+1,w,c
  5761  00253C  5814               	subwfb	__div_to_l_@f1+1,w,c
  5762  00253E  5018               	movf	__div_to_l_@f2+2,w,c
  5763  002540  5815               	subwfb	__div_to_l_@f1+2,w,c
  5764  002542  5019               	movf	__div_to_l_@f2+3,w,c
  5765  002544  5816               	subwfb	__div_to_l_@f1+3,w,c
  5766  002546  A0D8               	btfss	status,0,c
  5767  002548  D009               	goto	l3027
  5768  00254A  5016               	movf	__div_to_l_@f2,w,c
  5769  00254C  5E13               	subwf	__div_to_l_@f1,f,c
  5770  00254E  5017               	movf	__div_to_l_@f2+1,w,c
  5771  002550  5A14               	subwfb	__div_to_l_@f1+1,f,c
  5772  002552  5018               	movf	__div_to_l_@f2+2,w,c
  5773  002554  5A15               	subwfb	__div_to_l_@f1+2,f,c
  5774  002556  5019               	movf	__div_to_l_@f2+3,w,c
  5775  002558  5A16               	subwfb	__div_to_l_@f1+3,f,c
  5776  00255A  8019               	bsf	__div_to_l_@quot,0,c
  5777  00255C                     l3027:
  5778  00255C  90D8               	bcf	status,0,c
  5779  00255E  3613               	rlcf	__div_to_l_@f1,f,c
  5780  002560  3614               	rlcf	__div_to_l_@f1+1,f,c
  5781  002562  3615               	rlcf	__div_to_l_@f1+2,f,c
  5782  002564  3616               	rlcf	__div_to_l_@f1+3,f,c
  5783  002566  2E1D               	decfsz	__div_to_l_@cntr,f,c
  5784  002568  D7E1               	goto	l3019
  5785  00256A  AE1E               	btfss	__div_to_l_@exp1,7,c
  5786  00256C  D016               	goto	l3043
  5787  00256E  501E               	movf	__div_to_l_@exp1,w,c
  5788  002570  0A80               	xorlw	128
  5789  002572  0F9F               	addlw	159
  5790  002574  B0D8               	btfsc	status,0,c
  5791  002576  D009               	goto	l3039
  5792  002578  0E00               	movlw	0
  5793  00257A  6E13               	movwf	?__div_to_l_,c
  5794  00257C  0E00               	movlw	0
  5795  00257E  6E14               	movwf	?__div_to_l_+1,c
  5796  002580  0E00               	movlw	0
  5797  002582  6E15               	movwf	?__div_to_l_+2,c
  5798  002584  0E00               	movlw	0
  5799  002586  6E16               	movwf	?__div_to_l_+3,c
  5800  002588  0012               	return	
  5801  00258A                     l3039:
  5802  00258A  90D8               	bcf	status,0,c
  5803  00258C  321C               	rrcf	__div_to_l_@quot+3,f,c
  5804  00258E  321B               	rrcf	__div_to_l_@quot+2,f,c
  5805  002590  321A               	rrcf	__div_to_l_@quot+1,f,c
  5806  002592  3219               	rrcf	__div_to_l_@quot,f,c
  5807  002594  3E1E               	incfsz	__div_to_l_@exp1,f,c
  5808  002596  D7F9               	goto	l3039
  5809  002598  D015               	goto	l686
  5810  00259A                     l3043:
  5811  00259A  0E1F               	movlw	31
  5812  00259C  641E               	cpfsgt	__div_to_l_@exp1,c
  5813  00259E  D00F               	goto	l3051
  5814  0025A0  0E00               	movlw	0
  5815  0025A2  6E13               	movwf	?__div_to_l_,c
  5816  0025A4  0E00               	movlw	0
  5817  0025A6  6E14               	movwf	?__div_to_l_+1,c
  5818  0025A8  0E00               	movlw	0
  5819  0025AA  6E15               	movwf	?__div_to_l_+2,c
  5820  0025AC  0E00               	movlw	0
  5821  0025AE  6E16               	movwf	?__div_to_l_+3,c
  5822  0025B0  0012               	return	
  5823  0025B2                     l3049:
  5824  0025B2  90D8               	bcf	status,0,c
  5825  0025B4  3619               	rlcf	__div_to_l_@quot,f,c
  5826  0025B6  361A               	rlcf	__div_to_l_@quot+1,f,c
  5827  0025B8  361B               	rlcf	__div_to_l_@quot+2,f,c
  5828  0025BA  361C               	rlcf	__div_to_l_@quot+3,f,c
  5829  0025BC  061E               	decf	__div_to_l_@exp1,f,c
  5830  0025BE                     l3051:
  5831  0025BE  501E               	movf	__div_to_l_@exp1,w,c
  5832  0025C0  A4D8               	btfss	status,2,c
  5833  0025C2  D7F7               	goto	l3049
  5834  0025C4                     l686:
  5835  0025C4  C019  F013         	movff	__div_to_l_@quot,?__div_to_l_
  5836  0025C8  C01A  F014         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5837  0025CC  C01B  F015         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5838  0025D0  C01C  F016         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5839  0025D4  0012               	return		;funcret
  5840  0025D6                     __end_of__div_to_l_:
  5841                           	opt stack 0
  5842                           tblptru	equ	0xFF8
  5843                           tblptrh	equ	0xFF7
  5844                           tblptrl	equ	0xFF6
  5845                           tablat	equ	0xFF5
  5846                           prodh	equ	0xFF4
  5847                           prodl	equ	0xFF3
  5848                           intcon	equ	0xFF2
  5849                           intcon2	equ	0xFF1
  5850                           intcon3	equ	0xFF0
  5851                           postinc0	equ	0xFEE
  5852                           wreg	equ	0xFE8
  5853                           indf2	equ	0xFDF
  5854                           postinc2	equ	0xFDE
  5855                           postdec2	equ	0xFDD
  5856                           fsr2h	equ	0xFDA
  5857                           fsr2l	equ	0xFD9
  5858                           status	equ	0xFD8
  5859                           
  5860 ;; *************** function ___lltoft *****************
  5861 ;; Defined at:
  5862 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;  c               4   53[COMRAM] unsigned long 
  5865 ;; Auto vars:     Size  Location     Type
  5866 ;;  exp             1   57[COMRAM] unsigned char 
  5867 ;; Return value:  Size  Location     Type
  5868 ;;                  3   53[COMRAM] float 
  5869 ;; Registers used:
  5870 ;;		wreg, status,2, status,0, cstack
  5871 ;; Tracked objects:
  5872 ;;		On entry : 0/0
  5873 ;;		On exit  : 0/0
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5876 ;;      Params:         4       0       0       0       0       0       0       0       0
  5877 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5878 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5879 ;;      Totals:         5       4       0       0       0       0       0       0       0
  5880 ;;Total ram usage:        9 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; Hardware stack levels required when called:    4
  5883 ;; This function calls:
  5884 ;;		___ftpack
  5885 ;; This function is called by:
  5886 ;;		_sprintf
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           	psect	text19
  5891  002AC4                     __ptext19:
  5892                           	opt stack 0
  5893  002AC4                     ___lltoft:
  5894                           	opt stack 25
  5895                           
  5896                           ;incstack = 0
  5897  002AC4  0E8E               	movlw	142
  5898  002AC6  6E3A               	movwf	___lltoft@exp,c
  5899  002AC8  D006               	goto	l4073
  5900  002ACA                     l4071:
  5901  002ACA  90D8               	bcf	status,0,c
  5902  002ACC  3239               	rrcf	___lltoft@c+3,f,c
  5903  002ACE  3238               	rrcf	___lltoft@c+2,f,c
  5904  002AD0  3237               	rrcf	___lltoft@c+1,f,c
  5905  002AD2  3236               	rrcf	___lltoft@c,f,c
  5906  002AD4  2A3A               	incf	___lltoft@exp,f,c
  5907  002AD6                     l4073:
  5908  002AD6  0E00               	movlw	0
  5909  002AD8  1436               	andwf	___lltoft@c,w,c
  5910  002ADA  0100               	movlb	0	; () banked
  5911  002ADC  6F60               	movwf	??___lltoft& (0+255),b
  5912  002ADE  0E00               	movlw	0
  5913  002AE0  1437               	andwf	___lltoft@c+1,w,c
  5914  002AE2  0100               	movlb	0	; () banked
  5915  002AE4  6F61               	movwf	(??___lltoft+1)& (0+255),b
  5916  002AE6  0E00               	movlw	0
  5917  002AE8  1438               	andwf	___lltoft@c+2,w,c
  5918  002AEA  0100               	movlb	0	; () banked
  5919  002AEC  6F62               	movwf	(??___lltoft+2)& (0+255),b
  5920  002AEE  0EFF               	movlw	255
  5921  002AF0  1439               	andwf	___lltoft@c+3,w,c
  5922  002AF2  0100               	movlb	0	; () banked
  5923  002AF4  6F63               	movwf	(??___lltoft+3)& (0+255),b
  5924  002AF6  0100               	movlb	0	; () banked
  5925  002AF8  5160               	movf	??___lltoft& (0+255),w,b
  5926  002AFA  0100               	movlb	0	; () banked
  5927  002AFC  1161               	iorwf	(??___lltoft+1)& (0+255),w,b
  5928  002AFE  0100               	movlb	0	; () banked
  5929  002B00  1162               	iorwf	(??___lltoft+2)& (0+255),w,b
  5930  002B02  0100               	movlb	0	; () banked
  5931  002B04  1163               	iorwf	(??___lltoft+3)& (0+255),w,b
  5932  002B06  A4D8               	btfss	status,2,c
  5933  002B08  D7E0               	goto	l4071
  5934                           
  5935                           ; BSR set to: 0
  5936                           
  5937                           ; BSR set to: 0
  5938  002B0A  C036  F013         	movff	___lltoft@c,___ftpack@arg
  5939  002B0E  C037  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  5940  002B12  C038  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  5941  002B16  C03A  F016         	movff	___lltoft@exp,___ftpack@exp
  5942  002B1A  0E00               	movlw	0
  5943  002B1C  6E17               	movwf	___ftpack@sign,c
  5944  002B1E  ECC9  F013         	call	___ftpack	;wreg free
  5945  002B22  C013  F036         	movff	?___ftpack,?___lltoft
  5946  002B26  C014  F037         	movff	?___ftpack+1,?___lltoft+1
  5947  002B2A  C015  F038         	movff	?___ftpack+2,?___lltoft+2
  5948  002B2E  0012               	return	
  5949  002B30                     __end_of___lltoft:
  5950                           	opt stack 0
  5951                           tblptru	equ	0xFF8
  5952                           tblptrh	equ	0xFF7
  5953                           tblptrl	equ	0xFF6
  5954                           tablat	equ	0xFF5
  5955                           prodh	equ	0xFF4
  5956                           prodl	equ	0xFF3
  5957                           intcon	equ	0xFF2
  5958                           intcon2	equ	0xFF1
  5959                           intcon3	equ	0xFF0
  5960                           postinc0	equ	0xFEE
  5961                           wreg	equ	0xFE8
  5962                           indf2	equ	0xFDF
  5963                           postinc2	equ	0xFDE
  5964                           postdec2	equ	0xFDD
  5965                           fsr2h	equ	0xFDA
  5966                           fsr2l	equ	0xFD9
  5967                           status	equ	0xFD8
  5968                           
  5969 ;; *************** function ___llmod *****************
  5970 ;; Defined at:
  5971 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  5972 ;; Parameters:    Size  Location     Type
  5973 ;;  dividend        4   18[COMRAM] unsigned long 
  5974 ;;  divisor         4   22[COMRAM] unsigned long 
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;  counter         1   26[COMRAM] unsigned char 
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  4   18[COMRAM] unsigned long 
  5979 ;; Registers used:
  5980 ;;		wreg, status,2, status,0
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5986 ;;      Params:         8       0       0       0       0       0       0       0       0
  5987 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5988 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5989 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5990 ;;Total ram usage:        9 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    3
  5993 ;; This function calls:
  5994 ;;		Nothing
  5995 ;; This function is called by:
  5996 ;;		_sprintf
  5997 ;; This function uses a non-reentrant model
  5998 ;;
  5999                           
  6000                           	psect	text20
  6001  002B30                     __ptext20:
  6002                           	opt stack 0
  6003  002B30                     ___llmod:
  6004                           	opt stack 26
  6005                           
  6006                           ;incstack = 0
  6007  002B30  5017               	movf	___llmod@divisor,w,c
  6008  002B32  1018               	iorwf	___llmod@divisor+1,w,c
  6009  002B34  1019               	iorwf	___llmod@divisor+2,w,c
  6010  002B36  101A               	iorwf	___llmod@divisor+3,w,c
  6011  002B38  B4D8               	btfsc	status,2,c
  6012  002B3A  D024               	goto	l875
  6013  002B3C  0E01               	movlw	1
  6014  002B3E  6E1B               	movwf	___llmod@counter,c
  6015  002B40  D006               	goto	l3203
  6016  002B42                     l3201:
  6017  002B42  90D8               	bcf	status,0,c
  6018  002B44  3617               	rlcf	___llmod@divisor,f,c
  6019  002B46  3618               	rlcf	___llmod@divisor+1,f,c
  6020  002B48  3619               	rlcf	___llmod@divisor+2,f,c
  6021  002B4A  361A               	rlcf	___llmod@divisor+3,f,c
  6022  002B4C  2A1B               	incf	___llmod@counter,f,c
  6023  002B4E                     l3203:
  6024  002B4E  AE1A               	btfss	___llmod@divisor+3,7,c
  6025  002B50  D7F8               	goto	l3201
  6026  002B52                     l3205:
  6027  002B52  5017               	movf	___llmod@divisor,w,c
  6028  002B54  5C13               	subwf	___llmod@dividend,w,c
  6029  002B56  5018               	movf	___llmod@divisor+1,w,c
  6030  002B58  5814               	subwfb	___llmod@dividend+1,w,c
  6031  002B5A  5019               	movf	___llmod@divisor+2,w,c
  6032  002B5C  5815               	subwfb	___llmod@dividend+2,w,c
  6033  002B5E  501A               	movf	___llmod@divisor+3,w,c
  6034  002B60  5816               	subwfb	___llmod@dividend+3,w,c
  6035  002B62  A0D8               	btfss	status,0,c
  6036  002B64  D008               	goto	l3209
  6037  002B66  5017               	movf	___llmod@divisor,w,c
  6038  002B68  5E13               	subwf	___llmod@dividend,f,c
  6039  002B6A  5018               	movf	___llmod@divisor+1,w,c
  6040  002B6C  5A14               	subwfb	___llmod@dividend+1,f,c
  6041  002B6E  5019               	movf	___llmod@divisor+2,w,c
  6042  002B70  5A15               	subwfb	___llmod@dividend+2,f,c
  6043  002B72  501A               	movf	___llmod@divisor+3,w,c
  6044  002B74  5A16               	subwfb	___llmod@dividend+3,f,c
  6045  002B76                     l3209:
  6046  002B76  90D8               	bcf	status,0,c
  6047  002B78  321A               	rrcf	___llmod@divisor+3,f,c
  6048  002B7A  3219               	rrcf	___llmod@divisor+2,f,c
  6049  002B7C  3218               	rrcf	___llmod@divisor+1,f,c
  6050  002B7E  3217               	rrcf	___llmod@divisor,f,c
  6051  002B80  2E1B               	decfsz	___llmod@counter,f,c
  6052  002B82  D7E7               	goto	l3205
  6053  002B84                     l875:
  6054  002B84  C013  F013         	movff	___llmod@dividend,?___llmod
  6055  002B88  C014  F014         	movff	___llmod@dividend+1,?___llmod+1
  6056  002B8C  C015  F015         	movff	___llmod@dividend+2,?___llmod+2
  6057  002B90  C016  F016         	movff	___llmod@dividend+3,?___llmod+3
  6058  002B94  0012               	return		;funcret
  6059  002B96                     __end_of___llmod:
  6060                           	opt stack 0
  6061                           tblptru	equ	0xFF8
  6062                           tblptrh	equ	0xFF7
  6063                           tblptrl	equ	0xFF6
  6064                           tablat	equ	0xFF5
  6065                           prodh	equ	0xFF4
  6066                           prodl	equ	0xFF3
  6067                           intcon	equ	0xFF2
  6068                           intcon2	equ	0xFF1
  6069                           intcon3	equ	0xFF0
  6070                           postinc0	equ	0xFEE
  6071                           wreg	equ	0xFE8
  6072                           indf2	equ	0xFDF
  6073                           postinc2	equ	0xFDE
  6074                           postdec2	equ	0xFDD
  6075                           fsr2h	equ	0xFDA
  6076                           fsr2l	equ	0xFD9
  6077                           status	equ	0xFD8
  6078                           
  6079 ;; *************** function ___lldiv *****************
  6080 ;; Defined at:
  6081 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  6082 ;; Parameters:    Size  Location     Type
  6083 ;;  dividend        4   18[COMRAM] unsigned long 
  6084 ;;  divisor         4   22[COMRAM] unsigned long 
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;  quotient        4   26[COMRAM] unsigned long 
  6087 ;;  counter         1   30[COMRAM] unsigned char 
  6088 ;; Return value:  Size  Location     Type
  6089 ;;                  4   18[COMRAM] unsigned long 
  6090 ;; Registers used:
  6091 ;;		wreg, status,2, status,0
  6092 ;; Tracked objects:
  6093 ;;		On entry : 0/0
  6094 ;;		On exit  : 0/0
  6095 ;;		Unchanged: 0/0
  6096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6097 ;;      Params:         8       0       0       0       0       0       0       0       0
  6098 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6099 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6100 ;;      Totals:        13       0       0       0       0       0       0       0       0
  6101 ;;Total ram usage:       13 bytes
  6102 ;; Hardware stack levels used:    1
  6103 ;; Hardware stack levels required when called:    3
  6104 ;; This function calls:
  6105 ;;		Nothing
  6106 ;; This function is called by:
  6107 ;;		_sprintf
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           	psect	text21
  6112  002956                     __ptext21:
  6113                           	opt stack 0
  6114  002956                     ___lldiv:
  6115                           	opt stack 26
  6116                           
  6117                           ;incstack = 0
  6118  002956  0E00               	movlw	0
  6119  002958  6E1B               	movwf	___lldiv@quotient,c
  6120  00295A  0E00               	movlw	0
  6121  00295C  6E1C               	movwf	___lldiv@quotient+1,c
  6122  00295E  0E00               	movlw	0
  6123  002960  6E1D               	movwf	___lldiv@quotient+2,c
  6124  002962  0E00               	movlw	0
  6125  002964  6E1E               	movwf	___lldiv@quotient+3,c
  6126  002966  5017               	movf	___lldiv@divisor,w,c
  6127  002968  1018               	iorwf	___lldiv@divisor+1,w,c
  6128  00296A  1019               	iorwf	___lldiv@divisor+2,w,c
  6129  00296C  101A               	iorwf	___lldiv@divisor+3,w,c
  6130  00296E  B4D8               	btfsc	status,2,c
  6131  002970  D02A               	goto	l865
  6132  002972  0E01               	movlw	1
  6133  002974  6E1F               	movwf	___lldiv@counter,c
  6134  002976  D006               	goto	l3183
  6135  002978                     l3181:
  6136  002978  90D8               	bcf	status,0,c
  6137  00297A  3617               	rlcf	___lldiv@divisor,f,c
  6138  00297C  3618               	rlcf	___lldiv@divisor+1,f,c
  6139  00297E  3619               	rlcf	___lldiv@divisor+2,f,c
  6140  002980  361A               	rlcf	___lldiv@divisor+3,f,c
  6141  002982  2A1F               	incf	___lldiv@counter,f,c
  6142  002984                     l3183:
  6143  002984  AE1A               	btfss	___lldiv@divisor+3,7,c
  6144  002986  D7F8               	goto	l3181
  6145  002988                     l3185:
  6146  002988  90D8               	bcf	status,0,c
  6147  00298A  361B               	rlcf	___lldiv@quotient,f,c
  6148  00298C  361C               	rlcf	___lldiv@quotient+1,f,c
  6149  00298E  361D               	rlcf	___lldiv@quotient+2,f,c
  6150  002990  361E               	rlcf	___lldiv@quotient+3,f,c
  6151  002992  5017               	movf	___lldiv@divisor,w,c
  6152  002994  5C13               	subwf	___lldiv@dividend,w,c
  6153  002996  5018               	movf	___lldiv@divisor+1,w,c
  6154  002998  5814               	subwfb	___lldiv@dividend+1,w,c
  6155  00299A  5019               	movf	___lldiv@divisor+2,w,c
  6156  00299C  5815               	subwfb	___lldiv@dividend+2,w,c
  6157  00299E  501A               	movf	___lldiv@divisor+3,w,c
  6158  0029A0  5816               	subwfb	___lldiv@dividend+3,w,c
  6159  0029A2  A0D8               	btfss	status,0,c
  6160  0029A4  D009               	goto	l3193
  6161  0029A6  5017               	movf	___lldiv@divisor,w,c
  6162  0029A8  5E13               	subwf	___lldiv@dividend,f,c
  6163  0029AA  5018               	movf	___lldiv@divisor+1,w,c
  6164  0029AC  5A14               	subwfb	___lldiv@dividend+1,f,c
  6165  0029AE  5019               	movf	___lldiv@divisor+2,w,c
  6166  0029B0  5A15               	subwfb	___lldiv@dividend+2,f,c
  6167  0029B2  501A               	movf	___lldiv@divisor+3,w,c
  6168  0029B4  5A16               	subwfb	___lldiv@dividend+3,f,c
  6169  0029B6  801B               	bsf	___lldiv@quotient,0,c
  6170  0029B8                     l3193:
  6171  0029B8  90D8               	bcf	status,0,c
  6172  0029BA  321A               	rrcf	___lldiv@divisor+3,f,c
  6173  0029BC  3219               	rrcf	___lldiv@divisor+2,f,c
  6174  0029BE  3218               	rrcf	___lldiv@divisor+1,f,c
  6175  0029C0  3217               	rrcf	___lldiv@divisor,f,c
  6176  0029C2  2E1F               	decfsz	___lldiv@counter,f,c
  6177  0029C4  D7E1               	goto	l3185
  6178  0029C6                     l865:
  6179  0029C6  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  6180  0029CA  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  6181  0029CE  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  6182  0029D2  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  6183  0029D6  0012               	return		;funcret
  6184  0029D8                     __end_of___lldiv:
  6185                           	opt stack 0
  6186                           tblptru	equ	0xFF8
  6187                           tblptrh	equ	0xFF7
  6188                           tblptrl	equ	0xFF6
  6189                           tablat	equ	0xFF5
  6190                           prodh	equ	0xFF4
  6191                           prodl	equ	0xFF3
  6192                           intcon	equ	0xFF2
  6193                           intcon2	equ	0xFF1
  6194                           intcon3	equ	0xFF0
  6195                           postinc0	equ	0xFEE
  6196                           wreg	equ	0xFE8
  6197                           indf2	equ	0xFDF
  6198                           postinc2	equ	0xFDE
  6199                           postdec2	equ	0xFDD
  6200                           fsr2h	equ	0xFDA
  6201                           fsr2l	equ	0xFD9
  6202                           status	equ	0xFD8
  6203                           
  6204 ;; *************** function ___fttol *****************
  6205 ;; Defined at:
  6206 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  6207 ;; Parameters:    Size  Location     Type
  6208 ;;  f1              3   38[COMRAM] float 
  6209 ;; Auto vars:     Size  Location     Type
  6210 ;;  lval            4   48[COMRAM] unsigned long 
  6211 ;;  exp1            1   52[COMRAM] unsigned char 
  6212 ;;  sign1           1   47[COMRAM] unsigned char 
  6213 ;; Return value:  Size  Location     Type
  6214 ;;                  4   38[COMRAM] long 
  6215 ;; Registers used:
  6216 ;;		wreg, status,2, status,0
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6222 ;;      Params:         4       0       0       0       0       0       0       0       0
  6223 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6224 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6225 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6226 ;;Total ram usage:       15 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:    3
  6229 ;; This function calls:
  6230 ;;		Nothing
  6231 ;; This function is called by:
  6232 ;;		_sprintf
  6233 ;; This function uses a non-reentrant model
  6234 ;;
  6235                           
  6236                           	psect	text22
  6237  0025D6                     __ptext22:
  6238                           	opt stack 0
  6239  0025D6                     ___fttol:
  6240                           	opt stack 26
  6241                           
  6242                           ;incstack = 0
  6243  0025D6  C029  F02B         	movff	___fttol@f1+2,??___fttol
  6244  0025DA  6A2C               	clrf	(??___fttol+1)& (0+255),c
  6245  0025DC  6A2D               	clrf	(??___fttol+2)& (0+255),c
  6246  0025DE  3428               	rlcf	___fttol@f1+1,w,c
  6247  0025E0  362B               	rlcf	??___fttol& (0+255),f,c
  6248  0025E2  E301               	bnc	u2711
  6249  0025E4  802C               	bsf	(??___fttol+1)& (0+255),0,c
  6250  0025E6                     u2711:
  6251  0025E6  502B               	movf	??___fttol,w,c
  6252  0025E8  6E35               	movwf	___fttol@exp1,c
  6253  0025EA  5035               	movf	___fttol@exp1,w,c
  6254  0025EC  A4D8               	btfss	status,2,c
  6255  0025EE  D009               	goto	l3135
  6256  0025F0  0E00               	movlw	0
  6257  0025F2  6E27               	movwf	?___fttol,c
  6258  0025F4  0E00               	movlw	0
  6259  0025F6  6E28               	movwf	?___fttol+1,c
  6260  0025F8  0E00               	movlw	0
  6261  0025FA  6E29               	movwf	?___fttol+2,c
  6262  0025FC  0E00               	movlw	0
  6263  0025FE  6E2A               	movwf	?___fttol+3,c
  6264  002600  0012               	return	
  6265  002602                     l3135:
  6266  002602  0E17               	movlw	23
  6267  002604  6E2B               	movwf	??___fttol& (0+255),c
  6268  002606  C027  F02C         	movff	___fttol@f1,??___fttol+1
  6269  00260A  C028  F02D         	movff	___fttol@f1+1,??___fttol+2
  6270  00260E  C029  F02E         	movff	___fttol@f1+2,??___fttol+3
  6271  002612  282B               	incf	??___fttol,w,c
  6272  002614  6E2F               	movwf	(??___fttol+4)& (0+255),c
  6273  002616  D004               	goto	u2730
  6274  002618                     u2735:
  6275  002618  90D8               	bcf	status,0,c
  6276  00261A  322E               	rrcf	??___fttol+3,f,c
  6277  00261C  322D               	rrcf	??___fttol+2,f,c
  6278  00261E  322C               	rrcf	??___fttol+1,f,c
  6279  002620                     u2730:
  6280  002620  2E2F               	decfsz	(??___fttol+4)& (0+255),f,c
  6281  002622  D7FA               	goto	u2735
  6282  002624  502C               	movf	??___fttol+1,w,c
  6283  002626  6E30               	movwf	___fttol@sign1,c
  6284  002628  8E28               	bsf	___fttol@f1+1,7,c
  6285  00262A  0EFF               	movlw	255
  6286  00262C  1627               	andwf	___fttol@f1,f,c
  6287  00262E  0EFF               	movlw	255
  6288  002630  1628               	andwf	___fttol@f1+1,f,c
  6289  002632  0E00               	movlw	0
  6290  002634  1629               	andwf	___fttol@f1+2,f,c
  6291  002636  5027               	movf	___fttol@f1,w,c
  6292  002638  6E31               	movwf	___fttol@lval,c
  6293  00263A  5028               	movf	___fttol@f1+1,w,c
  6294  00263C  6E32               	movwf	___fttol@lval+1,c
  6295  00263E  5029               	movf	___fttol@f1+2,w,c
  6296  002640  6E33               	movwf	___fttol@lval+2,c
  6297  002642  6A34               	clrf	___fttol@lval+3,c
  6298  002644  0E8E               	movlw	142
  6299  002646  5E35               	subwf	___fttol@exp1,f,c
  6300  002648  AE35               	btfss	___fttol@exp1,7,c
  6301  00264A  D016               	goto	l3157
  6302  00264C  5035               	movf	___fttol@exp1,w,c
  6303  00264E  0A80               	xorlw	128
  6304  002650  0F8F               	addlw	143
  6305  002652  B0D8               	btfsc	status,0,c
  6306  002654  D009               	goto	l3153
  6307  002656  0E00               	movlw	0
  6308  002658  6E27               	movwf	?___fttol,c
  6309  00265A  0E00               	movlw	0
  6310  00265C  6E28               	movwf	?___fttol+1,c
  6311  00265E  0E00               	movlw	0
  6312  002660  6E29               	movwf	?___fttol+2,c
  6313  002662  0E00               	movlw	0
  6314  002664  6E2A               	movwf	?___fttol+3,c
  6315  002666  0012               	return	
  6316  002668                     l3153:
  6317  002668  90D8               	bcf	status,0,c
  6318  00266A  3234               	rrcf	___fttol@lval+3,f,c
  6319  00266C  3233               	rrcf	___fttol@lval+2,f,c
  6320  00266E  3232               	rrcf	___fttol@lval+1,f,c
  6321  002670  3231               	rrcf	___fttol@lval,f,c
  6322  002672  3E35               	incfsz	___fttol@exp1,f,c
  6323  002674  D7F9               	goto	l3153
  6324  002676  D015               	goto	l3167
  6325  002678                     l3157:
  6326  002678  0E17               	movlw	23
  6327  00267A  6435               	cpfsgt	___fttol@exp1,c
  6328  00267C  D00F               	goto	l3165
  6329  00267E  0E00               	movlw	0
  6330  002680  6E27               	movwf	?___fttol,c
  6331  002682  0E00               	movlw	0
  6332  002684  6E28               	movwf	?___fttol+1,c
  6333  002686  0E00               	movlw	0
  6334  002688  6E29               	movwf	?___fttol+2,c
  6335  00268A  0E00               	movlw	0
  6336  00268C  6E2A               	movwf	?___fttol+3,c
  6337  00268E  0012               	return	
  6338  002690                     l3163:
  6339  002690  90D8               	bcf	status,0,c
  6340  002692  3631               	rlcf	___fttol@lval,f,c
  6341  002694  3632               	rlcf	___fttol@lval+1,f,c
  6342  002696  3633               	rlcf	___fttol@lval+2,f,c
  6343  002698  3634               	rlcf	___fttol@lval+3,f,c
  6344  00269A  0635               	decf	___fttol@exp1,f,c
  6345  00269C                     l3165:
  6346  00269C  5035               	movf	___fttol@exp1,w,c
  6347  00269E  A4D8               	btfss	status,2,c
  6348  0026A0  D7F7               	goto	l3163
  6349  0026A2                     l3167:
  6350  0026A2  5030               	movf	___fttol@sign1,w,c
  6351  0026A4  B4D8               	btfsc	status,2,c
  6352  0026A6  D008               	goto	l3171
  6353  0026A8  1E34               	comf	___fttol@lval+3,f,c
  6354  0026AA  1E33               	comf	___fttol@lval+2,f,c
  6355  0026AC  1E32               	comf	___fttol@lval+1,f,c
  6356  0026AE  6C31               	negf	___fttol@lval,c
  6357  0026B0  0E00               	movlw	0
  6358  0026B2  2232               	addwfc	___fttol@lval+1,f,c
  6359  0026B4  2233               	addwfc	___fttol@lval+2,f,c
  6360  0026B6  2234               	addwfc	___fttol@lval+3,f,c
  6361  0026B8                     l3171:
  6362  0026B8  C031  F027         	movff	___fttol@lval,?___fttol
  6363  0026BC  C032  F028         	movff	___fttol@lval+1,?___fttol+1
  6364  0026C0  C033  F029         	movff	___fttol@lval+2,?___fttol+2
  6365  0026C4  C034  F02A         	movff	___fttol@lval+3,?___fttol+3
  6366  0026C8  0012               	return	
  6367  0026CA                     __end_of___fttol:
  6368                           	opt stack 0
  6369                           tblptru	equ	0xFF8
  6370                           tblptrh	equ	0xFF7
  6371                           tblptrl	equ	0xFF6
  6372                           tablat	equ	0xFF5
  6373                           prodh	equ	0xFF4
  6374                           prodl	equ	0xFF3
  6375                           intcon	equ	0xFF2
  6376                           intcon2	equ	0xFF1
  6377                           intcon3	equ	0xFF0
  6378                           postinc0	equ	0xFEE
  6379                           wreg	equ	0xFE8
  6380                           indf2	equ	0xFDF
  6381                           postinc2	equ	0xFDE
  6382                           postdec2	equ	0xFDD
  6383                           fsr2h	equ	0xFDA
  6384                           fsr2l	equ	0xFD9
  6385                           status	equ	0xFD8
  6386                           
  6387 ;; *************** function ___ftsub *****************
  6388 ;; Defined at:
  6389 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;  f1              3   44[BANK0 ] float 
  6392 ;;  f2              3   47[BANK0 ] float 
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;		None
  6395 ;; Return value:  Size  Location     Type
  6396 ;;                  3   44[BANK0 ] float 
  6397 ;; Registers used:
  6398 ;;		wreg, status,2, status,0, cstack
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6404 ;;      Params:         0       6       0       0       0       0       0       0       0
  6405 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6406 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6407 ;;      Totals:         0       6       0       0       0       0       0       0       0
  6408 ;;Total ram usage:        6 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:    5
  6411 ;; This function calls:
  6412 ;;		___ftadd
  6413 ;; This function is called by:
  6414 ;;		_sprintf
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           	psect	text23
  6419  002B96                     __ptext23:
  6420                           	opt stack 0
  6421  002B96                     ___ftsub:
  6422                           	opt stack 24
  6423                           
  6424                           ;incstack = 0
  6425  002B96  0100               	movlb	0	; () banked
  6426  002B98  518F               	movf	___ftsub@f2& (0+255),w,b
  6427  002B9A  0100               	movlb	0	; () banked
  6428  002B9C  1190               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  6429  002B9E  0100               	movlb	0	; () banked
  6430  002BA0  1191               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  6431  002BA2  B4D8               	btfsc	status,2,c
  6432  002BA4  D009               	goto	l3103
  6433                           
  6434                           ; BSR set to: 0
  6435  002BA6  0E00               	movlw	0
  6436  002BA8  0100               	movlb	0	; () banked
  6437  002BAA  1B8F               	xorwf	___ftsub@f2& (0+255),f,b
  6438  002BAC  0E00               	movlw	0
  6439  002BAE  0100               	movlb	0	; () banked
  6440  002BB0  1B90               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  6441  002BB2  0E80               	movlw	128
  6442  002BB4  0100               	movlb	0	; () banked
  6443  002BB6  1B91               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  6444  002BB8                     l3103:
  6445                           
  6446                           ; BSR set to: 0
  6447  002BB8  C08C  F080         	movff	___ftsub@f1,___ftadd@f1
  6448  002BBC  C08D  F081         	movff	___ftsub@f1+1,___ftadd@f1+1
  6449  002BC0  C08E  F082         	movff	___ftsub@f1+2,___ftadd@f1+2
  6450  002BC4  C08F  F083         	movff	___ftsub@f2,___ftadd@f2
  6451  002BC8  C090  F084         	movff	___ftsub@f2+1,___ftadd@f2+1
  6452  002BCC  C091  F085         	movff	___ftsub@f2+2,___ftadd@f2+2
  6453  002BD0  EC05  F00E         	call	___ftadd	;wreg free
  6454  002BD4  C080  F08C         	movff	?___ftadd,?___ftsub
  6455  002BD8  C081  F08D         	movff	?___ftadd+1,?___ftsub+1
  6456  002BDC  C082  F08E         	movff	?___ftadd+2,?___ftsub+2
  6457  002BE0  0012               	return	
  6458  002BE2                     __end_of___ftsub:
  6459                           	opt stack 0
  6460                           tblptru	equ	0xFF8
  6461                           tblptrh	equ	0xFF7
  6462                           tblptrl	equ	0xFF6
  6463                           tablat	equ	0xFF5
  6464                           prodh	equ	0xFF4
  6465                           prodl	equ	0xFF3
  6466                           intcon	equ	0xFF2
  6467                           intcon2	equ	0xFF1
  6468                           intcon3	equ	0xFF0
  6469                           postinc0	equ	0xFEE
  6470                           wreg	equ	0xFE8
  6471                           indf2	equ	0xFDF
  6472                           postinc2	equ	0xFDE
  6473                           postdec2	equ	0xFDD
  6474                           fsr2h	equ	0xFDA
  6475                           fsr2l	equ	0xFD9
  6476                           status	equ	0xFD8
  6477                           
  6478 ;; *************** function ___ftadd *****************
  6479 ;; Defined at:
  6480 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;  f1              3   32[BANK0 ] float 
  6483 ;;  f2              3   35[BANK0 ] float 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;  exp1            1   43[BANK0 ] unsigned char 
  6486 ;;  exp2            1   42[BANK0 ] unsigned char 
  6487 ;;  sign            1   41[BANK0 ] unsigned char 
  6488 ;; Return value:  Size  Location     Type
  6489 ;;                  3   32[BANK0 ] float 
  6490 ;; Registers used:
  6491 ;;		wreg, status,2, status,0, cstack
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6497 ;;      Params:         0       6       0       0       0       0       0       0       0
  6498 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6499 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6500 ;;      Totals:         0      12       0       0       0       0       0       0       0
  6501 ;;Total ram usage:       12 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; Hardware stack levels required when called:    4
  6504 ;; This function calls:
  6505 ;;		___ftpack
  6506 ;; This function is called by:
  6507 ;;		_sprintf
  6508 ;;		___ftsub
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           	psect	text24
  6513  001C0A                     __ptext24:
  6514                           	opt stack 0
  6515  001C0A                     ___ftadd:
  6516                           	opt stack 24
  6517                           
  6518                           ;incstack = 0
  6519  001C0A  C082  F086         	movff	___ftadd@f1+2,??___ftadd
  6520  001C0E  0100               	movlb	0	; () banked
  6521  001C10  6B87               	clrf	(??___ftadd+1)& (0+255),b
  6522  001C12  6B88               	clrf	(??___ftadd+2)& (0+255),b
  6523  001C14  0100               	movlb	0	; () banked
  6524  001C16  3581               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  6525  001C18  0100               	movlb	0	; () banked
  6526  001C1A  3786               	rlcf	??___ftadd& (0+255),f,b
  6527  001C1C  E301               	bnc	u1951
  6528  001C1E  8187               	bsf	(??___ftadd+1)& (0+255),0,b
  6529  001C20                     u1951:
  6530  001C20  0100               	movlb	0	; () banked
  6531  001C22  5186               	movf	??___ftadd& (0+255),w,b
  6532  001C24  0100               	movlb	0	; () banked
  6533  001C26  6F8B               	movwf	___ftadd@exp1& (0+255),b
  6534  001C28  C085  F086         	movff	___ftadd@f2+2,??___ftadd
  6535  001C2C  0100               	movlb	0	; () banked
  6536  001C2E  6B87               	clrf	(??___ftadd+1)& (0+255),b
  6537  001C30  6B88               	clrf	(??___ftadd+2)& (0+255),b
  6538  001C32  0100               	movlb	0	; () banked
  6539  001C34  3584               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  6540  001C36  0100               	movlb	0	; () banked
  6541  001C38  3786               	rlcf	??___ftadd& (0+255),f,b
  6542  001C3A  E301               	bnc	u1961
  6543  001C3C  8187               	bsf	(??___ftadd+1)& (0+255),0,b
  6544  001C3E                     u1961:
  6545  001C3E  0100               	movlb	0	; () banked
  6546  001C40  5186               	movf	??___ftadd& (0+255),w,b
  6547  001C42  0100               	movlb	0	; () banked
  6548  001C44  6F8A               	movwf	___ftadd@exp2& (0+255),b
  6549                           
  6550                           ; BSR set to: 0
  6551  001C46  0100               	movlb	0	; () banked
  6552  001C48  518B               	movf	___ftadd@exp1& (0+255),w,b
  6553  001C4A  0100               	movlb	0	; () banked
  6554  001C4C  B4D8               	btfsc	status,2,c
  6555  001C4E  D011               	goto	l741
  6556                           
  6557                           ; BSR set to: 0
  6558  001C50  0100               	movlb	0	; () banked
  6559  001C52  518A               	movf	___ftadd@exp2& (0+255),w,b
  6560  001C54  0100               	movlb	0	; () banked
  6561  001C56  5D8B               	subwf	___ftadd@exp1& (0+255),w,b
  6562  001C58  B0D8               	btfsc	status,0,c
  6563  001C5A  D012               	goto	l2621
  6564                           
  6565                           ; BSR set to: 0
  6566  001C5C  0100               	movlb	0	; () banked
  6567  001C5E  518B               	movf	___ftadd@exp1& (0+255),w,b
  6568  001C60  0800               	sublw	0
  6569  001C62  0100               	movlb	0	; () banked
  6570  001C64  258A               	addwf	___ftadd@exp2& (0+255),w,b
  6571  001C66  0100               	movlb	0	; () banked
  6572  001C68  6F86               	movwf	??___ftadd& (0+255),b
  6573  001C6A  0E18               	movlw	24
  6574  001C6C  0100               	movlb	0	; () banked
  6575  001C6E  6586               	cpfsgt	??___ftadd& (0+255),b
  6576  001C70  D007               	goto	l2621
  6577  001C72                     l741:
  6578                           
  6579                           ; BSR set to: 0
  6580  001C72  C083  F080         	movff	___ftadd@f2,?___ftadd
  6581  001C76  C084  F081         	movff	___ftadd@f2+1,?___ftadd+1
  6582  001C7A  C085  F082         	movff	___ftadd@f2+2,?___ftadd+2
  6583  001C7E  0012               	return	
  6584  001C80                     l2621:
  6585                           
  6586                           ; BSR set to: 0
  6587  001C80  0100               	movlb	0	; () banked
  6588  001C82  518A               	movf	___ftadd@exp2& (0+255),w,b
  6589  001C84  0100               	movlb	0	; () banked
  6590  001C86  B4D8               	btfsc	status,2,c
  6591  001C88  D011               	goto	l745
  6592                           
  6593                           ; BSR set to: 0
  6594  001C8A  0100               	movlb	0	; () banked
  6595  001C8C  518B               	movf	___ftadd@exp1& (0+255),w,b
  6596  001C8E  0100               	movlb	0	; () banked
  6597  001C90  5D8A               	subwf	___ftadd@exp2& (0+255),w,b
  6598  001C92  B0D8               	btfsc	status,0,c
  6599  001C94  D012               	goto	l2627
  6600                           
  6601                           ; BSR set to: 0
  6602  001C96  0100               	movlb	0	; () banked
  6603  001C98  518A               	movf	___ftadd@exp2& (0+255),w,b
  6604  001C9A  0800               	sublw	0
  6605  001C9C  0100               	movlb	0	; () banked
  6606  001C9E  258B               	addwf	___ftadd@exp1& (0+255),w,b
  6607  001CA0  0100               	movlb	0	; () banked
  6608  001CA2  6F86               	movwf	??___ftadd& (0+255),b
  6609  001CA4  0E18               	movlw	24
  6610  001CA6  0100               	movlb	0	; () banked
  6611  001CA8  6586               	cpfsgt	??___ftadd& (0+255),b
  6612  001CAA  D007               	goto	l2627
  6613  001CAC                     l745:
  6614                           
  6615                           ; BSR set to: 0
  6616  001CAC  C080  F080         	movff	___ftadd@f1,?___ftadd
  6617  001CB0  C081  F081         	movff	___ftadd@f1+1,?___ftadd+1
  6618  001CB4  C082  F082         	movff	___ftadd@f1+2,?___ftadd+2
  6619  001CB8  0012               	return	
  6620  001CBA                     l2627:
  6621                           
  6622                           ; BSR set to: 0
  6623  001CBA  0E06               	movlw	6
  6624  001CBC  0100               	movlb	0	; () banked
  6625  001CBE  6F89               	movwf	___ftadd@sign& (0+255),b
  6626                           
  6627                           ; BSR set to: 0
  6628  001CC0  0100               	movlb	0	; () banked
  6629  001CC2  AF82               	btfss	(___ftadd@f1+2)& (0+255),7,b
  6630  001CC4  D002               	goto	l2633
  6631                           
  6632                           ; BSR set to: 0
  6633  001CC6  0100               	movlb	0	; () banked
  6634  001CC8  8F89               	bsf	___ftadd@sign& (0+255),7,b
  6635  001CCA                     l2633:
  6636                           
  6637                           ; BSR set to: 0
  6638  001CCA  0100               	movlb	0	; () banked
  6639  001CCC  AF85               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6640  001CCE  D002               	goto	l747
  6641                           
  6642                           ; BSR set to: 0
  6643  001CD0  0100               	movlb	0	; () banked
  6644  001CD2  8D89               	bsf	___ftadd@sign& (0+255),6,b
  6645  001CD4                     l747:
  6646                           
  6647                           ; BSR set to: 0
  6648  001CD4  0100               	movlb	0	; () banked
  6649  001CD6  8F81               	bsf	(___ftadd@f1+1)& (0+255),7,b
  6650                           
  6651                           ; BSR set to: 0
  6652  001CD8  0EFF               	movlw	255
  6653  001CDA  0100               	movlb	0	; () banked
  6654  001CDC  1780               	andwf	___ftadd@f1& (0+255),f,b
  6655  001CDE  0EFF               	movlw	255
  6656  001CE0  0100               	movlb	0	; () banked
  6657  001CE2  1781               	andwf	(___ftadd@f1+1)& (0+255),f,b
  6658  001CE4  0E00               	movlw	0
  6659  001CE6  0100               	movlb	0	; () banked
  6660  001CE8  1782               	andwf	(___ftadd@f1+2)& (0+255),f,b
  6661  001CEA  0100               	movlb	0	; () banked
  6662  001CEC  8F84               	bsf	(___ftadd@f2+1)& (0+255),7,b
  6663                           
  6664                           ; BSR set to: 0
  6665  001CEE  0EFF               	movlw	255
  6666  001CF0  0100               	movlb	0	; () banked
  6667  001CF2  1783               	andwf	___ftadd@f2& (0+255),f,b
  6668  001CF4  0EFF               	movlw	255
  6669  001CF6  0100               	movlb	0	; () banked
  6670  001CF8  1784               	andwf	(___ftadd@f2+1)& (0+255),f,b
  6671  001CFA  0E00               	movlw	0
  6672  001CFC  0100               	movlb	0	; () banked
  6673  001CFE  1785               	andwf	(___ftadd@f2+2)& (0+255),f,b
  6674                           
  6675                           ; BSR set to: 0
  6676  001D00  0100               	movlb	0	; () banked
  6677  001D02  518A               	movf	___ftadd@exp2& (0+255),w,b
  6678  001D04  0100               	movlb	0	; () banked
  6679  001D06  5D8B               	subwf	___ftadd@exp1& (0+255),w,b
  6680  001D08  B0D8               	btfsc	status,0,c
  6681  001D0A  D025               	goto	l2653
  6682  001D0C                     l2643:
  6683                           
  6684                           ; BSR set to: 0
  6685  001D0C  0100               	movlb	0	; () banked
  6686  001D0E  90D8               	bcf	status,0,c
  6687  001D10  3783               	rlcf	___ftadd@f2& (0+255),f,b
  6688  001D12  3784               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  6689  001D14  3785               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  6690  001D16  0100               	movlb	0	; () banked
  6691  001D18  078A               	decf	___ftadd@exp2& (0+255),f,b
  6692                           
  6693                           ; BSR set to: 0
  6694  001D1A  0100               	movlb	0	; () banked
  6695  001D1C  518B               	movf	___ftadd@exp1& (0+255),w,b
  6696  001D1E  0100               	movlb	0	; () banked
  6697  001D20  198A               	xorwf	___ftadd@exp2& (0+255),w,b
  6698  001D22  B4D8               	btfsc	status,2,c
  6699  001D24  D011               	goto	l2651
  6700                           
  6701                           ; BSR set to: 0
  6702  001D26  0100               	movlb	0	; () banked
  6703  001D28  0789               	decf	___ftadd@sign& (0+255),f,b
  6704  001D2A  C089  F086         	movff	___ftadd@sign,??___ftadd
  6705  001D2E  0E07               	movlw	7
  6706  001D30  0100               	movlb	0	; () banked
  6707  001D32  1786               	andwf	??___ftadd& (0+255),f,b
  6708  001D34  B4D8               	btfsc	status,2,c
  6709  001D36  D008               	goto	l2651
  6710  001D38  D7E9               	goto	l2643
  6711  001D3A                     l2649:
  6712                           
  6713                           ; BSR set to: 0
  6714  001D3A  0100               	movlb	0	; () banked
  6715  001D3C  90D8               	bcf	status,0,c
  6716  001D3E  3382               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  6717  001D40  3381               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  6718  001D42  3380               	rrcf	___ftadd@f1& (0+255),f,b
  6719  001D44  0100               	movlb	0	; () banked
  6720  001D46  2B8B               	incf	___ftadd@exp1& (0+255),f,b
  6721  001D48                     l2651:
  6722                           
  6723                           ; BSR set to: 0
  6724  001D48  0100               	movlb	0	; () banked
  6725  001D4A  518A               	movf	___ftadd@exp2& (0+255),w,b
  6726  001D4C  0100               	movlb	0	; () banked
  6727  001D4E  198B               	xorwf	___ftadd@exp1& (0+255),w,b
  6728  001D50  B4D8               	btfsc	status,2,c
  6729  001D52  D02B               	goto	l756
  6730  001D54  D7F2               	goto	l2649
  6731  001D56                     l2653:
  6732                           
  6733                           ; BSR set to: 0
  6734  001D56  0100               	movlb	0	; () banked
  6735  001D58  518B               	movf	___ftadd@exp1& (0+255),w,b
  6736  001D5A  0100               	movlb	0	; () banked
  6737  001D5C  5D8A               	subwf	___ftadd@exp2& (0+255),w,b
  6738  001D5E  B0D8               	btfsc	status,0,c
  6739  001D60  D024               	goto	l756
  6740  001D62                     l2655:
  6741                           
  6742                           ; BSR set to: 0
  6743  001D62  0100               	movlb	0	; () banked
  6744  001D64  90D8               	bcf	status,0,c
  6745  001D66  3780               	rlcf	___ftadd@f1& (0+255),f,b
  6746  001D68  3781               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  6747  001D6A  3782               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  6748  001D6C  0100               	movlb	0	; () banked
  6749  001D6E  078B               	decf	___ftadd@exp1& (0+255),f,b
  6750                           
  6751                           ; BSR set to: 0
  6752  001D70  0100               	movlb	0	; () banked
  6753  001D72  518B               	movf	___ftadd@exp1& (0+255),w,b
  6754  001D74  0100               	movlb	0	; () banked
  6755  001D76  198A               	xorwf	___ftadd@exp2& (0+255),w,b
  6756  001D78  B4D8               	btfsc	status,2,c
  6757  001D7A  D011               	goto	l2663
  6758                           
  6759                           ; BSR set to: 0
  6760  001D7C  0100               	movlb	0	; () banked
  6761  001D7E  0789               	decf	___ftadd@sign& (0+255),f,b
  6762  001D80  C089  F086         	movff	___ftadd@sign,??___ftadd
  6763  001D84  0E07               	movlw	7
  6764  001D86  0100               	movlb	0	; () banked
  6765  001D88  1786               	andwf	??___ftadd& (0+255),f,b
  6766  001D8A  B4D8               	btfsc	status,2,c
  6767  001D8C  D008               	goto	l2663
  6768  001D8E  D7E9               	goto	l2655
  6769  001D90                     l2661:
  6770                           
  6771                           ; BSR set to: 0
  6772  001D90  0100               	movlb	0	; () banked
  6773  001D92  90D8               	bcf	status,0,c
  6774  001D94  3385               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  6775  001D96  3384               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  6776  001D98  3383               	rrcf	___ftadd@f2& (0+255),f,b
  6777  001D9A  0100               	movlb	0	; () banked
  6778  001D9C  2B8A               	incf	___ftadd@exp2& (0+255),f,b
  6779  001D9E                     l2663:
  6780                           
  6781                           ; BSR set to: 0
  6782  001D9E  0100               	movlb	0	; () banked
  6783  001DA0  518A               	movf	___ftadd@exp2& (0+255),w,b
  6784  001DA2  0100               	movlb	0	; () banked
  6785  001DA4  198B               	xorwf	___ftadd@exp1& (0+255),w,b
  6786  001DA6  A4D8               	btfss	status,2,c
  6787  001DA8  D7F3               	goto	l2661
  6788  001DAA                     l756:
  6789                           
  6790                           ; BSR set to: 0
  6791  001DAA  0100               	movlb	0	; () banked
  6792  001DAC  AF89               	btfss	___ftadd@sign& (0+255),7,b
  6793  001DAE  D012               	goto	l765
  6794                           
  6795                           ; BSR set to: 0
  6796  001DB0  0EFF               	movlw	255
  6797  001DB2  0100               	movlb	0	; () banked
  6798  001DB4  1B80               	xorwf	___ftadd@f1& (0+255),f,b
  6799  001DB6  0EFF               	movlw	255
  6800  001DB8  0100               	movlb	0	; () banked
  6801  001DBA  1B81               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  6802  001DBC  0EFF               	movlw	255
  6803  001DBE  0100               	movlb	0	; () banked
  6804  001DC0  1B82               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  6805  001DC2  0E01               	movlw	1
  6806  001DC4  0100               	movlb	0	; () banked
  6807  001DC6  2780               	addwf	___ftadd@f1& (0+255),f,b
  6808  001DC8  0E00               	movlw	0
  6809  001DCA  0100               	movlb	0	; () banked
  6810  001DCC  2381               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  6811  001DCE  0E00               	movlw	0
  6812  001DD0  0100               	movlb	0	; () banked
  6813  001DD2  2382               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  6814  001DD4                     l765:
  6815                           
  6816                           ; BSR set to: 0
  6817  001DD4  0100               	movlb	0	; () banked
  6818  001DD6  AD89               	btfss	___ftadd@sign& (0+255),6,b
  6819  001DD8  D012               	goto	l2669
  6820                           
  6821                           ; BSR set to: 0
  6822  001DDA  0EFF               	movlw	255
  6823  001DDC  0100               	movlb	0	; () banked
  6824  001DDE  1B83               	xorwf	___ftadd@f2& (0+255),f,b
  6825  001DE0  0EFF               	movlw	255
  6826  001DE2  0100               	movlb	0	; () banked
  6827  001DE4  1B84               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6828  001DE6  0EFF               	movlw	255
  6829  001DE8  0100               	movlb	0	; () banked
  6830  001DEA  1B85               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6831  001DEC  0E01               	movlw	1
  6832  001DEE  0100               	movlb	0	; () banked
  6833  001DF0  2783               	addwf	___ftadd@f2& (0+255),f,b
  6834  001DF2  0E00               	movlw	0
  6835  001DF4  0100               	movlb	0	; () banked
  6836  001DF6  2384               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6837  001DF8  0E00               	movlw	0
  6838  001DFA  0100               	movlb	0	; () banked
  6839  001DFC  2385               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6840  001DFE                     l2669:
  6841                           
  6842                           ; BSR set to: 0
  6843  001DFE  0E00               	movlw	0
  6844  001E00  0100               	movlb	0	; () banked
  6845  001E02  6F89               	movwf	___ftadd@sign& (0+255),b
  6846                           
  6847                           ; BSR set to: 0
  6848  001E04  0100               	movlb	0	; () banked
  6849  001E06  5180               	movf	___ftadd@f1& (0+255),w,b
  6850  001E08  0100               	movlb	0	; () banked
  6851  001E0A  2783               	addwf	___ftadd@f2& (0+255),f,b
  6852  001E0C  0100               	movlb	0	; () banked
  6853  001E0E  5181               	movf	(___ftadd@f1+1)& (0+255),w,b
  6854  001E10  0100               	movlb	0	; () banked
  6855  001E12  2384               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6856  001E14  0100               	movlb	0	; () banked
  6857  001E16  5182               	movf	(___ftadd@f1+2)& (0+255),w,b
  6858  001E18  0100               	movlb	0	; () banked
  6859  001E1A  2385               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6860                           
  6861                           ; BSR set to: 0
  6862  001E1C  0100               	movlb	0	; () banked
  6863  001E1E  AF85               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6864  001E20  D015               	goto	l2679
  6865                           
  6866                           ; BSR set to: 0
  6867  001E22  0EFF               	movlw	255
  6868  001E24  0100               	movlb	0	; () banked
  6869  001E26  1B83               	xorwf	___ftadd@f2& (0+255),f,b
  6870  001E28  0EFF               	movlw	255
  6871  001E2A  0100               	movlb	0	; () banked
  6872  001E2C  1B84               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6873  001E2E  0EFF               	movlw	255
  6874  001E30  0100               	movlb	0	; () banked
  6875  001E32  1B85               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6876  001E34  0E01               	movlw	1
  6877  001E36  0100               	movlb	0	; () banked
  6878  001E38  2783               	addwf	___ftadd@f2& (0+255),f,b
  6879  001E3A  0E00               	movlw	0
  6880  001E3C  0100               	movlb	0	; () banked
  6881  001E3E  2384               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6882  001E40  0E00               	movlw	0
  6883  001E42  0100               	movlb	0	; () banked
  6884  001E44  2385               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6885                           
  6886                           ; BSR set to: 0
  6887  001E46  0E01               	movlw	1
  6888  001E48  0100               	movlb	0	; () banked
  6889  001E4A  6F89               	movwf	___ftadd@sign& (0+255),b
  6890  001E4C                     l2679:
  6891                           
  6892                           ; BSR set to: 0
  6893  001E4C  C083  F013         	movff	___ftadd@f2,___ftpack@arg
  6894  001E50  C084  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  6895  001E54  C085  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  6896  001E58  C08B  F016         	movff	___ftadd@exp1,___ftpack@exp
  6897  001E5C  C089  F017         	movff	___ftadd@sign,___ftpack@sign
  6898  001E60  ECC9  F013         	call	___ftpack	;wreg free
  6899  001E64  C013  F080         	movff	?___ftpack,?___ftadd
  6900  001E68  C014  F081         	movff	?___ftpack+1,?___ftadd+1
  6901  001E6C  C015  F082         	movff	?___ftpack+2,?___ftadd+2
  6902  001E70  0012               	return	
  6903  001E72                     __end_of___ftadd:
  6904                           	opt stack 0
  6905                           tblptru	equ	0xFF8
  6906                           tblptrh	equ	0xFF7
  6907                           tblptrl	equ	0xFF6
  6908                           tablat	equ	0xFF5
  6909                           prodh	equ	0xFF4
  6910                           prodl	equ	0xFF3
  6911                           intcon	equ	0xFF2
  6912                           intcon2	equ	0xFF1
  6913                           intcon3	equ	0xFF0
  6914                           postinc0	equ	0xFEE
  6915                           wreg	equ	0xFE8
  6916                           indf2	equ	0xFDF
  6917                           postinc2	equ	0xFDE
  6918                           postdec2	equ	0xFDD
  6919                           fsr2h	equ	0xFDA
  6920                           fsr2l	equ	0xFD9
  6921                           status	equ	0xFD8
  6922                           
  6923 ;; *************** function ___ftneg *****************
  6924 ;; Defined at:
  6925 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;  f1              3    4[BANK0 ] float 
  6928 ;; Auto vars:     Size  Location     Type
  6929 ;;		None
  6930 ;; Return value:  Size  Location     Type
  6931 ;;                  3    4[BANK0 ] float 
  6932 ;; Registers used:
  6933 ;;		wreg, status,2, status,0
  6934 ;; Tracked objects:
  6935 ;;		On entry : 0/0
  6936 ;;		On exit  : 0/0
  6937 ;;		Unchanged: 0/0
  6938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6939 ;;      Params:         0       3       0       0       0       0       0       0       0
  6940 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6942 ;;      Totals:         0       3       0       0       0       0       0       0       0
  6943 ;;Total ram usage:        3 bytes
  6944 ;; Hardware stack levels used:    1
  6945 ;; Hardware stack levels required when called:    3
  6946 ;; This function calls:
  6947 ;;		Nothing
  6948 ;; This function is called by:
  6949 ;;		_sprintf
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           	psect	text25
  6954  002D3A                     __ptext25:
  6955                           	opt stack 0
  6956  002D3A                     ___ftneg:
  6957                           	opt stack 26
  6958                           
  6959                           ;incstack = 0
  6960  002D3A  0100               	movlb	0	; () banked
  6961  002D3C  5164               	movf	___ftneg@f1& (0+255),w,b
  6962  002D3E  0100               	movlb	0	; () banked
  6963  002D40  1165               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  6964  002D42  0100               	movlb	0	; () banked
  6965  002D44  1166               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  6966  002D46  B4D8               	btfsc	status,2,c
  6967  002D48  D009               	goto	l815
  6968                           
  6969                           ; BSR set to: 0
  6970  002D4A  0E00               	movlw	0
  6971  002D4C  0100               	movlb	0	; () banked
  6972  002D4E  1B64               	xorwf	___ftneg@f1& (0+255),f,b
  6973  002D50  0E00               	movlw	0
  6974  002D52  0100               	movlb	0	; () banked
  6975  002D54  1B65               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  6976  002D56  0E80               	movlw	128
  6977  002D58  0100               	movlb	0	; () banked
  6978  002D5A  1B66               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  6979  002D5C                     l815:
  6980                           
  6981                           ; BSR set to: 0
  6982  002D5C  C064  F064         	movff	___ftneg@f1,?___ftneg
  6983  002D60  C065  F065         	movff	___ftneg@f1+1,?___ftneg+1
  6984  002D64  C066  F066         	movff	___ftneg@f1+2,?___ftneg+2
  6985                           
  6986                           ; BSR set to: 0
  6987  002D68  0012               	return		;funcret
  6988  002D6A                     __end_of___ftneg:
  6989                           	opt stack 0
  6990                           tblptru	equ	0xFF8
  6991                           tblptrh	equ	0xFF7
  6992                           tblptrl	equ	0xFF6
  6993                           tablat	equ	0xFF5
  6994                           prodh	equ	0xFF4
  6995                           prodl	equ	0xFF3
  6996                           intcon	equ	0xFF2
  6997                           intcon2	equ	0xFF1
  6998                           intcon3	equ	0xFF0
  6999                           postinc0	equ	0xFEE
  7000                           wreg	equ	0xFE8
  7001                           indf2	equ	0xFDF
  7002                           postinc2	equ	0xFDE
  7003                           postdec2	equ	0xFDD
  7004                           fsr2h	equ	0xFDA
  7005                           fsr2l	equ	0xFD9
  7006                           status	equ	0xFD8
  7007                           
  7008 ;; *************** function ___ftge *****************
  7009 ;; Defined at:
  7010 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;  ff1             3   44[BANK0 ] float 
  7013 ;;  ff2             3   47[BANK0 ] float 
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;		None
  7016 ;; Return value:  Size  Location     Type
  7017 ;;		None               void
  7018 ;; Registers used:
  7019 ;;		wreg, status,2, status,0
  7020 ;; Tracked objects:
  7021 ;;		On entry : 0/0
  7022 ;;		On exit  : 0/0
  7023 ;;		Unchanged: 0/0
  7024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7025 ;;      Params:         0       6       0       0       0       0       0       0       0
  7026 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7027 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7028 ;;      Totals:         0       9       0       0       0       0       0       0       0
  7029 ;;Total ram usage:        9 bytes
  7030 ;; Hardware stack levels used:    1
  7031 ;; Hardware stack levels required when called:    3
  7032 ;; This function calls:
  7033 ;;		Nothing
  7034 ;; This function is called by:
  7035 ;;		_sprintf
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           	psect	text26
  7040  0026CA                     __ptext26:
  7041                           	opt stack 0
  7042  0026CA                     ___ftge:
  7043                           	opt stack 26
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;incstack = 0
  7047  0026CA  0100               	movlb	0	; () banked
  7048  0026CC  AF8E               	btfss	(___ftge@ff1+2)& (0+255),7,b
  7049  0026CE  D01D               	goto	l3111
  7050                           
  7051                           ; BSR set to: 0
  7052  0026D0  C08C  F092         	movff	___ftge@ff1,??___ftge
  7053  0026D4  C08D  F093         	movff	___ftge@ff1+1,??___ftge+1
  7054  0026D8  C08E  F094         	movff	___ftge@ff1+2,??___ftge+2
  7055  0026DC  0100               	movlb	0	; () banked
  7056  0026DE  1F92               	comf	??___ftge& (0+255),f,b
  7057  0026E0  1F93               	comf	(??___ftge+1)& (0+255),f,b
  7058  0026E2  1F94               	comf	(??___ftge+2)& (0+255),f,b
  7059  0026E4  2B92               	incf	??___ftge& (0+255),f,b
  7060  0026E6  0E00               	movlw	0
  7061  0026E8  2393               	addwfc	(??___ftge+1)& (0+255),f,b
  7062  0026EA  2394               	addwfc	(??___ftge+2)& (0+255),f,b
  7063  0026EC  0E00               	movlw	0
  7064  0026EE  0100               	movlb	0	; () banked
  7065  0026F0  2592               	addwf	??___ftge& (0+255),w,b
  7066  0026F2  0100               	movlb	0	; () banked
  7067  0026F4  6F8C               	movwf	___ftge@ff1& (0+255),b
  7068  0026F6  0E00               	movlw	0
  7069  0026F8  0100               	movlb	0	; () banked
  7070  0026FA  2193               	addwfc	(??___ftge+1)& (0+255),w,b
  7071  0026FC  0100               	movlb	0	; () banked
  7072  0026FE  6F8D               	movwf	(___ftge@ff1+1)& (0+255),b
  7073  002700  0E80               	movlw	128
  7074  002702  0100               	movlb	0	; () banked
  7075  002704  2194               	addwfc	(??___ftge+2)& (0+255),w,b
  7076  002706  0100               	movlb	0	; () banked
  7077  002708  6F8E               	movwf	(___ftge@ff1+2)& (0+255),b
  7078  00270A                     l3111:
  7079                           
  7080                           ; BSR set to: 0
  7081  00270A  0100               	movlb	0	; () banked
  7082  00270C  AF91               	btfss	(___ftge@ff2+2)& (0+255),7,b
  7083  00270E  D01D               	goto	l3115
  7084                           
  7085                           ; BSR set to: 0
  7086  002710  C08F  F092         	movff	___ftge@ff2,??___ftge
  7087  002714  C090  F093         	movff	___ftge@ff2+1,??___ftge+1
  7088  002718  C091  F094         	movff	___ftge@ff2+2,??___ftge+2
  7089  00271C  0100               	movlb	0	; () banked
  7090  00271E  1F92               	comf	??___ftge& (0+255),f,b
  7091  002720  1F93               	comf	(??___ftge+1)& (0+255),f,b
  7092  002722  1F94               	comf	(??___ftge+2)& (0+255),f,b
  7093  002724  2B92               	incf	??___ftge& (0+255),f,b
  7094  002726  0E00               	movlw	0
  7095  002728  2393               	addwfc	(??___ftge+1)& (0+255),f,b
  7096  00272A  2394               	addwfc	(??___ftge+2)& (0+255),f,b
  7097  00272C  0E00               	movlw	0
  7098  00272E  0100               	movlb	0	; () banked
  7099  002730  2592               	addwf	??___ftge& (0+255),w,b
  7100  002732  0100               	movlb	0	; () banked
  7101  002734  6F8F               	movwf	___ftge@ff2& (0+255),b
  7102  002736  0E00               	movlw	0
  7103  002738  0100               	movlb	0	; () banked
  7104  00273A  2193               	addwfc	(??___ftge+1)& (0+255),w,b
  7105  00273C  0100               	movlb	0	; () banked
  7106  00273E  6F90               	movwf	(___ftge@ff2+1)& (0+255),b
  7107  002740  0E80               	movlw	128
  7108  002742  0100               	movlb	0	; () banked
  7109  002744  2194               	addwfc	(??___ftge+2)& (0+255),w,b
  7110  002746  0100               	movlb	0	; () banked
  7111  002748  6F91               	movwf	(___ftge@ff2+2)& (0+255),b
  7112  00274A                     l3115:
  7113                           
  7114                           ; BSR set to: 0
  7115  00274A  0E00               	movlw	0
  7116  00274C  0100               	movlb	0	; () banked
  7117  00274E  1B8C               	xorwf	___ftge@ff1& (0+255),f,b
  7118  002750  0E00               	movlw	0
  7119  002752  0100               	movlb	0	; () banked
  7120  002754  1B8D               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  7121  002756  0E80               	movlw	128
  7122  002758  0100               	movlb	0	; () banked
  7123  00275A  1B8E               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  7124                           
  7125                           ; BSR set to: 0
  7126  00275C  0E00               	movlw	0
  7127  00275E  0100               	movlb	0	; () banked
  7128  002760  1B8F               	xorwf	___ftge@ff2& (0+255),f,b
  7129  002762  0E00               	movlw	0
  7130  002764  0100               	movlb	0	; () banked
  7131  002766  1B90               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  7132  002768  0E80               	movlw	128
  7133  00276A  0100               	movlb	0	; () banked
  7134  00276C  1B91               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  7135  00276E  0100               	movlb	0	; () banked
  7136  002770  518F               	movf	___ftge@ff2& (0+255),w,b
  7137  002772  0100               	movlb	0	; () banked
  7138  002774  5D8C               	subwf	___ftge@ff1& (0+255),w,b
  7139  002776  0100               	movlb	0	; () banked
  7140  002778  5190               	movf	(___ftge@ff2+1)& (0+255),w,b
  7141  00277A  0100               	movlb	0	; () banked
  7142  00277C  598D               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  7143  00277E  0100               	movlb	0	; () banked
  7144  002780  5191               	movf	(___ftge@ff2+2)& (0+255),w,b
  7145  002782  0100               	movlb	0	; () banked
  7146  002784  598E               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  7147  002786  B0D8               	btfsc	status,0,c
  7148  002788  D002               	goto	l3121
  7149                           
  7150                           ; BSR set to: 0
  7151  00278A  90D8               	bcf	status,0,c
  7152  00278C  0012               	return	
  7153  00278E                     l3121:
  7154                           
  7155                           ; BSR set to: 0
  7156  00278E  80D8               	bsf	status,0,c
  7157                           
  7158                           ; BSR set to: 0
  7159  002790  0012               	return	
  7160  002792                     __end_of___ftge:
  7161                           	opt stack 0
  7162                           tblptru	equ	0xFF8
  7163                           tblptrh	equ	0xFF7
  7164                           tblptrl	equ	0xFF6
  7165                           tablat	equ	0xFF5
  7166                           prodh	equ	0xFF4
  7167                           prodl	equ	0xFF3
  7168                           intcon	equ	0xFF2
  7169                           intcon2	equ	0xFF1
  7170                           intcon3	equ	0xFF0
  7171                           postinc0	equ	0xFEE
  7172                           wreg	equ	0xFE8
  7173                           indf2	equ	0xFDF
  7174                           postinc2	equ	0xFDE
  7175                           postdec2	equ	0xFDD
  7176                           fsr2h	equ	0xFDA
  7177                           fsr2l	equ	0xFD9
  7178                           status	equ	0xFD8
  7179                           
  7180 ;; *************** function ___ftdiv *****************
  7181 ;; Defined at:
  7182 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;  f1              3   29[BANK0 ] float 
  7185 ;;  f2              3   32[BANK0 ] float 
  7186 ;; Auto vars:     Size  Location     Type
  7187 ;;  f3              3   39[BANK0 ] float 
  7188 ;;  sign            1   43[BANK0 ] unsigned char 
  7189 ;;  exp             1   42[BANK0 ] unsigned char 
  7190 ;;  cntr            1   38[BANK0 ] unsigned char 
  7191 ;; Return value:  Size  Location     Type
  7192 ;;                  3   29[BANK0 ] float 
  7193 ;; Registers used:
  7194 ;;		wreg, status,2, status,0, cstack
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7200 ;;      Params:         0       6       0       0       0       0       0       0       0
  7201 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7202 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7203 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7204 ;;Total ram usage:       15 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; Hardware stack levels required when called:    4
  7207 ;; This function calls:
  7208 ;;		___ftpack
  7209 ;; This function is called by:
  7210 ;;		_sprintf
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           	psect	text27
  7215  002230                     __ptext27:
  7216                           	opt stack 0
  7217  002230                     ___ftdiv:
  7218                           	opt stack 25
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;incstack = 0
  7222  002230  C07F  F083         	movff	___ftdiv@f1+2,??___ftdiv
  7223  002234  0100               	movlb	0	; () banked
  7224  002236  6B84               	clrf	(??___ftdiv+1)& (0+255),b
  7225  002238  6B85               	clrf	(??___ftdiv+2)& (0+255),b
  7226  00223A  0100               	movlb	0	; () banked
  7227  00223C  357E               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  7228  00223E  0100               	movlb	0	; () banked
  7229  002240  3783               	rlcf	??___ftdiv& (0+255),f,b
  7230  002242  E301               	bnc	u2611
  7231  002244  8184               	bsf	(??___ftdiv+1)& (0+255),0,b
  7232  002246                     u2611:
  7233  002246  0100               	movlb	0	; () banked
  7234  002248  5183               	movf	??___ftdiv& (0+255),w,b
  7235  00224A  0100               	movlb	0	; () banked
  7236  00224C  6F8A               	movwf	___ftdiv@exp& (0+255),b
  7237  00224E  0100               	movlb	0	; () banked
  7238  002250  518A               	movf	___ftdiv@exp& (0+255),w,b
  7239  002252  A4D8               	btfss	status,2,c
  7240  002254  D00A               	goto	l3059
  7241                           
  7242                           ; BSR set to: 0
  7243  002256  0E00               	movlw	0
  7244  002258  0100               	movlb	0	; () banked
  7245  00225A  6F7D               	movwf	?___ftdiv& (0+255),b
  7246  00225C  0E00               	movlw	0
  7247  00225E  0100               	movlb	0	; () banked
  7248  002260  6F7E               	movwf	(?___ftdiv+1)& (0+255),b
  7249  002262  0E00               	movlw	0
  7250  002264  0100               	movlb	0	; () banked
  7251  002266  6F7F               	movwf	(?___ftdiv+2)& (0+255),b
  7252                           
  7253                           ; BSR set to: 0
  7254  002268  0012               	return	
  7255  00226A                     l3059:
  7256                           
  7257                           ; BSR set to: 0
  7258  00226A  C082  F083         	movff	___ftdiv@f2+2,??___ftdiv
  7259  00226E  0100               	movlb	0	; () banked
  7260  002270  6B84               	clrf	(??___ftdiv+1)& (0+255),b
  7261  002272  6B85               	clrf	(??___ftdiv+2)& (0+255),b
  7262  002274  0100               	movlb	0	; () banked
  7263  002276  3581               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  7264  002278  0100               	movlb	0	; () banked
  7265  00227A  3783               	rlcf	??___ftdiv& (0+255),f,b
  7266  00227C  E301               	bnc	u2631
  7267  00227E  8184               	bsf	(??___ftdiv+1)& (0+255),0,b
  7268  002280                     u2631:
  7269  002280  0100               	movlb	0	; () banked
  7270  002282  5183               	movf	??___ftdiv& (0+255),w,b
  7271  002284  0100               	movlb	0	; () banked
  7272  002286  6F8B               	movwf	___ftdiv@sign& (0+255),b
  7273  002288  0100               	movlb	0	; () banked
  7274  00228A  518B               	movf	___ftdiv@sign& (0+255),w,b
  7275  00228C  A4D8               	btfss	status,2,c
  7276  00228E  D00A               	goto	l3065
  7277                           
  7278                           ; BSR set to: 0
  7279  002290  0E00               	movlw	0
  7280  002292  0100               	movlb	0	; () banked
  7281  002294  6F7D               	movwf	?___ftdiv& (0+255),b
  7282  002296  0E00               	movlw	0
  7283  002298  0100               	movlb	0	; () banked
  7284  00229A  6F7E               	movwf	(?___ftdiv+1)& (0+255),b
  7285  00229C  0E00               	movlw	0
  7286  00229E  0100               	movlb	0	; () banked
  7287  0022A0  6F7F               	movwf	(?___ftdiv+2)& (0+255),b
  7288                           
  7289                           ; BSR set to: 0
  7290  0022A2  0012               	return	
  7291  0022A4                     l3065:
  7292                           
  7293                           ; BSR set to: 0
  7294  0022A4  0E00               	movlw	0
  7295  0022A6  0100               	movlb	0	; () banked
  7296  0022A8  6F87               	movwf	___ftdiv@f3& (0+255),b
  7297  0022AA  0E00               	movlw	0
  7298  0022AC  0100               	movlb	0	; () banked
  7299  0022AE  6F88               	movwf	(___ftdiv@f3+1)& (0+255),b
  7300  0022B0  0E00               	movlw	0
  7301  0022B2  0100               	movlb	0	; () banked
  7302  0022B4  6F89               	movwf	(___ftdiv@f3+2)& (0+255),b
  7303                           
  7304                           ; BSR set to: 0
  7305  0022B6  0100               	movlb	0	; () banked
  7306  0022B8  518B               	movf	___ftdiv@sign& (0+255),w,b
  7307  0022BA  0F89               	addlw	137
  7308  0022BC  0100               	movlb	0	; () banked
  7309  0022BE  5F8A               	subwf	___ftdiv@exp& (0+255),f,b
  7310                           
  7311                           ; BSR set to: 0
  7312  0022C0  C07F  F08B         	movff	___ftdiv@f1+2,___ftdiv@sign
  7313                           
  7314                           ; BSR set to: 0
  7315  0022C4  0100               	movlb	0	; () banked
  7316  0022C6  5182               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7317  0022C8  0100               	movlb	0	; () banked
  7318  0022CA  1B8B               	xorwf	___ftdiv@sign& (0+255),f,b
  7319                           
  7320                           ; BSR set to: 0
  7321  0022CC  0E80               	movlw	128
  7322  0022CE  0100               	movlb	0	; () banked
  7323  0022D0  178B               	andwf	___ftdiv@sign& (0+255),f,b
  7324                           
  7325                           ; BSR set to: 0
  7326  0022D2  0100               	movlb	0	; () banked
  7327  0022D4  8F7E               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  7328                           
  7329                           ; BSR set to: 0
  7330  0022D6  0EFF               	movlw	255
  7331  0022D8  0100               	movlb	0	; () banked
  7332  0022DA  177D               	andwf	___ftdiv@f1& (0+255),f,b
  7333  0022DC  0EFF               	movlw	255
  7334  0022DE  0100               	movlb	0	; () banked
  7335  0022E0  177E               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  7336  0022E2  0E00               	movlw	0
  7337  0022E4  0100               	movlb	0	; () banked
  7338  0022E6  177F               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  7339                           
  7340                           ; BSR set to: 0
  7341  0022E8  0100               	movlb	0	; () banked
  7342  0022EA  8F81               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  7343                           
  7344                           ; BSR set to: 0
  7345  0022EC  0EFF               	movlw	255
  7346  0022EE  0100               	movlb	0	; () banked
  7347  0022F0  1780               	andwf	___ftdiv@f2& (0+255),f,b
  7348  0022F2  0EFF               	movlw	255
  7349  0022F4  0100               	movlb	0	; () banked
  7350  0022F6  1781               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  7351  0022F8  0E00               	movlw	0
  7352  0022FA  0100               	movlb	0	; () banked
  7353  0022FC  1782               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  7354                           
  7355                           ; BSR set to: 0
  7356  0022FE  0E18               	movlw	24
  7357  002300  0100               	movlb	0	; () banked
  7358  002302  6F86               	movwf	___ftdiv@cntr& (0+255),b
  7359  002304                     l3085:
  7360                           
  7361                           ; BSR set to: 0
  7362  002304  0100               	movlb	0	; () banked
  7363  002306  90D8               	bcf	status,0,c
  7364  002308  3787               	rlcf	___ftdiv@f3& (0+255),f,b
  7365  00230A  3788               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  7366  00230C  3789               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  7367                           
  7368                           ; BSR set to: 0
  7369  00230E  0100               	movlb	0	; () banked
  7370  002310  5180               	movf	___ftdiv@f2& (0+255),w,b
  7371  002312  0100               	movlb	0	; () banked
  7372  002314  5D7D               	subwf	___ftdiv@f1& (0+255),w,b
  7373  002316  0100               	movlb	0	; () banked
  7374  002318  5181               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7375  00231A  0100               	movlb	0	; () banked
  7376  00231C  597E               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  7377  00231E  0100               	movlb	0	; () banked
  7378  002320  5182               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7379  002322  0100               	movlb	0	; () banked
  7380  002324  597F               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  7381  002326  A0D8               	btfss	status,0,c
  7382  002328  D00E               	goto	l776
  7383                           
  7384                           ; BSR set to: 0
  7385  00232A  0100               	movlb	0	; () banked
  7386  00232C  5180               	movf	___ftdiv@f2& (0+255),w,b
  7387  00232E  0100               	movlb	0	; () banked
  7388  002330  5F7D               	subwf	___ftdiv@f1& (0+255),f,b
  7389  002332  0100               	movlb	0	; () banked
  7390  002334  5181               	movf	(___ftdiv@f2+1)& (0+255),w,b
  7391  002336  0100               	movlb	0	; () banked
  7392  002338  5B7E               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  7393  00233A  0100               	movlb	0	; () banked
  7394  00233C  5182               	movf	(___ftdiv@f2+2)& (0+255),w,b
  7395  00233E  0100               	movlb	0	; () banked
  7396  002340  5B7F               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  7397                           
  7398                           ; BSR set to: 0
  7399  002342  0100               	movlb	0	; () banked
  7400  002344  8187               	bsf	___ftdiv@f3& (0+255),0,b
  7401  002346                     l776:
  7402                           
  7403                           ; BSR set to: 0
  7404  002346  0100               	movlb	0	; () banked
  7405  002348  90D8               	bcf	status,0,c
  7406  00234A  377D               	rlcf	___ftdiv@f1& (0+255),f,b
  7407  00234C  377E               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  7408  00234E  377F               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  7409                           
  7410                           ; BSR set to: 0
  7411  002350  0100               	movlb	0	; () banked
  7412  002352  2F86               	decfsz	___ftdiv@cntr& (0+255),f,b
  7413  002354  D7D7               	goto	l3085
  7414                           
  7415                           ; BSR set to: 0
  7416                           
  7417                           ; BSR set to: 0
  7418  002356  C087  F013         	movff	___ftdiv@f3,___ftpack@arg
  7419  00235A  C088  F014         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7420  00235E  C089  F015         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7421  002362  C08A  F016         	movff	___ftdiv@exp,___ftpack@exp
  7422  002366  C08B  F017         	movff	___ftdiv@sign,___ftpack@sign
  7423  00236A  ECC9  F013         	call	___ftpack	;wreg free
  7424  00236E  C013  F07D         	movff	?___ftpack,?___ftdiv
  7425  002372  C014  F07E         	movff	?___ftpack+1,?___ftdiv+1
  7426  002376  C015  F07F         	movff	?___ftpack+2,?___ftdiv+2
  7427  00237A  0012               	return	
  7428  00237C                     __end_of___ftdiv:
  7429                           	opt stack 0
  7430                           tblptru	equ	0xFF8
  7431                           tblptrh	equ	0xFF7
  7432                           tblptrl	equ	0xFF6
  7433                           tablat	equ	0xFF5
  7434                           prodh	equ	0xFF4
  7435                           prodl	equ	0xFF3
  7436                           intcon	equ	0xFF2
  7437                           intcon2	equ	0xFF1
  7438                           intcon3	equ	0xFF0
  7439                           postinc0	equ	0xFEE
  7440                           wreg	equ	0xFE8
  7441                           indf2	equ	0xFDF
  7442                           postinc2	equ	0xFDE
  7443                           postdec2	equ	0xFDD
  7444                           fsr2h	equ	0xFDA
  7445                           fsr2l	equ	0xFD9
  7446                           status	equ	0xFD8
  7447                           
  7448 ;; *************** function ___ftpack *****************
  7449 ;; Defined at:
  7450 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;  arg             3   18[COMRAM] unsigned um
  7453 ;;  exp             1   21[COMRAM] unsigned char 
  7454 ;;  sign            1   22[COMRAM] unsigned char 
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;		None
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  3   18[COMRAM] float 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7466 ;;      Params:         5       0       0       0       0       0       0       0       0
  7467 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7468 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7469 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7470 ;;Total ram usage:        8 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    3
  7473 ;; This function calls:
  7474 ;;		Nothing
  7475 ;; This function is called by:
  7476 ;;		___ftadd
  7477 ;;		___ftdiv
  7478 ;;		___ftmul
  7479 ;;		___lltoft
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           	psect	text28
  7484  002792                     __ptext28:
  7485                           	opt stack 0
  7486  002792                     ___ftpack:
  7487                           	opt stack 24
  7488                           
  7489                           ;incstack = 0
  7490  002792  5016               	movf	___ftpack@exp,w,c
  7491  002794  B4D8               	btfsc	status,2,c
  7492  002796  D005               	goto	l2563
  7493  002798  5013               	movf	___ftpack@arg,w,c
  7494  00279A  1014               	iorwf	___ftpack@arg+1,w,c
  7495  00279C  1015               	iorwf	___ftpack@arg+2,w,c
  7496  00279E  A4D8               	btfss	status,2,c
  7497  0027A0  D00C               	goto	l2569
  7498  0027A2                     l2563:
  7499  0027A2  0E00               	movlw	0
  7500  0027A4  6E13               	movwf	?___ftpack,c
  7501  0027A6  0E00               	movlw	0
  7502  0027A8  6E14               	movwf	?___ftpack+1,c
  7503  0027AA  0E00               	movlw	0
  7504  0027AC  6E15               	movwf	?___ftpack+2,c
  7505  0027AE  0012               	return	
  7506  0027B0                     l2567:
  7507  0027B0  2A16               	incf	___ftpack@exp,f,c
  7508  0027B2  90D8               	bcf	status,0,c
  7509  0027B4  3215               	rrcf	___ftpack@arg+2,f,c
  7510  0027B6  3214               	rrcf	___ftpack@arg+1,f,c
  7511  0027B8  3213               	rrcf	___ftpack@arg,f,c
  7512  0027BA                     l2569:
  7513  0027BA  0E00               	movlw	0
  7514  0027BC  1413               	andwf	___ftpack@arg,w,c
  7515  0027BE  6E18               	movwf	??___ftpack& (0+255),c
  7516  0027C0  0E00               	movlw	0
  7517  0027C2  1414               	andwf	___ftpack@arg+1,w,c
  7518  0027C4  6E19               	movwf	(??___ftpack+1)& (0+255),c
  7519  0027C6  0EFE               	movlw	254
  7520  0027C8  1415               	andwf	___ftpack@arg+2,w,c
  7521  0027CA  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  7522  0027CC  5018               	movf	??___ftpack,w,c
  7523  0027CE  1019               	iorwf	??___ftpack+1,w,c
  7524  0027D0  101A               	iorwf	??___ftpack+2,w,c
  7525  0027D2  B4D8               	btfsc	status,2,c
  7526  0027D4  D00C               	goto	l2575
  7527  0027D6  D7EC               	goto	l2567
  7528  0027D8                     l2571:
  7529  0027D8  2A16               	incf	___ftpack@exp,f,c
  7530  0027DA  0E01               	movlw	1
  7531  0027DC  2613               	addwf	___ftpack@arg,f,c
  7532  0027DE  0E00               	movlw	0
  7533  0027E0  2214               	addwfc	___ftpack@arg+1,f,c
  7534  0027E2  0E00               	movlw	0
  7535  0027E4  2215               	addwfc	___ftpack@arg+2,f,c
  7536  0027E6  90D8               	bcf	status,0,c
  7537  0027E8  3215               	rrcf	___ftpack@arg+2,f,c
  7538  0027EA  3214               	rrcf	___ftpack@arg+1,f,c
  7539  0027EC  3213               	rrcf	___ftpack@arg,f,c
  7540  0027EE                     l2575:
  7541  0027EE  0E00               	movlw	0
  7542  0027F0  1413               	andwf	___ftpack@arg,w,c
  7543  0027F2  6E18               	movwf	??___ftpack& (0+255),c
  7544  0027F4  0E00               	movlw	0
  7545  0027F6  1414               	andwf	___ftpack@arg+1,w,c
  7546  0027F8  6E19               	movwf	(??___ftpack+1)& (0+255),c
  7547  0027FA  0EFF               	movlw	255
  7548  0027FC  1415               	andwf	___ftpack@arg+2,w,c
  7549  0027FE  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  7550  002800  5018               	movf	??___ftpack,w,c
  7551  002802  1019               	iorwf	??___ftpack+1,w,c
  7552  002804  101A               	iorwf	??___ftpack+2,w,c
  7553  002806  B4D8               	btfsc	status,2,c
  7554  002808  D006               	goto	l2579
  7555  00280A  D7E6               	goto	l2571
  7556  00280C                     l2577:
  7557  00280C  0616               	decf	___ftpack@exp,f,c
  7558  00280E  90D8               	bcf	status,0,c
  7559  002810  3613               	rlcf	___ftpack@arg,f,c
  7560  002812  3614               	rlcf	___ftpack@arg+1,f,c
  7561  002814  3615               	rlcf	___ftpack@arg+2,f,c
  7562  002816                     l2579:
  7563  002816  BE14               	btfsc	___ftpack@arg+1,7,c
  7564  002818  D003               	goto	l718
  7565  00281A  0E02               	movlw	2
  7566  00281C  6016               	cpfslt	___ftpack@exp,c
  7567  00281E  D7F6               	goto	l2577
  7568  002820                     l718:
  7569  002820  A016               	btfss	___ftpack@exp,0,c
  7570  002822  9E14               	bcf	___ftpack@arg+1,7,c
  7571  002824  90D8               	bcf	status,0,c
  7572  002826  3216               	rrcf	___ftpack@exp,f,c
  7573  002828  5016               	movf	___ftpack@exp,w,c
  7574  00282A  1215               	iorwf	___ftpack@arg+2,f,c
  7575  00282C  5017               	movf	___ftpack@sign,w,c
  7576  00282E  A4D8               	btfss	status,2,c
  7577  002830  8E15               	bsf	___ftpack@arg+2,7,c
  7578  002832  C013  F013         	movff	___ftpack@arg,?___ftpack
  7579  002836  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  7580  00283A  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  7581  00283E  0012               	return	
  7582  002840                     __end_of___ftpack:
  7583                           	opt stack 0
  7584                           tblptru	equ	0xFF8
  7585                           tblptrh	equ	0xFF7
  7586                           tblptrl	equ	0xFF6
  7587                           tablat	equ	0xFF5
  7588                           prodh	equ	0xFF4
  7589                           prodl	equ	0xFF3
  7590                           intcon	equ	0xFF2
  7591                           intcon2	equ	0xFF1
  7592                           intcon3	equ	0xFF0
  7593                           postinc0	equ	0xFEE
  7594                           wreg	equ	0xFE8
  7595                           indf2	equ	0xFDF
  7596                           postinc2	equ	0xFDE
  7597                           postdec2	equ	0xFDD
  7598                           fsr2h	equ	0xFDA
  7599                           fsr2l	equ	0xFD9
  7600                           status	equ	0xFD8
  7601                           
  7602 ;; *************** function __delay_10ms *****************
  7603 ;; Defined at:
  7604 ;;		line 34 in file "main.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;  length          2   18[COMRAM] int 
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;		None
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  1    wreg      void 
  7611 ;; Registers used:
  7612 ;;		wreg, status,2, status,0
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7618 ;;      Params:         2       0       0       0       0       0       0       0       0
  7619 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7620 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7621 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7622 ;;Total ram usage:        3 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    3
  7625 ;; This function calls:
  7626 ;;		Nothing
  7627 ;; This function is called by:
  7628 ;;		_main
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           	psect	text29
  7633  002E30                     __ptext29:
  7634                           	opt stack 0
  7635  002E30                     __delay_10ms:
  7636                           	opt stack 27
  7637                           
  7638                           ;main.c: 35: while(length){
  7639                           
  7640                           ;incstack = 0
  7641  002E30  D00A               	goto	l39
  7642  002E32                     l3227:
  7643                           
  7644                           ;main.c: 36: _delay((unsigned long)((10)*(1000000/4000.0)));
  7645  002E32  0E04               	movlw	4
  7646  002E34  6E15               	movwf	??__delay_10ms& (0+255),c
  7647  002E36  0E3E               	movlw	62
  7648  002E38                     u4427:
  7649  002E38  2EE8               	decfsz	wreg,f,c
  7650  002E3A  D7FE               	bra	u4427
  7651  002E3C  2E15               	decfsz	??__delay_10ms& (0+255),f,c
  7652  002E3E  D7FC               	bra	u4427
  7653                           
  7654                           ;main.c: 37: length--;
  7655  002E40  0613               	decf	__delay_10ms@length,f,c
  7656  002E42  A0D8               	btfss	status,0,c
  7657  002E44  0614               	decf	__delay_10ms@length+1,f,c
  7658  002E46                     l39:
  7659  002E46  5013               	movf	__delay_10ms@length,w,c
  7660  002E48  1014               	iorwf	__delay_10ms@length+1,w,c
  7661  002E4A  B4D8               	btfsc	status,2,c
  7662  002E4C  0012               	return	
  7663  002E4E  D7F1               	goto	l3227
  7664  002E50                     __end_of__delay_10ms:
  7665                           	opt stack 0
  7666                           tblptru	equ	0xFF8
  7667                           tblptrh	equ	0xFF7
  7668                           tblptrl	equ	0xFF6
  7669                           tablat	equ	0xFF5
  7670                           prodh	equ	0xFF4
  7671                           prodl	equ	0xFF3
  7672                           intcon	equ	0xFF2
  7673                           intcon2	equ	0xFF1
  7674                           intcon3	equ	0xFF0
  7675                           postinc0	equ	0xFEE
  7676                           wreg	equ	0xFE8
  7677                           indf2	equ	0xFDF
  7678                           postinc2	equ	0xFDE
  7679                           postdec2	equ	0xFDD
  7680                           fsr2h	equ	0xFDA
  7681                           fsr2l	equ	0xFD9
  7682                           status	equ	0xFD8
  7683                           
  7684 ;; *************** function _SYSTEM_Initialize *****************
  7685 ;; Defined at:
  7686 ;;		line 116 in file "mcc_generated_files/mcc.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;		None
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;		None
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  1    wreg      void 
  7693 ;; Registers used:
  7694 ;;		wreg, status,2, cstack
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7700 ;;      Params:         0       0       0       0       0       0       0       0       0
  7701 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7703 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7704 ;;Total ram usage:        0 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    4
  7707 ;; This function calls:
  7708 ;;		_OSCILLATOR_Initialize
  7709 ;;		_PIN_MANAGER_Initialize
  7710 ;; This function is called by:
  7711 ;;		_main
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           	psect	text30
  7716  002F1E                     __ptext30:
  7717                           	opt stack 0
  7718  002F1E                     _SYSTEM_Initialize:
  7719                           	opt stack 26
  7720                           
  7721                           ;mcc.c: 119: PIN_MANAGER_Initialize();
  7722                           
  7723                           ;incstack = 0
  7724  002F1E  ECF1  F015         	call	_PIN_MANAGER_Initialize	;wreg free
  7725                           
  7726                           ;mcc.c: 120: OSCILLATOR_Initialize();
  7727  002F22  EC76  F017         	call	_OSCILLATOR_Initialize	;wreg free
  7728  002F26  0012               	return		;funcret
  7729  002F28                     __end_of_SYSTEM_Initialize:
  7730                           	opt stack 0
  7731                           tblptru	equ	0xFF8
  7732                           tblptrh	equ	0xFF7
  7733                           tblptrl	equ	0xFF6
  7734                           tablat	equ	0xFF5
  7735                           prodh	equ	0xFF4
  7736                           prodl	equ	0xFF3
  7737                           intcon	equ	0xFF2
  7738                           intcon2	equ	0xFF1
  7739                           intcon3	equ	0xFF0
  7740                           postinc0	equ	0xFEE
  7741                           wreg	equ	0xFE8
  7742                           indf2	equ	0xFDF
  7743                           postinc2	equ	0xFDE
  7744                           postdec2	equ	0xFDD
  7745                           fsr2h	equ	0xFDA
  7746                           fsr2l	equ	0xFD9
  7747                           status	equ	0xFD8
  7748                           
  7749 ;; *************** function _PIN_MANAGER_Initialize *****************
  7750 ;; Defined at:
  7751 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;		None
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;		None
  7756 ;; Return value:  Size  Location     Type
  7757 ;;                  1    wreg      void 
  7758 ;; Registers used:
  7759 ;;		wreg, status,2
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7765 ;;      Params:         0       0       0       0       0       0       0       0       0
  7766 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7767 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7768 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7769 ;;Total ram usage:        0 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; Hardware stack levels required when called:    3
  7772 ;; This function calls:
  7773 ;;		Nothing
  7774 ;; This function is called by:
  7775 ;;		_SYSTEM_Initialize
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           	psect	text31
  7780  002BE2                     __ptext31:
  7781                           	opt stack 0
  7782  002BE2                     _PIN_MANAGER_Initialize:
  7783                           	opt stack 26
  7784                           
  7785                           ;pin_manager.c: 56: LATE = 0x00;
  7786                           
  7787                           ;incstack = 0
  7788  002BE2  0E00               	movlw	0
  7789  002BE4  6E8D               	movwf	3981,c	;volatile
  7790                           
  7791                           ;pin_manager.c: 57: LATD = 0x00;
  7792  002BE6  0E00               	movlw	0
  7793  002BE8  6E8C               	movwf	3980,c	;volatile
  7794                           
  7795                           ;pin_manager.c: 58: LATA = 0x00;
  7796  002BEA  0E00               	movlw	0
  7797  002BEC  6E89               	movwf	3977,c	;volatile
  7798                           
  7799                           ;pin_manager.c: 59: LATB = 0x00;
  7800  002BEE  0E00               	movlw	0
  7801  002BF0  6E8A               	movwf	3978,c	;volatile
  7802                           
  7803                           ;pin_manager.c: 60: LATC = 0x00;
  7804  002BF2  0E00               	movlw	0
  7805  002BF4  6E8B               	movwf	3979,c	;volatile
  7806                           
  7807                           ;pin_manager.c: 65: TRISE = 0x07;
  7808  002BF6  0E07               	movlw	7
  7809  002BF8  6E96               	movwf	3990,c	;volatile
  7810                           
  7811                           ;pin_manager.c: 66: TRISA = 0xFF;
  7812  002BFA  6892               	setf	3986,c	;volatile
  7813                           
  7814                           ;pin_manager.c: 67: TRISB = 0xFF;
  7815  002BFC  6893               	setf	3987,c	;volatile
  7816                           
  7817                           ;pin_manager.c: 68: TRISC = 0xC7;
  7818  002BFE  0EC7               	movlw	199
  7819  002C00  6E94               	movwf	3988,c	;volatile
  7820                           
  7821                           ;pin_manager.c: 69: TRISD = 0x00;
  7822  002C02  0E00               	movlw	0
  7823  002C04  6E95               	movwf	3989,c	;volatile
  7824                           
  7825                           ;pin_manager.c: 74: ANSELC = 0xC4;
  7826  002C06  0EC4               	movlw	196
  7827  002C08  010F               	movlb	15	; () banked
  7828  002C0A  6F5D               	movwf	93,b	;volatile
  7829                           
  7830                           ;pin_manager.c: 75: ANSELB = 0x00;
  7831  002C0C  0E00               	movlw	0
  7832  002C0E  010F               	movlb	15	; () banked
  7833  002C10  6F5C               	movwf	92,b	;volatile
  7834                           
  7835                           ;pin_manager.c: 76: ANSELD = 0x00;
  7836  002C12  0E00               	movlw	0
  7837  002C14  010F               	movlb	15	; () banked
  7838  002C16  6F5E               	movwf	94,b	;volatile
  7839                           
  7840                           ;pin_manager.c: 77: ANSELE = 0x07;
  7841  002C18  0E07               	movlw	7
  7842  002C1A  010F               	movlb	15	; () banked
  7843  002C1C  6F5F               	movwf	95,b	;volatile
  7844                           
  7845                           ;pin_manager.c: 78: ANSELA = 0x2F;
  7846  002C1E  0E2F               	movlw	47
  7847  002C20  010F               	movlb	15	; () banked
  7848  002C22  6F5B               	movwf	91,b	;volatile
  7849                           
  7850                           ; BSR set to: 15
  7851                           ;pin_manager.c: 83: WPUB = 0xFF;
  7852  002C24  6885               	setf	3973,c	;volatile
  7853                           
  7854                           ; BSR set to: 15
  7855                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 0;
  7856  002C26  9EF1               	bcf	intcon2,7,c	;volatile
  7857                           
  7858                           ; BSR set to: 15
  7859  002C28  0012               	return		;funcret
  7860  002C2A                     __end_of_PIN_MANAGER_Initialize:
  7861                           	opt stack 0
  7862                           tblptru	equ	0xFF8
  7863                           tblptrh	equ	0xFF7
  7864                           tblptrl	equ	0xFF6
  7865                           tablat	equ	0xFF5
  7866                           prodh	equ	0xFF4
  7867                           prodl	equ	0xFF3
  7868                           intcon	equ	0xFF2
  7869                           intcon2	equ	0xFF1
  7870                           intcon3	equ	0xFF0
  7871                           postinc0	equ	0xFEE
  7872                           wreg	equ	0xFE8
  7873                           indf2	equ	0xFDF
  7874                           postinc2	equ	0xFDE
  7875                           postdec2	equ	0xFDD
  7876                           fsr2h	equ	0xFDA
  7877                           fsr2l	equ	0xFD9
  7878                           status	equ	0xFD8
  7879                           
  7880 ;; *************** function _OSCILLATOR_Initialize *****************
  7881 ;; Defined at:
  7882 ;;		line 123 in file "mcc_generated_files/mcc.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;		None
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;		None
  7887 ;; Return value:  Size  Location     Type
  7888 ;;                  1    wreg      void 
  7889 ;; Registers used:
  7890 ;;		wreg, status,2
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7896 ;;      Params:         0       0       0       0       0       0       0       0       0
  7897 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7898 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7899 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7900 ;;Total ram usage:        0 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:    3
  7903 ;; This function calls:
  7904 ;;		Nothing
  7905 ;; This function is called by:
  7906 ;;		_SYSTEM_Initialize
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           	psect	text32
  7911  002EEC                     __ptext32:
  7912                           	opt stack 0
  7913  002EEC                     _OSCILLATOR_Initialize:
  7914                           	opt stack 26
  7915                           
  7916                           ;mcc.c: 126: OSCCON = 0x70;
  7917                           
  7918                           ; BSR set to: 15
  7919                           ;incstack = 0
  7920  002EEC  0E70               	movlw	112
  7921  002EEE  6ED3               	movwf	4051,c	;volatile
  7922                           
  7923                           ;mcc.c: 128: OSCCON2 = 0x00;
  7924  002EF0  0E00               	movlw	0
  7925  002EF2  6ED2               	movwf	4050,c	;volatile
  7926                           
  7927                           ;mcc.c: 130: OSCTUNE = 0x00;
  7928  002EF4  0E00               	movlw	0
  7929  002EF6  6E9B               	movwf	3995,c	;volatile
  7930                           
  7931                           ;mcc.c: 132: ACTCON = 0x00;
  7932  002EF8  0E00               	movlw	0
  7933  002EFA  6EB5               	movwf	4021,c	;volatile
  7934  002EFC  0012               	return		;funcret
  7935  002EFE                     __end_of_OSCILLATOR_Initialize:
  7936                           	opt stack 0
  7937                           tblptru	equ	0xFF8
  7938                           tblptrh	equ	0xFF7
  7939                           tblptrl	equ	0xFF6
  7940                           tablat	equ	0xFF5
  7941                           prodh	equ	0xFF4
  7942                           prodl	equ	0xFF3
  7943                           intcon	equ	0xFF2
  7944                           intcon2	equ	0xFF1
  7945                           intcon3	equ	0xFF0
  7946                           postinc0	equ	0xFEE
  7947                           wreg	equ	0xFE8
  7948                           indf2	equ	0xFDF
  7949                           postinc2	equ	0xFDE
  7950                           postdec2	equ	0xFDD
  7951                           fsr2h	equ	0xFDA
  7952                           fsr2l	equ	0xFD9
  7953                           status	equ	0xFD8
  7954                           
  7955 ;; *************** function _LCD_Initialize *****************
  7956 ;; Defined at:
  7957 ;;		line 46 in file "lcd.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;		None
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;		None
  7962 ;; Return value:  Size  Location     Type
  7963 ;;                  1    wreg      void 
  7964 ;; Registers used:
  7965 ;;		wreg, status,2, status,0, cstack
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/0
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7971 ;;      Params:         0       0       0       0       0       0       0       0       0
  7972 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7973 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7974 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7975 ;;Total ram usage:        1 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    5
  7978 ;; This function calls:
  7979 ;;		_LCDPutCmd
  7980 ;; This function is called by:
  7981 ;;		_main
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           	psect	text33
  7986  002C9C                     __ptext33:
  7987                           	opt stack 0
  7988  002C9C                     _LCD_Initialize:
  7989                           	opt stack 25
  7990                           
  7991                           ;lcd.c: 49: PORTD = 0;
  7992                           
  7993                           ;incstack = 0
  7994  002C9C  0E00               	movlw	0
  7995  002C9E  6E83               	movwf	3971,c	;volatile
  7996                           
  7997                           ;lcd.c: 51: TRISD = 0x00;
  7998  002CA0  0E00               	movlw	0
  7999  002CA2  6E95               	movwf	3989,c	;volatile
  8000                           
  8001                           ;lcd.c: 54: PORTDbits.RD7 = 1;
  8002  002CA4  8E83               	bsf	3971,7,c	;volatile
  8003                           
  8004                           ;lcd.c: 57: _delay((unsigned long)((15)*(1000000/4000.0)));
  8005  002CA6  0E05               	movlw	5
  8006  002CA8  6E16               	movwf	??_LCD_Initialize& (0+255),c
  8007  002CAA  0EDE               	movlw	222
  8008  002CAC                     u4437:
  8009  002CAC  2EE8               	decfsz	wreg,f,c
  8010  002CAE  D7FE               	bra	u4437
  8011  002CB0  2E16               	decfsz	??_LCD_Initialize& (0+255),f,c
  8012  002CB2  D7FC               	bra	u4437
  8013                           
  8014                           ;lcd.c: 60: LCDPutCmd(0x32);
  8015  002CB4  0E32               	movlw	50
  8016  002CB6  ECB5  F016         	call	_LCDPutCmd
  8017                           
  8018                           ;lcd.c: 63: LCDPutCmd(0x28);
  8019  002CBA  0E28               	movlw	40
  8020  002CBC  ECB5  F016         	call	_LCDPutCmd
  8021                           
  8022                           ;lcd.c: 66: LCDPutCmd(0x0C);
  8023  002CC0  0E0C               	movlw	12
  8024  002CC2  ECB5  F016         	call	_LCDPutCmd
  8025                           
  8026                           ;lcd.c: 68: LCDPutCmd(0x01);
  8027  002CC6  0E01               	movlw	1
  8028  002CC8  ECB5  F016         	call	_LCDPutCmd
  8029                           
  8030                           ;lcd.c: 71: LCDPutCmd(0x06);
  8031  002CCC  0E06               	movlw	6
  8032  002CCE  ECB5  F016         	call	_LCDPutCmd
  8033  002CD2  0012               	return		;funcret
  8034  002CD4                     __end_of_LCD_Initialize:
  8035                           	opt stack 0
  8036                           tblptru	equ	0xFF8
  8037                           tblptrh	equ	0xFF7
  8038                           tblptrl	equ	0xFF6
  8039                           tablat	equ	0xFF5
  8040                           prodh	equ	0xFF4
  8041                           prodl	equ	0xFF3
  8042                           intcon	equ	0xFF2
  8043                           intcon2	equ	0xFF1
  8044                           intcon3	equ	0xFF0
  8045                           postinc0	equ	0xFEE
  8046                           wreg	equ	0xFE8
  8047                           indf2	equ	0xFDF
  8048                           postinc2	equ	0xFDE
  8049                           postdec2	equ	0xFDD
  8050                           fsr2h	equ	0xFDA
  8051                           fsr2l	equ	0xFD9
  8052                           status	equ	0xFD8
  8053                           
  8054 ;; *************** function _LCDPutStr *****************
  8055 ;; Defined at:
  8056 ;;		line 135 in file "lcd.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;  str             2   21[COMRAM] PTR const unsigned char 
  8059 ;;		 -> main@Buffer(20), STR_1(15), 
  8060 ;; Auto vars:     Size  Location     Type
  8061 ;;  i               1   25[COMRAM] unsigned char 
  8062 ;; Return value:  Size  Location     Type
  8063 ;;                  1    wreg      void 
  8064 ;; Registers used:
  8065 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8066 ;; Tracked objects:
  8067 ;;		On entry : 0/0
  8068 ;;		On exit  : 0/0
  8069 ;;		Unchanged: 0/0
  8070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8071 ;;      Params:         2       0       0       0       0       0       0       0       0
  8072 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8073 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8074 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8075 ;;Total ram usage:        5 bytes
  8076 ;; Hardware stack levels used:    1
  8077 ;; Hardware stack levels required when called:    5
  8078 ;; This function calls:
  8079 ;;		_LCDPutChar
  8080 ;; This function is called by:
  8081 ;;		_main
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           	psect	text34
  8086  0029D8                     __ptext34:
  8087                           	opt stack 0
  8088  0029D8                     _LCDPutStr:
  8089                           	opt stack 25
  8090                           
  8091                           ;lcd.c: 137: uint8_t i=0;
  8092                           
  8093                           ;incstack = 0
  8094  0029D8  0E00               	movlw	0
  8095  0029DA  6E1A               	movwf	LCDPutStr@i,c
  8096                           
  8097                           ;lcd.c: 140: while (str[i])
  8098  0029DC  D01D               	goto	l3295
  8099  0029DE                     l3291:
  8100                           
  8101                           ;lcd.c: 141: {
  8102                           ;lcd.c: 143: LCDPutChar(str[i++]);
  8103  0029DE  501A               	movf	LCDPutStr@i,w,c
  8104  0029E0  0D01               	mullw	1
  8105  0029E2  C016  F018         	movff	LCDPutStr@str,??_LCDPutStr
  8106  0029E6  C017  F019         	movff	LCDPutStr@str+1,??_LCDPutStr+1
  8107  0029EA  50F3               	movf	prodl,w,c
  8108  0029EC  2618               	addwf	??_LCDPutStr,f,c
  8109  0029EE  50F4               	movf	prodh,w,c
  8110  0029F0  2219               	addwfc	??_LCDPutStr+1,f,c
  8111  0029F2  C018  FFF6         	movff	??_LCDPutStr,tblptrl
  8112  0029F6  C019  FFF7         	movff	??_LCDPutStr+1,tblptrh
  8113  0029FA  6AF8               	clrf	tblptru,c
  8114  0029FC  0E07               	movlw	(high __ramtop+-1)
  8115  0029FE  64F7               	cpfsgt	tblptrh,c
  8116  002A00  D003               	bra	u2897
  8117  002A02  0008               	tblrd		*
  8118  002A04  50F5               	movf	tablat,w,c
  8119  002A06  D005               	bra	u2890
  8120  002A08                     u2897:
  8121  002A08  CFF6 FFE9          	movff	tblptrl,fsr0l
  8122  002A0C  CFF7 FFEA          	movff	tblptrh,fsr0h
  8123  002A10  50EF               	movf	indf0,w,c
  8124  002A12                     u2890:
  8125  002A12  ECF5  F016         	call	_LCDPutChar
  8126  002A16  2A1A               	incf	LCDPutStr@i,f,c
  8127  002A18                     l3295:
  8128  002A18  501A               	movf	LCDPutStr@i,w,c
  8129  002A1A  0D01               	mullw	1
  8130  002A1C  C016  F018         	movff	LCDPutStr@str,??_LCDPutStr
  8131  002A20  C017  F019         	movff	LCDPutStr@str+1,??_LCDPutStr+1
  8132  002A24  50F3               	movf	prodl,w,c
  8133  002A26  2618               	addwf	??_LCDPutStr,f,c
  8134  002A28  50F4               	movf	prodh,w,c
  8135  002A2A  2219               	addwfc	??_LCDPutStr+1,f,c
  8136  002A2C  C018  FFF6         	movff	??_LCDPutStr,tblptrl
  8137  002A30  C019  FFF7         	movff	??_LCDPutStr+1,tblptrh
  8138  002A34  6AF8               	clrf	tblptru,c
  8139  002A36  0E07               	movlw	(high __ramtop+-1)
  8140  002A38  64F7               	cpfsgt	tblptrh,c
  8141  002A3A  D003               	bra	u2907
  8142  002A3C  0008               	tblrd		*
  8143  002A3E  50F5               	movf	tablat,w,c
  8144  002A40  D005               	bra	u2900
  8145  002A42                     u2907:
  8146  002A42  CFF6 FFE9          	movff	tblptrl,fsr0l
  8147  002A46  CFF7 FFEA          	movff	tblptrh,fsr0h
  8148  002A4A  50EF               	movf	indf0,w,c
  8149  002A4C                     u2900:
  8150  002A4C  0900               	iorlw	0
  8151  002A4E  B4D8               	btfsc	status,2,c
  8152  002A50  0012               	return	
  8153  002A52  D7C5               	goto	l3291
  8154  002A54                     __end_of_LCDPutStr:
  8155                           	opt stack 0
  8156                           tblptru	equ	0xFF8
  8157                           tblptrh	equ	0xFF7
  8158                           tblptrl	equ	0xFF6
  8159                           tablat	equ	0xFF5
  8160                           prodh	equ	0xFF4
  8161                           prodl	equ	0xFF3
  8162                           intcon	equ	0xFF2
  8163                           intcon2	equ	0xFF1
  8164                           intcon3	equ	0xFF0
  8165                           indf0	equ	0xFEF
  8166                           postinc0	equ	0xFEE
  8167                           fsr0h	equ	0xFEA
  8168                           fsr0l	equ	0xFE9
  8169                           wreg	equ	0xFE8
  8170                           indf2	equ	0xFDF
  8171                           postinc2	equ	0xFDE
  8172                           postdec2	equ	0xFDD
  8173                           fsr2h	equ	0xFDA
  8174                           fsr2l	equ	0xFD9
  8175                           status	equ	0xFD8
  8176                           
  8177 ;; *************** function _LCDPutChar *****************
  8178 ;; Defined at:
  8179 ;;		line 103 in file "lcd.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;  ch              1    wreg     unsigned char 
  8182 ;; Auto vars:     Size  Location     Type
  8183 ;;  ch              1   20[COMRAM] unsigned char 
  8184 ;; Return value:  Size  Location     Type
  8185 ;;                  1    wreg      void 
  8186 ;; Registers used:
  8187 ;;		wreg, status,2, status,0, cstack
  8188 ;; Tracked objects:
  8189 ;;		On entry : 0/0
  8190 ;;		On exit  : 0/0
  8191 ;;		Unchanged: 0/0
  8192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8193 ;;      Params:         0       0       0       0       0       0       0       0       0
  8194 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8196 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8197 ;;Total ram usage:        1 bytes
  8198 ;; Hardware stack levels used:    1
  8199 ;; Hardware stack levels required when called:    4
  8200 ;; This function calls:
  8201 ;;		_LCDWriteNibble
  8202 ;; This function is called by:
  8203 ;;		_LCDPutStr
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           	psect	text35
  8208  002DEA                     __ptext35:
  8209                           	opt stack 0
  8210  002DEA                     _LCDPutChar:
  8211                           	opt stack 25
  8212                           
  8213                           ;incstack = 0
  8214                           ;LCDPutChar@ch stored from wreg
  8215  002DEA  6E15               	movwf	LCDPutChar@ch,c
  8216                           
  8217                           ;lcd.c: 105: _delay((unsigned long)((5)*(1000000/4000.0)));
  8218  002DEC  0EFA               	movlw	250
  8219  002DEE                     u4447:
  8220  002DEE  D000               	nop2	
  8221  002DF0  2EE8               	decfsz	wreg,f,c
  8222  002DF2  D7FD               	bra	u4447
  8223                           
  8224                           ;lcd.c: 108: LCDWriteNibble(ch,1);
  8225  002DF4  0E01               	movlw	1
  8226  002DF6  6E13               	movwf	LCDWriteNibble@rs,c
  8227  002DF8  5015               	movf	LCDPutChar@ch,w,c
  8228  002DFA  ECCC  F016         	call	_LCDWriteNibble
  8229                           
  8230                           ;lcd.c: 111: ch = (ch << 4);
  8231  002DFE  3815               	swapf	LCDPutChar@ch,w,c
  8232  002E00  0BF0               	andlw	240
  8233  002E02  6E15               	movwf	LCDPutChar@ch,c
  8234                           
  8235                           ;lcd.c: 114: LCDWriteNibble(ch,1);
  8236  002E04  0E01               	movlw	1
  8237  002E06  6E13               	movwf	LCDWriteNibble@rs,c
  8238  002E08  5015               	movf	LCDPutChar@ch,w,c
  8239  002E0A  ECCC  F016         	call	_LCDWriteNibble
  8240  002E0E  0012               	return		;funcret
  8241  002E10                     __end_of_LCDPutChar:
  8242                           	opt stack 0
  8243                           tblptru	equ	0xFF8
  8244                           tblptrh	equ	0xFF7
  8245                           tblptrl	equ	0xFF6
  8246                           tablat	equ	0xFF5
  8247                           prodh	equ	0xFF4
  8248                           prodl	equ	0xFF3
  8249                           intcon	equ	0xFF2
  8250                           intcon2	equ	0xFF1
  8251                           intcon3	equ	0xFF0
  8252                           indf0	equ	0xFEF
  8253                           postinc0	equ	0xFEE
  8254                           fsr0h	equ	0xFEA
  8255                           fsr0l	equ	0xFE9
  8256                           wreg	equ	0xFE8
  8257                           indf2	equ	0xFDF
  8258                           postinc2	equ	0xFDE
  8259                           postdec2	equ	0xFDD
  8260                           fsr2h	equ	0xFDA
  8261                           fsr2l	equ	0xFD9
  8262                           status	equ	0xFD8
  8263                           
  8264 ;; *************** function _LCDGoto *****************
  8265 ;; Defined at:
  8266 ;;		line 148 in file "lcd.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;  pos             1    wreg     unsigned char 
  8269 ;;  ln              1   21[COMRAM] unsigned char 
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;  pos             1   26[COMRAM] unsigned char 
  8272 ;; Return value:  Size  Location     Type
  8273 ;;                  1    wreg      void 
  8274 ;; Registers used:
  8275 ;;		wreg, status,2, status,0, cstack
  8276 ;; Tracked objects:
  8277 ;;		On entry : 0/0
  8278 ;;		On exit  : 0/0
  8279 ;;		Unchanged: 0/0
  8280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8281 ;;      Params:         1       0       0       0       0       0       0       0       0
  8282 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8283 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8284 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8285 ;;Total ram usage:        6 bytes
  8286 ;; Hardware stack levels used:    1
  8287 ;; Hardware stack levels required when called:    5
  8288 ;; This function calls:
  8289 ;;		_LCDPutCmd
  8290 ;; This function is called by:
  8291 ;;		_main
  8292 ;; This function uses a non-reentrant model
  8293 ;;
  8294                           
  8295                           	psect	text36
  8296  002C2A                     __ptext36:
  8297                           	opt stack 0
  8298  002C2A                     _LCDGoto:
  8299                           	opt stack 25
  8300                           
  8301                           ;incstack = 0
  8302                           ;LCDGoto@pos stored from wreg
  8303  002C2A  6E1B               	movwf	LCDGoto@pos,c
  8304                           
  8305                           ;lcd.c: 151: if ((ln > (2-1)) || (pos > (16-1)))
  8306  002C2C  0E02               	movlw	2
  8307  002C2E  6016               	cpfslt	LCDGoto@ln,c
  8308  002C30  0012               	return	
  8309  002C32  0E0F               	movlw	15
  8310  002C34  641B               	cpfsgt	LCDGoto@pos,c
  8311  002C36  D001               	goto	l3647
  8312  002C38  0012               	return	
  8313  002C3A                     l3647:
  8314                           
  8315                           ;lcd.c: 155: }
  8316                           ;lcd.c: 158: LCDPutCmd((ln == 1) ? (0xC0 | pos) : (0x80 | pos));
  8317  002C3A  0416               	decf	LCDGoto@ln,w,c
  8318  002C3C  B4D8               	btfsc	status,2,c
  8319  002C3E  D002               	goto	l3651
  8320  002C40  0E80               	movlw	128
  8321  002C42  D001               	goto	L8
  8322  002C44                     l3651:
  8323  002C44  0EC0               	movlw	192
  8324  002C46                     L8:
  8325  002C46  C01B  F017         	movff	LCDGoto@pos,??_LCDGoto
  8326  002C4A  6A18               	clrf	(??_LCDGoto+1)& (0+255),c
  8327  002C4C  1017               	iorwf	??_LCDGoto,w,c
  8328  002C4E  6E19               	movwf	_LCDGoto$1025,c
  8329  002C50  5018               	movf	??_LCDGoto+1,w,c
  8330  002C52  6E1A               	movwf	_LCDGoto$1025+1,c
  8331  002C54  5019               	movf	_LCDGoto$1025,w,c
  8332  002C56  ECB5  F016         	call	_LCDPutCmd
  8333                           
  8334                           ;lcd.c: 161: _delay((unsigned long)((5)*(1000000/4000.0)));
  8335  002C5A  0EFA               	movlw	250
  8336  002C5C                     u4457:
  8337  002C5C  D000               	nop2	
  8338  002C5E  2EE8               	decfsz	wreg,f,c
  8339  002C60  D7FD               	bra	u4457
  8340  002C62  0012               	return		;funcret
  8341  002C64                     __end_of_LCDGoto:
  8342                           	opt stack 0
  8343                           tblptru	equ	0xFF8
  8344                           tblptrh	equ	0xFF7
  8345                           tblptrl	equ	0xFF6
  8346                           tablat	equ	0xFF5
  8347                           prodh	equ	0xFF4
  8348                           prodl	equ	0xFF3
  8349                           intcon	equ	0xFF2
  8350                           intcon2	equ	0xFF1
  8351                           intcon3	equ	0xFF0
  8352                           indf0	equ	0xFEF
  8353                           postinc0	equ	0xFEE
  8354                           fsr0h	equ	0xFEA
  8355                           fsr0l	equ	0xFE9
  8356                           wreg	equ	0xFE8
  8357                           indf2	equ	0xFDF
  8358                           postinc2	equ	0xFDE
  8359                           postdec2	equ	0xFDD
  8360                           fsr2h	equ	0xFDA
  8361                           fsr2l	equ	0xFD9
  8362                           status	equ	0xFD8
  8363                           
  8364 ;; *************** function _LCDPutCmd *****************
  8365 ;; Defined at:
  8366 ;;		line 118 in file "lcd.c"
  8367 ;; Parameters:    Size  Location     Type
  8368 ;;  ch              1    wreg     unsigned char 
  8369 ;; Auto vars:     Size  Location     Type
  8370 ;;  ch              1   20[COMRAM] unsigned char 
  8371 ;; Return value:  Size  Location     Type
  8372 ;;                  1    wreg      void 
  8373 ;; Registers used:
  8374 ;;		wreg, status,2, status,0, cstack
  8375 ;; Tracked objects:
  8376 ;;		On entry : 0/0
  8377 ;;		On exit  : 0/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8380 ;;      Params:         0       0       0       0       0       0       0       0       0
  8381 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8382 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8383 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8384 ;;Total ram usage:        1 bytes
  8385 ;; Hardware stack levels used:    1
  8386 ;; Hardware stack levels required when called:    4
  8387 ;; This function calls:
  8388 ;;		_LCDWriteNibble
  8389 ;; This function is called by:
  8390 ;;		_main
  8391 ;;		_LCD_Initialize
  8392 ;;		_LCDGoto
  8393 ;; This function uses a non-reentrant model
  8394 ;;
  8395                           
  8396                           	psect	text37
  8397  002D6A                     __ptext37:
  8398                           	opt stack 0
  8399  002D6A                     _LCDPutCmd:
  8400                           	opt stack 25
  8401                           
  8402                           ;incstack = 0
  8403                           ;LCDPutCmd@ch stored from wreg
  8404  002D6A  6E15               	movwf	LCDPutCmd@ch,c
  8405                           
  8406                           ;lcd.c: 120: _delay((unsigned long)((5)*(1000000/4000.0)));
  8407  002D6C  0EFA               	movlw	250
  8408  002D6E                     u4467:
  8409  002D6E  D000               	nop2	
  8410  002D70  2EE8               	decfsz	wreg,f,c
  8411  002D72  D7FD               	bra	u4467
  8412                           
  8413                           ;lcd.c: 123: LCDWriteNibble(ch,0);
  8414  002D74  0E00               	movlw	0
  8415  002D76  6E13               	movwf	LCDWriteNibble@rs,c
  8416  002D78  5015               	movf	LCDPutCmd@ch,w,c
  8417  002D7A  ECCC  F016         	call	_LCDWriteNibble
  8418                           
  8419                           ;lcd.c: 126: ch = (ch << 4);
  8420  002D7E  3815               	swapf	LCDPutCmd@ch,w,c
  8421  002D80  0BF0               	andlw	240
  8422  002D82  6E15               	movwf	LCDPutCmd@ch,c
  8423                           
  8424                           ;lcd.c: 128: _delay((unsigned long)((1)*(1000000/4000.0)));
  8425  002D84  0E53               	movlw	83
  8426  002D86                     u4477:
  8427  002D86  2EE8               	decfsz	wreg,f,c
  8428  002D88  D7FE               	bra	u4477
  8429  002D8A  F000               	nop	
  8430                           
  8431                           ;lcd.c: 131: LCDWriteNibble(ch,0);
  8432  002D8C  0E00               	movlw	0
  8433  002D8E  6E13               	movwf	LCDWriteNibble@rs,c
  8434  002D90  5015               	movf	LCDPutCmd@ch,w,c
  8435  002D92  ECCC  F016         	call	_LCDWriteNibble
  8436  002D96  0012               	return		;funcret
  8437  002D98                     __end_of_LCDPutCmd:
  8438                           	opt stack 0
  8439                           tblptru	equ	0xFF8
  8440                           tblptrh	equ	0xFF7
  8441                           tblptrl	equ	0xFF6
  8442                           tablat	equ	0xFF5
  8443                           prodh	equ	0xFF4
  8444                           prodl	equ	0xFF3
  8445                           intcon	equ	0xFF2
  8446                           intcon2	equ	0xFF1
  8447                           intcon3	equ	0xFF0
  8448                           indf0	equ	0xFEF
  8449                           postinc0	equ	0xFEE
  8450                           fsr0h	equ	0xFEA
  8451                           fsr0l	equ	0xFE9
  8452                           wreg	equ	0xFE8
  8453                           indf2	equ	0xFDF
  8454                           postinc2	equ	0xFDE
  8455                           postdec2	equ	0xFDD
  8456                           fsr2h	equ	0xFDA
  8457                           fsr2l	equ	0xFD9
  8458                           status	equ	0xFD8
  8459                           
  8460 ;; *************** function _LCDWriteNibble *****************
  8461 ;; Defined at:
  8462 ;;		line 76 in file "lcd.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;  ch              1    wreg     unsigned char 
  8465 ;;  rs              1   18[COMRAM] unsigned char 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;  ch              1   19[COMRAM] unsigned char 
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  1    wreg      void 
  8470 ;; Registers used:
  8471 ;;		wreg, status,2, status,0
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8477 ;;      Params:         1       0       0       0       0       0       0       0       0
  8478 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8479 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8480 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8481 ;;Total ram usage:        2 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    3
  8484 ;; This function calls:
  8485 ;;		Nothing
  8486 ;; This function is called by:
  8487 ;;		_LCDPutChar
  8488 ;;		_LCDPutCmd
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           	psect	text38
  8493  002D98                     __ptext38:
  8494                           	opt stack 0
  8495  002D98                     _LCDWriteNibble:
  8496                           	opt stack 25
  8497                           
  8498                           ;incstack = 0
  8499                           ;LCDWriteNibble@ch stored from wreg
  8500  002D98  6E14               	movwf	LCDWriteNibble@ch,c
  8501                           
  8502                           ;lcd.c: 79: ch = (ch >> 4);
  8503  002D9A  3814               	swapf	LCDWriteNibble@ch,w,c
  8504  002D9C  0B0F               	andlw	15
  8505  002D9E  6E14               	movwf	LCDWriteNibble@ch,c
  8506                           
  8507                           ;lcd.c: 82: ch = (ch & 0x0F);
  8508  002DA0  5014               	movf	LCDWriteNibble@ch,w,c
  8509  002DA2  0B0F               	andlw	15
  8510  002DA4  6E14               	movwf	LCDWriteNibble@ch,c
  8511                           
  8512                           ;lcd.c: 85: PORTD = (PORTD & 0xF0);
  8513  002DA6  5083               	movf	3971,w,c	;volatile
  8514  002DA8  0BF0               	andlw	240
  8515  002DAA  6E83               	movwf	3971,c	;volatile
  8516                           
  8517                           ;lcd.c: 88: PORTD = (PORTD | ch);
  8518  002DAC  5083               	movf	3971,w,c	;volatile
  8519  002DAE  1014               	iorwf	LCDWriteNibble@ch,w,c
  8520  002DB0  6E83               	movwf	3971,c	;volatile
  8521                           
  8522                           ;lcd.c: 91: PORTDbits.RD4 = rs;
  8523  002DB2  B013               	btfsc	LCDWriteNibble@rs,0,c
  8524  002DB4  D002               	bra	u1945
  8525  002DB6  9883               	bcf	3971,4,c	;volatile
  8526  002DB8  D001               	bra	u1946
  8527  002DBA                     u1945:
  8528  002DBA  8883               	bsf	3971,4,c	;volatile
  8529  002DBC                     u1946:
  8530                           
  8531                           ;lcd.c: 94: PORTDbits.RD5 = 0;
  8532  002DBC  9A83               	bcf	3971,5,c	;volatile
  8533                           
  8534                           ;lcd.c: 97: PORTDbits.RD6 = 1;
  8535  002DBE  8C83               	bsf	3971,6,c	;volatile
  8536                           
  8537                           ;lcd.c: 100: PORTDbits.RD6 = 0;
  8538  002DC0  9C83               	bcf	3971,6,c	;volatile
  8539  002DC2  0012               	return		;funcret
  8540  002DC4                     __end_of_LCDWriteNibble:
  8541                           	opt stack 0
  8542                           tblptru	equ	0xFF8
  8543                           tblptrh	equ	0xFF7
  8544                           tblptrl	equ	0xFF6
  8545                           tablat	equ	0xFF5
  8546                           prodh	equ	0xFF4
  8547                           prodl	equ	0xFF3
  8548                           intcon	equ	0xFF2
  8549                           intcon2	equ	0xFF1
  8550                           intcon3	equ	0xFF0
  8551                           indf0	equ	0xFEF
  8552                           postinc0	equ	0xFEE
  8553                           fsr0h	equ	0xFEA
  8554                           fsr0l	equ	0xFE9
  8555                           wreg	equ	0xFE8
  8556                           indf2	equ	0xFDF
  8557                           postinc2	equ	0xFDE
  8558                           postdec2	equ	0xFDD
  8559                           fsr2h	equ	0xFDA
  8560                           fsr2l	equ	0xFD9
  8561                           status	equ	0xFD8
  8562                           
  8563 ;; *************** function _ISR *****************
  8564 ;; Defined at:
  8565 ;;		line 82 in file "main.c"
  8566 ;; Parameters:    Size  Location     Type
  8567 ;;		None
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;  status          1   17[COMRAM] unsigned char 
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  1    wreg      void 
  8572 ;; Registers used:
  8573 ;;		wreg, status,2, status,0, cstack
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8579 ;;      Params:         0       0       0       0       0       0       0       0       0
  8580 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8581 ;;      Temps:         14       0       0       0       0       0       0       0       0
  8582 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8583 ;;Total ram usage:       15 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; Hardware stack levels required when called:    2
  8586 ;; This function calls:
  8587 ;;		i2_spi_fast_shift
  8588 ;;		i2_wl_module_config_register
  8589 ;; This function is called by:
  8590 ;;		Interrupt level 2
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           	psect	intcode
  8595  000008                     __pintcode:
  8596                           	opt stack 0
  8597  000008                     _ISR:
  8598                           	opt stack 24
  8599                           
  8600                           ;incstack = 0
  8601  000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8602  00000A  CFFA F004          	movff	pclath,??_ISR
  8603  00000E  CFFB F005          	movff	pclatu,??_ISR+1
  8604  000012  CFE9 F006          	movff	fsr0l,??_ISR+2
  8605  000016  CFEA F007          	movff	fsr0h,??_ISR+3
  8606  00001A  CFE1 F008          	movff	fsr1l,??_ISR+4
  8607  00001E  CFE2 F009          	movff	fsr1h,??_ISR+5
  8608  000022  CFD9 F00A          	movff	fsr2l,??_ISR+6
  8609  000026  CFDA F00B          	movff	fsr2h,??_ISR+7
  8610  00002A  CFF3 F00C          	movff	prodl,??_ISR+8
  8611  00002E  CFF4 F00D          	movff	prodh,??_ISR+9
  8612  000032  CFF6 F00E          	movff	tblptrl,??_ISR+10
  8613  000036  CFF7 F00F          	movff	tblptrh,??_ISR+11
  8614  00003A  CFF8 F010          	movff	tblptru,??_ISR+12
  8615  00003E  CFF5 F011          	movff	tablat,??_ISR+13
  8616                           
  8617                           ;main.c: 84: if( INTCON3bits.INT2IF ){
  8618  000042  A2F0               	btfss	intcon3,1,c	;volatile
  8619  000044  D021               	goto	i2l58
  8620                           
  8621                           ;main.c: 85: unsigned char status;
  8622                           ;main.c: 88: LATBbits.LATB4 = 0;;
  8623  000046  988A               	bcf	3978,4,c	;volatile
  8624                           
  8625                           ;main.c: 89: status = spi_fast_shift(0xFF);
  8626  000048  0EFF               	movlw	255
  8627  00004A  EC87  F017         	call	i2_spi_fast_shift
  8628  00004E  6E12               	movwf	ISR@status,c
  8629                           
  8630                           ;main.c: 90: LATBbits.LATB4 = 1;;
  8631  000050  888A               	bsf	3978,4,c	;volatile
  8632                           
  8633                           ;main.c: 93: if (status & (1<<5)){
  8634  000052  AA12               	btfss	ISR@status,5,c
  8635  000054  D007               	goto	i2l3709
  8636                           
  8637                           ;main.c: 94: wl_module_config_register(0x07, (1<<5));
  8638  000056  0E20               	movlw	32
  8639  000058  6E02               	movwf	i2wl_module_config_register@value,c
  8640  00005A  0E07               	movlw	7
  8641  00005C  EC6A  F017         	call	i2_wl_module_config_register
  8642                           
  8643                           ;main.c: 95: PTX=0;
  8644  000060  0E00               	movlw	0
  8645  000062  6E4A               	movwf	_PTX,c	;volatile
  8646  000064                     i2l3709:
  8647                           
  8648                           ;main.c: 96: }
  8649                           ;main.c: 98: if (status & (1<<4)){
  8650  000064  A812               	btfss	ISR@status,4,c
  8651  000066  D008               	goto	i2l3719
  8652                           
  8653                           ;main.c: 99: wl_module_config_register(0x07, (1<<4));
  8654  000068  0E10               	movlw	16
  8655  00006A  6E02               	movwf	i2wl_module_config_register@value,c
  8656  00006C  0E07               	movlw	7
  8657  00006E  EC6A  F017         	call	i2_wl_module_config_register
  8658                           
  8659                           ;main.c: 100: LATBbits.LATB3 = 1;;
  8660  000072  868A               	bsf	3978,3,c	;volatile
  8661                           
  8662                           ;main.c: 101: _delay((unsigned long)((10)*(1000000/4000000.0)));
  8663  000074  D000               	nop2		;2 cycle nop
  8664                           
  8665                           ;main.c: 102: LATBbits.LATB3 = 0;;
  8666  000076  968A               	bcf	3978,3,c	;volatile
  8667  000078                     i2l3719:
  8668                           
  8669                           ;main.c: 103: }
  8670                           ;main.c: 105: if (status & (1<<0)){
  8671  000078  A012               	btfss	ISR@status,0,c
  8672  00007A  D005               	goto	i2l3727
  8673                           
  8674                           ;main.c: 106: LATBbits.LATB4 = 0;;
  8675  00007C  988A               	bcf	3978,4,c	;volatile
  8676                           
  8677                           ;main.c: 107: spi_fast_shift(0xE1);
  8678  00007E  0EE1               	movlw	225
  8679  000080  EC87  F017         	call	i2_spi_fast_shift
  8680                           
  8681                           ;main.c: 108: LATBbits.LATB4 = 1;;
  8682  000084  888A               	bsf	3978,4,c	;volatile
  8683  000086                     i2l3727:
  8684                           
  8685                           ;main.c: 109: }
  8686                           ;main.c: 111: INTCON3bits.INT2IF = 0;
  8687  000086  92F0               	bcf	intcon3,1,c	;volatile
  8688  000088                     i2l58:
  8689  000088  C011  FFF5         	movff	??_ISR+13,tablat
  8690  00008C  C010  FFF8         	movff	??_ISR+12,tblptru
  8691  000090  C00F  FFF7         	movff	??_ISR+11,tblptrh
  8692  000094  C00E  FFF6         	movff	??_ISR+10,tblptrl
  8693  000098  C00D  FFF4         	movff	??_ISR+9,prodh
  8694  00009C  C00C  FFF3         	movff	??_ISR+8,prodl
  8695  0000A0  C00B  FFDA         	movff	??_ISR+7,fsr2h
  8696  0000A4  C00A  FFD9         	movff	??_ISR+6,fsr2l
  8697  0000A8  C009  FFE2         	movff	??_ISR+5,fsr1h
  8698  0000AC  C008  FFE1         	movff	??_ISR+4,fsr1l
  8699  0000B0  C007  FFEA         	movff	??_ISR+3,fsr0h
  8700  0000B4  C006  FFE9         	movff	??_ISR+2,fsr0l
  8701  0000B8  C005  FFFB         	movff	??_ISR+1,pclatu
  8702  0000BC  C004  FFFA         	movff	??_ISR,pclath
  8703  0000C0  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8704  0000C2  0011               	retfie		f
  8705  0000C4                     __end_of_ISR:
  8706                           	opt stack 0
  8707                           pclatu	equ	0xFFB
  8708                           pclath	equ	0xFFA
  8709                           tblptru	equ	0xFF8
  8710                           tblptrh	equ	0xFF7
  8711                           tblptrl	equ	0xFF6
  8712                           tablat	equ	0xFF5
  8713                           prodh	equ	0xFF4
  8714                           prodl	equ	0xFF3
  8715                           intcon	equ	0xFF2
  8716                           intcon2	equ	0xFF1
  8717                           intcon3	equ	0xFF0
  8718                           indf0	equ	0xFEF
  8719                           postinc0	equ	0xFEE
  8720                           fsr0h	equ	0xFEA
  8721                           fsr0l	equ	0xFE9
  8722                           wreg	equ	0xFE8
  8723                           fsr1h	equ	0xFE2
  8724                           fsr1l	equ	0xFE1
  8725                           indf2	equ	0xFDF
  8726                           postinc2	equ	0xFDE
  8727                           postdec2	equ	0xFDD
  8728                           fsr2h	equ	0xFDA
  8729                           fsr2l	equ	0xFD9
  8730                           status	equ	0xFD8
  8731                           
  8732 ;; *************** function i2_wl_module_config_register *****************
  8733 ;; Defined at:
  8734 ;;		line 417 in file "wl_module.c"
  8735 ;; Parameters:    Size  Location     Type
  8736 ;;  reg             1    wreg     unsigned char 
  8737 ;;  value           1    1[COMRAM] unsigned char 
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;  reg             1    2[COMRAM] unsigned char 
  8740 ;; Return value:  Size  Location     Type
  8741 ;;                  1    wreg      void 
  8742 ;; Registers used:
  8743 ;;		wreg, status,2, status,0, cstack
  8744 ;; Tracked objects:
  8745 ;;		On entry : 0/0
  8746 ;;		On exit  : 0/0
  8747 ;;		Unchanged: 0/0
  8748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8749 ;;      Params:         1       0       0       0       0       0       0       0       0
  8750 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8751 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8752 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8753 ;;Total ram usage:        2 bytes
  8754 ;; Hardware stack levels used:    1
  8755 ;; Hardware stack levels required when called:    1
  8756 ;; This function calls:
  8757 ;;		i2_spi_fast_shift
  8758 ;; This function is called by:
  8759 ;;		_ISR
  8760 ;; This function uses a non-reentrant model
  8761 ;;
  8762                           
  8763                           	psect	text40
  8764  002ED4                     __ptext40:
  8765                           	opt stack 0
  8766  002ED4                     i2_wl_module_config_register:
  8767                           	opt stack 24
  8768                           
  8769                           ;incstack = 0
  8770                           ;i2wl_module_config_register@reg stored from wreg
  8771  002ED4  6E03               	movwf	i2wl_module_config_register@reg,c
  8772                           
  8773                           ;wl_module.c: 420: LATBbits.LATB4 = 0;;
  8774  002ED6  988A               	bcf	3978,4,c	;volatile
  8775                           
  8776                           ;wl_module.c: 421: spi_fast_shift(0x20 | (0x1F & reg));
  8777  002ED8  5003               	movf	i2wl_module_config_register@reg,w,c
  8778  002EDA  0B1F               	andlw	31
  8779  002EDC  0920               	iorlw	32
  8780  002EDE  EC87  F017         	call	i2_spi_fast_shift
  8781                           
  8782                           ;wl_module.c: 422: spi_fast_shift(value);
  8783  002EE2  5002               	movf	i2wl_module_config_register@value,w,c
  8784  002EE4  EC87  F017         	call	i2_spi_fast_shift
  8785                           
  8786                           ;wl_module.c: 423: LATBbits.LATB4 = 1;;
  8787  002EE8  888A               	bsf	3978,4,c	;volatile
  8788  002EEA  0012               	return		;funcret
  8789  002EEC                     __end_ofi2_wl_module_config_register:
  8790                           	opt stack 0
  8791                           pclatu	equ	0xFFB
  8792                           pclath	equ	0xFFA
  8793                           tblptru	equ	0xFF8
  8794                           tblptrh	equ	0xFF7
  8795                           tblptrl	equ	0xFF6
  8796                           tablat	equ	0xFF5
  8797                           prodh	equ	0xFF4
  8798                           prodl	equ	0xFF3
  8799                           intcon	equ	0xFF2
  8800                           intcon2	equ	0xFF1
  8801                           intcon3	equ	0xFF0
  8802                           indf0	equ	0xFEF
  8803                           postinc0	equ	0xFEE
  8804                           fsr0h	equ	0xFEA
  8805                           fsr0l	equ	0xFE9
  8806                           wreg	equ	0xFE8
  8807                           fsr1h	equ	0xFE2
  8808                           fsr1l	equ	0xFE1
  8809                           indf2	equ	0xFDF
  8810                           postinc2	equ	0xFDE
  8811                           postdec2	equ	0xFDD
  8812                           fsr2h	equ	0xFDA
  8813                           fsr2l	equ	0xFD9
  8814                           status	equ	0xFD8
  8815                           
  8816 ;; *************** function i2_spi_fast_shift *****************
  8817 ;; Defined at:
  8818 ;;		line 62 in file "spi.c"
  8819 ;; Parameters:    Size  Location     Type
  8820 ;;  data            1    wreg     unsigned char 
  8821 ;; Auto vars:     Size  Location     Type
  8822 ;;  data            1    0[COMRAM] unsigned char 
  8823 ;; Return value:  Size  Location     Type
  8824 ;;                  1    wreg      unsigned char 
  8825 ;; Registers used:
  8826 ;;		wreg, status,2
  8827 ;; Tracked objects:
  8828 ;;		On entry : 0/0
  8829 ;;		On exit  : 0/0
  8830 ;;		Unchanged: 0/0
  8831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8832 ;;      Params:         0       0       0       0       0       0       0       0       0
  8833 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8834 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8835 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8836 ;;Total ram usage:        1 bytes
  8837 ;; Hardware stack levels used:    1
  8838 ;; This function calls:
  8839 ;;		Nothing
  8840 ;; This function is called by:
  8841 ;;		_ISR
  8842 ;;		i2_wl_module_config_register
  8843 ;; This function uses a non-reentrant model
  8844 ;;
  8845                           
  8846                           	psect	text41
  8847  002F0E                     __ptext41:
  8848                           	opt stack 0
  8849  002F0E                     i2_spi_fast_shift:
  8850                           	opt stack 24
  8851                           
  8852                           ;incstack = 0
  8853                           ;i2spi_fast_shift@data stored from wreg
  8854  002F0E  6E01               	movwf	i2spi_fast_shift@data,c
  8855                           
  8856                           ;spi.c: 63: SSP1BUF = data;
  8857  002F10  C001  FFC9         	movff	i2spi_fast_shift@data,4041	;volatile
  8858  002F14                     i2l98:
  8859  002F14  A69E               	btfss	3998,3,c	;volatile
  8860  002F16  D7FE               	goto	i2l98
  8861                           
  8862                           ;spi.c: 65: PIR1bits.SSP1IF = 0;
  8863  002F18  969E               	bcf	3998,3,c	;volatile
  8864                           
  8865                           ;spi.c: 66: return SSP1BUF;
  8866  002F1A  50C9               	movf	4041,w,c	;volatile
  8867  002F1C  0012               	return		;funcret
  8868  002F1E                     __end_ofi2_spi_fast_shift:
  8869                           	opt stack 0
  8870                           pclatu	equ	0xFFB
  8871                           pclath	equ	0xFFA
  8872                           tblptru	equ	0xFF8
  8873                           tblptrh	equ	0xFF7
  8874                           tblptrl	equ	0xFF6
  8875                           tablat	equ	0xFF5
  8876                           prodh	equ	0xFF4
  8877                           prodl	equ	0xFF3
  8878                           intcon	equ	0xFF2
  8879                           intcon2	equ	0xFF1
  8880                           intcon3	equ	0xFF0
  8881                           indf0	equ	0xFEF
  8882                           postinc0	equ	0xFEE
  8883                           fsr0h	equ	0xFEA
  8884                           fsr0l	equ	0xFE9
  8885                           wreg	equ	0xFE8
  8886                           fsr1h	equ	0xFE2
  8887                           fsr1l	equ	0xFE1
  8888                           indf2	equ	0xFDF
  8889                           postinc2	equ	0xFDE
  8890                           postdec2	equ	0xFDD
  8891                           fsr2h	equ	0xFDA
  8892                           fsr2l	equ	0xFD9
  8893                           status	equ	0xFD8
  8894                           pclatu	equ	0xFFB
  8895                           pclath	equ	0xFFA
  8896                           tblptru	equ	0xFF8
  8897                           tblptrh	equ	0xFF7
  8898                           tblptrl	equ	0xFF6
  8899                           tablat	equ	0xFF5
  8900                           prodh	equ	0xFF4
  8901                           prodl	equ	0xFF3
  8902                           intcon	equ	0xFF2
  8903                           intcon2	equ	0xFF1
  8904                           intcon3	equ	0xFF0
  8905                           indf0	equ	0xFEF
  8906                           postinc0	equ	0xFEE
  8907                           fsr0h	equ	0xFEA
  8908                           fsr0l	equ	0xFE9
  8909                           wreg	equ	0xFE8
  8910                           fsr1h	equ	0xFE2
  8911                           fsr1l	equ	0xFE1
  8912                           indf2	equ	0xFDF
  8913                           postinc2	equ	0xFDE
  8914                           postdec2	equ	0xFDD
  8915                           fsr2h	equ	0xFDA
  8916                           fsr2l	equ	0xFD9
  8917                           status	equ	0xFD8
  8918                           
  8919                           	psect	rparam
  8920  0000                     pclatu	equ	0xFFB
  8921                           pclath	equ	0xFFA
  8922                           tblptru	equ	0xFF8
  8923                           tblptrh	equ	0xFF7
  8924                           tblptrl	equ	0xFF6
  8925                           tablat	equ	0xFF5
  8926                           prodh	equ	0xFF4
  8927                           prodl	equ	0xFF3
  8928                           intcon	equ	0xFF2
  8929                           intcon2	equ	0xFF1
  8930                           intcon3	equ	0xFF0
  8931                           indf0	equ	0xFEF
  8932                           postinc0	equ	0xFEE
  8933                           fsr0h	equ	0xFEA
  8934                           fsr0l	equ	0xFE9
  8935                           wreg	equ	0xFE8
  8936                           fsr1h	equ	0xFE2
  8937                           fsr1l	equ	0xFE1
  8938                           indf2	equ	0xFDF
  8939                           postinc2	equ	0xFDE
  8940                           postdec2	equ	0xFDD
  8941                           fsr2h	equ	0xFDA
  8942                           fsr2l	equ	0xFD9
  8943                           status	equ	0xFD8
  8944                           
  8945                           	psect	temp
  8946  00004B                     btemp:
  8947                           	opt stack 0
  8948  00004B                     	ds	1
  8949  0000                     int$flags	set	btemp
  8950                           pclatu	equ	0xFFB
  8951                           pclath	equ	0xFFA
  8952                           tblptru	equ	0xFF8
  8953                           tblptrh	equ	0xFF7
  8954                           tblptrl	equ	0xFF6
  8955                           tablat	equ	0xFF5
  8956                           prodh	equ	0xFF4
  8957                           prodl	equ	0xFF3
  8958                           intcon	equ	0xFF2
  8959                           intcon2	equ	0xFF1
  8960                           intcon3	equ	0xFF0
  8961                           indf0	equ	0xFEF
  8962                           postinc0	equ	0xFEE
  8963                           fsr0h	equ	0xFEA
  8964                           fsr0l	equ	0xFE9
  8965                           wreg	equ	0xFE8
  8966                           fsr1h	equ	0xFE2
  8967                           fsr1l	equ	0xFE1
  8968                           indf2	equ	0xFDF
  8969                           postinc2	equ	0xFDE
  8970                           postdec2	equ	0xFDD
  8971                           fsr2h	equ	0xFDA
  8972                           fsr2l	equ	0xFD9
  8973                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    118
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     58      74
    BANK0           160    145     145
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@Buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCDPutStr@str	PTR const unsigned char  size(2) Largest target is 20
		 -> main@Buffer(BANK0[20]), STR_1(CODE[15]), 

    wl_module_get_data@data	PTR unsigned char  size(2) Largest target is 32
		 -> main@hall(BANK0[32]), 

    spi_transfer_sync@datain	PTR unsigned char  size(2) Largest target is 32
		 -> wl_module_get_arc_cnt@data(COMRAM[1]), wl_module_get_plos_cnt@data(COMRAM[1]), wl_module_get_rf_setup@data(COMRAM[1]), wl_module_get_rf_ch@data(COMRAM[1]), 
		 -> wl_module_fifo_rx_empty@data(COMRAM[1]), wl_module_fifo_tx_empty@data(COMRAM[1]), wl_module_get_rx_pw@data(COMRAM[1]), wl_module_power_down@config(COMRAM[1]), 
		 -> wl_module_set_as_tx@config(COMRAM[1]), main@hall(BANK0[32]), 

    spi_transfer_sync@dataout	PTR unsigned char  size(2) Largest target is 32
		 -> wl_module_get_arc_cnt@data(COMRAM[1]), wl_module_get_plos_cnt@data(COMRAM[1]), wl_module_get_rf_setup@data(COMRAM[1]), wl_module_get_rf_ch@data(COMRAM[1]), 
		 -> wl_module_fifo_rx_empty@data(COMRAM[1]), wl_module_fifo_tx_empty@data(COMRAM[1]), wl_module_get_rx_pw@data(COMRAM[1]), wl_module_power_down@config(COMRAM[1]), 
		 -> wl_module_set_as_tx@config(COMRAM[1]), main@hall(BANK0[32]), 


Critical Paths under _main in COMRAM

    _wl_module_get_data->_spi_transfer_sync
    _wl_module_data_ready->_spi_fast_shift
    _wl_module_config->_wl_module_config_register
    _wl_module_config_register->_spi_fast_shift
    _sprintf->___lltoft
    ___wmul->___awdiv
    ___ftmul->___lltoft
    ___awdiv->___awmod
    ___lltoft->___fttol
    ___fttol->___wmul
    ___ftsub->___lltoft
    ___ftadd->___lltoft
    ___ftneg->___lltoft
    ___ftge->___lltoft
    _LCD_Initialize->_LCDPutCmd
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble
    _LCDGoto->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble

Critical Paths under _ISR in COMRAM

    _ISR->i2_wl_module_config_register
    i2_wl_module_config_register->i2_spi_fast_shift

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftge
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___ftneg
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___lltoft
    ___ftge->___ftadd
    ___ftdiv->_scale

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                54    54      0   62626
                                             91 BANK0     54    54      0
                            _LCDGoto
                          _LCDPutCmd
                          _LCDPutStr
                     _LCD_Initialize
                  _SYSTEM_Initialize
                        __delay_10ms
                            _sprintf
                   _wl_module_config
               _wl_module_data_ready
                 _wl_module_get_data
                     _wl_module_init
 ---------------------------------------------------------------------------------
 (1) _wl_module_init                                       0     0      0       0
                           _spi_init
 ---------------------------------------------------------------------------------
 (2) _spi_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _wl_module_get_data                                   3     1      2    2092
                                             24 COMRAM     3     1      2
                     _spi_fast_shift
                  _spi_transfer_sync
          _wl_module_config_register
 ---------------------------------------------------------------------------------
 (2) _spi_transfer_sync                                    6     0      6     453
                                             18 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (1) _wl_module_data_ready                                 1     1      0      45
                                             19 COMRAM     1     1      0
                     _spi_fast_shift
 ---------------------------------------------------------------------------------
 (1) _wl_module_config                                     0     0      0    1486
          _wl_module_config_register
 ---------------------------------------------------------------------------------
 (2) _wl_module_config_register                            2     1      1    1486
                                             19 COMRAM     2     1      1
                     _spi_fast_shift
 ---------------------------------------------------------------------------------
 (3) _spi_fast_shift                                       1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             46    40      6   56555
                                             53 BANK0     38    32      6
                            ___awdiv
                            ___awmod
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   11606
                                             22 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11327
                                             22 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2335
                                             32 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5290
                                              7 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1576
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1708
                                             24 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                             18 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                             18 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2403
                                             53 COMRAM     5     1      4
                                              0 BANK0      4     4      0
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     927
                                             18 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     802
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     828
                                             38 COMRAM    15    11      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4077
                                             44 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3780
                                             32 BANK0     12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     296
                                              4 BANK0      3     0      3
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     648
                                             44 BANK0      9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2580
                                             29 BANK0     15     9      6
                           ___ftpack
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2070
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) __delay_10ms                                          3     1      2      87
                                             18 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       1     1      0     413
                                             21 COMRAM     1     1      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr                                            5     3      2     631
                                             21 COMRAM     5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           1     1      0     413
                                             20 COMRAM     1     1      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDGoto                                              6     5      1     611
                                             21 COMRAM     6     5      1
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            1     1      0     413
                                             20 COMRAM     1     1      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       2     1      1     346
                                             18 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 15    15      0     207
                                              3 COMRAM    15    15      0
                   i2_spi_fast_shift
        i2_wl_module_config_register
 ---------------------------------------------------------------------------------
 (6) i2_wl_module_config_register                          2     1      1     118
                                              1 COMRAM     2     1      1
                   i2_spi_fast_shift
 ---------------------------------------------------------------------------------
 (7) i2_spi_fast_shift                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDGoto
     _LCDPutCmd
       _LCDWriteNibble
   _LCDPutCmd
     _LCDWriteNibble
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _LCD_Initialize
     _LCDPutCmd
       _LCDWriteNibble
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   __delay_10ms
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___awmod
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___fttol
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _wl_module_config
     _wl_module_config_register
       _spi_fast_shift
   _wl_module_data_ready
     _spi_fast_shift
   _wl_module_get_data
     _spi_fast_shift
     _spi_transfer_sync
     _wl_module_config_register
       _spi_fast_shift
   _wl_module_init
     _spi_init

 _ISR (ROOT)
   i2_spi_fast_shift
   i2_wl_module_config_register
     i2_spi_fast_shift

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     91      91       5       90.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3A      4A       1       78.7%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DB       6        0.0%
DATA                 0      0      DB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu May 25 17:36:04 2017

                      _LCD_Initialize 2C9C                  __size_of__delay_10ms 0020  
                         ?_LCDPutChar 0001                                    l39 2E46  
                                  l91 2C72                                    l98 2F04  
                        ___awdiv@sign 001E                   ___wmul@multiplicand 0023  
                        __CFG_CP0$OFF 000000                          __CFG_CP1$OFF 000000  
                        __CFG_CP2$OFF 000000                          __CFG_CP3$OFF 000000  
                        ___ftadd@exp1 008B                          ___ftadd@exp2 008A  
                         __CFG_LVP$ON 000000                          ___ftadd@sign 0089  
                                 l205 2E78                                   l410 0BB4  
                                 l420 0ED4                                   l404 0B42  
                                 l405 0B46                                   l406 106E  
                                 l433 1164                                   l461 157A  
                                 l741 1C72                                   l718 2820  
                                 l815 2D5C                                   l745 1CAC  
                                 l747 1CD4                                   l756 1DAA  
                                 l765 1DD4                                   l686 25C4  
                                 l790 249C                                   l783 240E  
                                 l776 2346                                   l784 2436  
                                 l865 29C6                                   l875 2B84  
                        __CFG_CPB$OFF 000000                          __CFG_CPD$OFF 000000  
                                 _ISR 0008                                   _PTX 004A  
                        ___awmod@sign 0018                                   wreg 000FE8  
                     __end_of_LCDGoto 2C64                                  ?_ISR 0001  
                        ___ftdiv@cntr 0086                          ___ftdiv@sign 008B  
                                l3005 24EA                                  l3111 270A  
                                l3103 2BB8                                  l3121 278E  
                                l3201 2B42                                  l3115 274A  
                                l3203 2B4E                                  l3051 25BE  
                                l3043 259A                                  l3027 255C  
                                l3019 252C                                  l3205 2B52  
                                l4101 0938                                  l3135 2602  
                                l3039 258A                                  l4023 208A  
                                l4015 1FC2                                  l4111 0978  
                                l3065 22A4                                  l3153 2668  
                                l3209 2B76                                  l3049 25B2  
                                l4105 0948                                  l3227 2E32  
                                l3059 226A                                  l3171 26B8  
                                l3163 2690                                  l4043 19E0  
                                l3085 2304                                  l2621 1C80  
                                l3165 269C                                  l3157 2678  
                                l3181 2978                                  l4061 1BE4  
                                l4037 1936                                  l4301 12D8  
                                l4117 0994                                  l4109 094E  
                                l3167 26A2                                  l3183 2984  
                                l4071 2ACA                                  l4055 1B3A  
                                l4047 1A06                                  l4311 1348  
                                l4151 0AF8                                  l4143 0A88  
                                l4127 09DA                                  l2633 1CCA  
                                l3193 29B8                                  l3185 2988  
                                l4073 2AD6                                  l4321 13A6  
                                l4233 0FCC                                  l4225 0FA4  
                                l4161 0B62                                  l4081 089C  
                                l3291 29DE                                  l2571 27D8  
                                l2563 27A2                                  l2651 1D48  
                                l2643 1D0C                                  l2627 1CBA  
                                l2803 2AAC                                  l4307 131A  
                                l4251 101C                                  l4227 0FB2  
                                l4219 0F04                                  l4235 0FD8  
                                l4163 0B82                                  l4155 0B26  
                                l2661 1D90                                  l2653 1D56  
                                l4413 179A                                  l4405 1742  
                                l4325 140C                                  l4245 1006  
                                l4181 0CA4                                  l4173 0BB8  
                                l4157 0B3A                                  l4421 17E6  
                                l3295 2A18                                  l2575 27EE  
                                l2567 27B0                                  l2663 1D9E  
                                l2655 1D62                                  l2751 290C  
                                l2807 2ABA                                  l4343 1484  
                                l4327 1412                                  l4263 109E  
                                l4247 100E                                  l4095 08E6  
                                l4087 08B4                                  l2577 280C  
                                l2569 27BA                                  l2649 1D3A  
                                l2753 2914                                  l2745 28F6  
                                l4409 176A                                  l4361 1548  
                                l4345 148C                                  l4353 1520  
                                l4281 1134                                  l4257 1066  
                                l4193 0DAE                                  l4169 0B9C  
                                l2833 2C66                                  l4441 286C  
                                l3651 2C44                                  l2579 2816  
                                l2771 294C                                  l2763 2934  
                                l2755 2918                                  l2739 28E6  
                                l4363 155C                                  l4355 152E  
                                l4339 1458                                  l4291 123E  
                                l4267 10C4                                  l4187 0D3A  
                                l4099 0922                                  l4419 17C8  
                                l2843 2C92                                  l2669 1DFE  
                                l2933 2E66                                  l3647 2C3A  
                                l2679 1E4C                                  l2943 23A8  
                                l2767 293E                                  l2791 2A82  
                                l2783 2A68                                  l4391 16F4  
                                l4375 15AE                                  l4367 157E  
                                l4287 1202                                  l4279 110A  
                                l4295 127C                                  l4199 0DE0  
                                l2793 2A8A                                  l4297 1292  
                                l2795 2A8E                                  l2787 2A74  
                                l4379 1600                                  l4299 12C2  
                                l2949 23D4                                  l4397 170E  
                                l4389 16E6                                  l2991 2496  
                                l2983 2472                                  l2799 2AA2  
                                l4399 171C                                  l2979 2462  
                                l3963 210C                                  l2989 248A  
                                l2999 24CC                                  l3983 2194  
                                l3993 21D2                                  l3969 2146  
                                l3987 21B2                                  l3997 21F0  
                                STR_1 0877                                  STR_2 0886  
                                _LATA 000F89                                  _LATB 000F8A  
                                _LATC 000F8B                                  _LATD 000F8C  
                                _LATE 000F8D                                  u2611 2246  
                                u2451 238C                                  u4310 1572  
                                u2631 2280                                  u2711 25E6  
                                u2471 23B8                                  u2730 2620  
                                u2900 2A4C                                  u1951 1C20  
                                u2735 2618                                  u1945 2DBA  
                                u1961 1C3E                                  u1946 2DBC  
                                u2907 2A42                                  u4427 2E38  
                                u4437 2CAC                                  u4447 2DEE  
                                u3671 20E8                                  u4457 2C5C  
                                u2890 2A12                                  u4467 2D6E  
                                u3691 2122                                  u4477 2D86  
                                u2897 2A08                                  u3890 0A20  
                                u3990 0BAC                                  u3895 0A14  
                                i2l58 0088                                  i2l98 2F14  
                                _WPUB 000F85                         __CFG_FCMEN$ON 000000  
                      _wl_module_init 2EA4                                  _main 2840  
                        ___ftpack@arg 0013                          ___ftpack@exp 0016  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                indf0 000FEF                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 004B                         __CFG_BORV$190 000000  
                         main@zaehler 00F0                    __size_of_LCDPutCmd 002E  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00C4                    __size_of_LCDPutStr 007C  
                       __CFG_IESO$OFF 000000                         __CFG_FOSC$HSH 000000  
                        _sprintf$1750 00A1                __end_of_LCD_Initialize 2CD4  
                       __CFG_MCLRE$ON 000000                          ___ftmul@cntr 0074  
                        ___param_bank 000000                          ___ftmul@sign 0075  
                               ??_ISR 0004                          ___fttol@exp1 0035  
                        ___fttol@lval 0031          ?i2_wl_module_config_register 0002  
           _wl_module_config_register 2EBC                           LCDPutCmd@ch 0015  
      __size_of_OSCILLATOR_Initialize 0012         __end_of_OSCILLATOR_Initialize 2EFE  
                               ?_main 0001                       __end_of___awdiv 2956  
                     __end_of___ftadd 1E72                       __end_of___awmod 2AC4  
                     __end_of___ftdiv 237C                       __end_of___ftneg 2D6A  
                     __end_of___lldiv 29D8                       __end_of___ftmul 2230  
                     ___awdiv@divisor 001B                       __end_of___llmod 2B96  
                     __end_of___ftsub 2BE2                       __end_of___fttol 26CA  
                      __CFG_DEBUG$OFF 000000                       ___awdiv@counter 001D  
                               _PORTD 000F83                                 _TRISA 000F92  
                               _TRISB 000F93                                 _TRISC 000F94  
                               _TRISD 000F95                                 _TRISE 000F96  
                       __CFG_WRT0$OFF 000000                         __CFG_WRT1$OFF 000000  
                       __CFG_WRT2$OFF 000000                         __CFG_WRT3$OFF 000000  
                        ___lltoft@exp 003A                        __CFG_EBTR0$OFF 000000  
                      __CFG_EBTR1$OFF 000000                        __CFG_EBTR2$OFF 000000  
                      __CFG_EBTR3$OFF 000000                         __CFG_WRTB$OFF 000000  
                       __CFG_WRTC$OFF 000000                         __CFG_WRTD$OFF 000000  
                      __CFG_EBTRB$OFF 000000                       __end_of_dpowers 0829  
                               _scale 17F4                       __end_of_isdigit 2E6E  
                       ___ftpack@sign 0017                __end_of_wl_module_init 2EBC  
                               pclath 000FFA                                 tablat 000FF5  
                 __size_of_LCDPutChar 0026                                 status 000FD8  
                      __CFG_T3CMX$RC0 000000                       __end_of_sprintf 17F4  
                      __CFG_ICPRT$OFF 000000                  _wl_module_data_ready 2E6E  
                      __CFG_PBADEN$ON 000000                       ?_LCD_Initialize 0001  
                     __initialization 2E8A                          __end_of_main 28D2  
                   ?i2_spi_fast_shift 0001                        __CFG_PCLKEN$ON 000000  
                  ??i2_spi_fast_shift 0001         ??i2_wl_module_config_register 0003  
                              ??_main 003B                         ___fttol@sign1 0030  
                       __activetblptr 000002                             ??_LCDGoto 0017  
                   __end_of_LCDPutCmd 2D98                  __size_of__tdiv_to_l_ 0132  
                        LCDPutChar@ch 0015                     __end_of_LCDPutStr 2A54  
                      __CFG_SDOMX$RB3 000000                       __CFG_CCP2MX$RC1 000000  
                  spi_fast_shift@data 0013                      ___llmod@dividend 0013  
                              _ACTCON 000FB5                                ?_scale 0076  
         __size_of_wl_module_get_data 0036                      ___awdiv@dividend 0019  
                    ??_spi_fast_shift 0013              spi_transfer_sync@dataout 0013  
                     ?_wl_module_init 0001                                _ANSELA 000F5B  
                              _ANSELB 000F5C                                _ANSELC 000F5D  
                              _ANSELD 000F5E                                _ANSELE 000F5F  
                    __end_of___ftpack 2840                      __end_of___lltoft 2B30  
                      __CFG_WDTEN$OFF 000000                                i2l3709 0064  
                              i2l3727 0086                                i2l3719 0078  
                              _OSCCON 000FD3                          LCDPutStr@str 0016  
               ?_wl_module_data_ready 0001                        _LCDWriteNibble 2D98  
                      __CFG_XINST$OFF 000000                      _wl_module_config 2D0A  
                    __end_of__powers_ 0850                                ___ftge 26CA  
                              ___wmul 2DC4                             ??___awdiv 001D  
                           ??___ftadd 0086                        __CFG_STVREN$ON 000000  
                           ??___awmod 0017                             ??___ftdiv 0083  
                           ??___ftneg 003B                             ??___lldiv 001B  
                           ??___ftmul 006D                             ??___llmod 001B  
                           ??___ftsub 003B                             ??___fttol 002B  
                              _fround 1E72                                clear_0 2E90  
                    ___awdiv@quotient 001F                       ___awmod@divisor 0015  
                     ___awmod@counter 0017                        main@nRF_status 00EF  
               ___ftmul@f3_as_product 0071                             ??_isdigit 0013  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                    __end_of_spi_init 2E30                             ??_sprintf 009B  
                __CFG_LS48MHZ$SYS24X4 000000                     _SYSTEM_Initialize 2F1E  
              __end_of_LCDWriteNibble 2DC4                            __accesstop 0060  
             __end_of__initialization 2E96                            ___ftadd@f1 0080  
                          ___ftadd@f2 0083                            ___ftge@ff1 008C  
                          ___ftge@ff2 008F                    ?_SYSTEM_Initialize 0001  
                       ___rparam_used 000001                            ___ftdiv@f1 007D  
                          ___ftdiv@f2 0080                            ___ftdiv@f3 0087  
                           LCDGoto@ln 0016                            ___ftneg@f1 0064  
                          ___ftmul@f1 0067                            ___ftmul@f2 006A  
                          ___ftsub@f1 008C                            ___ftsub@f2 008F  
                          ___fttol@f1 0027                        __pcstackCOMRAM 0001  
                 ??_SYSTEM_Initialize 0013                            ___lltoft@c 0036  
                       __end_of_scale 1C0A                          ??_LCDPutChar 0015  
                          __div_to_l_ 24AE    __size_of_wl_module_config_register 0018  
                     __div_to_l_@exp1 001E                       __div_to_l_@cntr 001D  
                             ??_scale 003B             __end_of_SYSTEM_Initialize 2F28  
                     __div_to_l_@quot 0019                       ?_LCDWriteNibble 0013  
          wl_module_data_ready@status 0014                ??_wl_module_data_ready 0014  
                  __end_of_LCDPutChar 2E10                         __div_to_l_@f1 0013  
                       __div_to_l_@f2 0016                             ISR@status 0012  
                       ??__delay_10ms 0015                     __CFG_PLLSEL$PLL4X 000000  
                             ?___ftge 008C                               ?___wmul 0021  
                             ?_fround 0076                             ?___ftpack 0013  
                           ?___lltoft 0036                               _LCDGoto 2C2A  
                             _OSCCON2 000FD2                               _OSCTUNE 000F9B  
                             _SSP1BUF 000FC9     __end_of_wl_module_config_register 2ED4  
                    ??_LCD_Initialize 0016                     __end_of__npowers_ 0877  
                             __Hparam 0000                            _scale$1749 0079  
            wl_module_get_data@status 001B                               __Lparam 0000  
                           ?_spi_init 0001                       __size_of___ftge 00C8  
                             ___awdiv 28D2                               ___ftadd 1C0A  
                             ___awmod 2A54                               ___ftdiv 2230  
                             ___ftneg 2D3A                               ___lldiv 2956  
                     __size_of___wmul 0026                               ___ftmul 20D2  
                             ___llmod 2B30                               ___ftsub 2B96  
                             ___fttol 25D6                          __psmallconst 0800  
                             __pcinit 2E8A                            ??___ftpack 0018  
                     __size_of_fround 0260                               __ramtop 0800  
                 __end_of__delay_10ms 2E50                            ??___lltoft 0060  
                             __ptext0 2840                               __ptext1 2EA4  
                             __ptext2 2E10                               __ptext3 2CD4  
                             __ptext4 2C64                               __ptext5 2E6E  
                             __ptext6 2D0A                               __ptext7 2EBC  
                             __ptext8 2EFE                               __ptext9 088C  
                        __size_of_ISR 00BC                           ?__div_to_l_ 0013  
                             _dpowers 0801                 _OSCILLATOR_Initialize 2EEC  
                             _isdigit 2E50                      ??_wl_module_init 0013  
                    ___awmod@dividend 0013              ??_PIN_MANAGER_Initialize 0013  
            __end_of_wl_module_config 2D3A             __size_ofi2_spi_fast_shift 0010  
                           _LCDPutCmd 2D6A            __size_of_SYSTEM_Initialize 000A  
                             _sprintf 088C                             _LCDPutStr 29D8  
                end_of_initialization 2E96                         __Lmediumconst 0000  
                        _LCDGoto$1025 0019                       ___lldiv@divisor 0017  
                     ___lldiv@counter 001F                               postdec2 000FDD  
                          ??_spi_init 0013                               postinc0 000FEE  
                             postinc2 000FDE                        __tdiv_to_l_@f1 0013  
                      __tdiv_to_l_@f2 0016                    __delay_10ms@length 0013  
                       ??__tdiv_to_l_ 0019                             _PORTDbits 000F83  
        wl_module_config_register@reg 0015            __end_of_wl_module_get_data 2D0A  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                            main@Buffer 00DB  
                          ?_LCDPutCmd 0001                            ?_LCDPutStr 0016  
                         ___ftdiv@exp 008A                            LCDGoto@pos 001B  
                 __size_of__div_to_l_ 0128                           ___ftmul@exp 0070  
                         __delay_10ms 2E30   __end_ofi2_wl_module_config_register 2EEC  
         i2_wl_module_config_register 2ED4                        __end_of___ftge 2792  
                          LCDPutStr@i 001A                        __end_of___wmul 2DEA  
              ?_OSCILLATOR_Initialize 0001                        __end_of_fround 20D2  
                 start_initialization 2E8A                           __end_of_ISR 00C4  
                i2spi_fast_shift@data 0001       __size_of_PIN_MANAGER_Initialize 0048  
                 __end_of__tdiv_to_l_ 24AE                      ??_LCDWriteNibble 0014  
                     __CFG_nLPBOR$OFF 000000               spi_transfer_sync@datain 0015  
                     ___llmod@divisor 0017                       ___llmod@counter 001B  
             spi_transfer_sync@length 0017                wl_module_get_data@data 0019  
             __size_of_spi_fast_shift 0010                              ??___ftge 0092  
                            ??___wmul 0025                     _spi_transfer_sync 2C64  
                            ??_fround 003B                    ?_spi_transfer_sync 0013  
                       sprintf@tmpval 00AB                            fround@prec 007F  
                            ?_LCDGoto 0016                     __size_of___ftpack 00AE  
                   __size_of___lltoft 006C                           __pbssCOMRAM 003B  
                       __pcstackBANK0 0060                   ??_spi_transfer_sync 0019  
                    i2_spi_fast_shift 2F0E                       __CFG_nPWRTEN$ON 000000  
                         ??_LCDPutCmd 0015                          _isdigit$1361 0014  
                         ??_LCDPutStr 0018                           sprintf@flag 00A9  
                         sprintf@fval 00B7                           sprintf@prec 00B5  
                         sprintf@temp 00A6         __size_of_wl_module_data_ready 001C  
              _PIN_MANAGER_Initialize 2BE2             __end_of_spi_transfer_sync 2C9C  
                           __pintcode 0008                              ?___awdiv 0019  
                            ?___ftadd 0080                              ?___awmod 0013  
                            ?___ftdiv 007D                              ?___ftneg 0064  
                            ?___lldiv 0013                              ?___ftmul 0067  
                            ?___llmod 0013                              ?___ftsub 008C  
                           __npowers_ 0850                              ?___fttol 0027  
                    LCDWriteNibble@ch 0014                      LCDWriteNibble@rs 0013  
                   __size_of_spi_init 0020                           __tdiv_to_l_ 237C  
                        ??__div_to_l_ 0019                           __smallconst 0800  
                            ?_isdigit 0001                     ?_wl_module_config 0001  
                            ?_sprintf 0095                        __size_of_scale 0416  
                  ??_wl_module_config 0016            ?_wl_module_config_register 0014  
                      ___wmul@product 0025                              _LATBbits 000F8A  
      wl_module_config_register@value 0014      i2wl_module_config_register@value 0002  
                            _PIR1bits 000F9E                    __end_of__div_to_l_ 25D6  
                    __CFG_WDTPS$32768 000000                     ___wmul@multiplier 0021  
                    __size_of_LCDGoto 003A                     __CFG_CFGPLLEN$OFF 000000  
                     _received_string 003B                           _INTCON2bits 000FF1  
                         _INTCON3bits 000FF0        i2wl_module_config_register@reg 0003  
                  _wl_module_get_data 2CD4                              __Hrparam 0000  
                      _spi_fast_shift 2EFE                              __Lrparam 0000  
                        ?__delay_10ms 0013            __size_of_spi_transfer_sync 0038  
                  __CFG_BOREN$SBORDIS 000000                   ?_wl_module_get_data 0019  
             ??_OSCILLATOR_Initialize 0013               __size_of_LCD_Initialize 0038  
                    __size_of___awdiv 0084                      __size_of___ftadd 0268  
                    __size_of___awmod 0070                      __size_of___ftdiv 014C  
                    __size_of___ftneg 0030                      __size_of___lldiv 0082  
                    __size_of___ftmul 015E                      __size_of___llmod 0066  
                    __size_of___ftsub 004C                      __size_of___fttol 00F4  
                            ___ftpack 2792                           _fround$1747 007C  
                         _fround$1748 0079                              ___lltoft 2AC4  
                          _ANSELBbits 000F5C                            sprintf@exp 00B3  
                          sprintf@val 00AF                      __size_of_isdigit 001E  
__size_ofi2_wl_module_config_register 0018                              __ptext10 17F4  
                            __ptext11 2E50                              __ptext20 2B30  
                            __ptext12 1E72                              __ptext21 2956  
                            __ptext13 2DC4                              __ptext30 2F1E  
                            __ptext22 25D6                              __ptext14 20D2  
                            __ptext31 2BE2                              __ptext23 2B96  
                            __ptext15 2A54                              __ptext40 2ED4  
                            __ptext32 2EEC                              __ptext24 1C0A  
                            __ptext16 28D2                              __ptext41 2F0E  
                            __ptext33 2C9C                              __ptext25 2D3A  
                            __ptext17 237C                              __ptext34 29D8  
                            __ptext26 26CA                              __ptext18 24AE  
                            __ptext35 2DEA                              __ptext27 2230  
                            __ptext19 2AC4                              __ptext36 2C2A  
                            __ptext28 2792                              __ptext37 2D6A  
                            __ptext29 2E30                              __ptext38 2D98  
                        _SSP1CON1bits 000FC6                  ??_wl_module_get_data 001B  
                            __powers_ 0829                      __size_of_sprintf 0F68  
             __size_of_wl_module_init 0018                         __size_of_main 0092  
              __end_of_spi_fast_shift 2F0E              __end_ofi2_spi_fast_shift 2F1E  
                            _spi_init 2E10                              int$flags 004B  
                          _LCDPutChar 2DEA                              main@hall 00BB  
                        _SSP1STATbits 000FC7                            _INTCONbits 000FF2  
                            isdigit@c 0015                              scale@scl 007C  
                            intlevel2 0000                             sprintf@ap 00A4  
                    __tdiv_to_l_@exp1 0021                      __tdiv_to_l_@cntr 0020  
                           sprintf@sp 0095                      __tdiv_to_l_@quot 001C  
                    ___lldiv@dividend 0013               ?_PIN_MANAGER_Initialize 0001  
                     ?_spi_fast_shift 0001                  __CFG_CPUDIV$NOCLKDIV 000000  
                        ?__tdiv_to_l_ 0013          __end_of_wl_module_data_ready 2E8A  
                            sprintf@c 00BA                              sprintf@f 0097  
                    ___lldiv@quotient 001B        __end_of_PIN_MANAGER_Initialize 2C2A  
         ??_wl_module_config_register 0015               __size_of_LCDWriteNibble 002C  
           __size_of_wl_module_config 0030  
