

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Mar 02 15:54:16 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 1.40
    21                           ; Generated 01/12/2016 GMT
    22                           ; 
    23                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F45K50 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     _ANSELA	set	3931
    55  0000                     _ANSELB	set	3932
    56  0000                     _ANSELC	set	3933
    57  0000                     _ANSELD	set	3934
    58  0000                     _ANSELE	set	3935
    59  0000                     _ACTCON	set	4021
    60  0000                     _INTCON2bits	set	4081
    61  0000                     _LATA	set	3977
    62  0000                     _LATB	set	3978
    63  0000                     _LATC	set	3979
    64  0000                     _LATD	set	3980
    65  0000                     _LATE	set	3981
    66  0000                     _OSCCON	set	4051
    67  0000                     _OSCCON2	set	4050
    68  0000                     _OSCTUNE	set	3995
    69  0000                     _PORTD	set	3971
    70  0000                     _PORTDbits	set	3971
    71  0000                     _TRISA	set	3986
    72  0000                     _TRISB	set	3987
    73  0000                     _TRISC	set	3988
    74  0000                     _TRISD	set	3989
    75  0000                     _TRISE	set	3990
    76  0000                     _WPUB	set	3973
    77                           
    78                           	psect	smallconst
    79  000800                     __psmallconst:
    80                           	opt stack 0
    81  000800  00                 	db	0
    82  000801                     STR_1:
    83  000801  20                 	db	32
    84  000802  48                 	db	72	;'H'
    85  000803  65                 	db	101	;'e'
    86  000804  6C                 	db	108	;'l'
    87  000805  6C                 	db	108	;'l'
    88  000806  6F                 	db	111	;'o'
    89  000807  20                 	db	32
    90  000808  57                 	db	87	;'W'
    91  000809  6F                 	db	111	;'o'
    92  00080A  72                 	db	114	;'r'
    93  00080B  6C                 	db	108	;'l'
    94  00080C  64                 	db	100	;'d'
    95  00080D  21                 	db	33
    96  00080E  00                 	db	0
    97                           
    98                           ; #config settings
    99  00080F  00                 	db	0	; dummy byte at the end
   100  0000                     
   101                           	psect	cinit
   102  0009A0                     __pcinit:
   103                           	opt stack 0
   104  0009A0                     start_initialization:
   105                           	opt stack 0
   106  0009A0                     __initialization:
   107                           	opt stack 0
   108  0009A0                     end_of_initialization:
   109                           	opt stack 0
   110  0009A0                     __end_of__initialization:
   111                           	opt stack 0
   112  0009A0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   113  0009A2  6EF8               	movwf	tblptru,c
   114  0009A4  0E08               	movlw	high __Lsmallconst
   115  0009A6  6EF7               	movwf	tblptrh,c
   116  0009A8  0100               	movlb	0
   117  0009AA  EFBC  F004         	goto	_main	;jump to C main() function
   118                           tblptru	equ	0xFF8
   119                           tblptrh	equ	0xFF7
   120                           
   121                           	psect	cstackCOMRAM
   122  000001                     __pcstackCOMRAM:
   123                           	opt stack 0
   124  000001                     LCDWriteNibble@rs:
   125                           	opt stack 0
   126                           
   127                           ; 1 bytes @ 0x0
   128  000001                     	ds	1
   129  000002                     LCDWriteNibble@ch:
   130                           	opt stack 0
   131                           
   132                           ; 1 bytes @ 0x1
   133  000002                     	ds	1
   134  000003                     ??_LCDPutCmd:
   135  000003                     ??_LCDPutChar:
   136                           
   137                           ; 1 bytes @ 0x2
   138  000003                     	ds	1
   139  000004                     LCDPutChar@ch:
   140                           	opt stack 0
   141  000004                     LCDPutCmd@ch:
   142                           	opt stack 0
   143                           
   144                           ; 1 bytes @ 0x3
   145  000004                     	ds	1
   146  000005                     ??_LCD_Initialize:
   147  000005                     LCDPutStr@str:
   148                           	opt stack 0
   149                           
   150                           ; 2 bytes @ 0x4
   151  000005                     	ds	2
   152  000007                     ??_LCDPutStr:
   153                           
   154                           ; 1 bytes @ 0x6
   155  000007                     	ds	2
   156  000009                     LCDPutStr@i:
   157                           	opt stack 0
   158                           
   159                           ; 1 bytes @ 0x8
   160  000009                     	ds	1
   161  00000A                     tblptru	equ	0xFF8
   162                           tblptrh	equ	0xFF7
   163                           
   164                           ; 1 bytes @ 0x9
   165 ;;
   166 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   167 ;;
   168 ;; *************** function _main *****************
   169 ;; Defined at:
   170 ;;		line 63 in file "main.c"
   171 ;; Parameters:    Size  Location     Type
   172 ;;		None
   173 ;; Auto vars:     Size  Location     Type
   174 ;;		None
   175 ;; Return value:  Size  Location     Type
   176 ;;                  1    wreg      void 
   177 ;; Registers used:
   178 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   179 ;; Tracked objects:
   180 ;;		On entry : 0/0
   181 ;;		On exit  : 0/0
   182 ;;		Unchanged: 0/0
   183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   184 ;;      Params:         0       0       0       0       0       0       0       0       0
   185 ;;      Locals:         0       0       0       0       0       0       0       0       0
   186 ;;      Temps:          0       0       0       0       0       0       0       0       0
   187 ;;      Totals:         0       0       0       0       0       0       0       0       0
   188 ;;Total ram usage:        0 bytes
   189 ;; Hardware stack levels required when called:    3
   190 ;; This function calls:
   191 ;;		_LCDPutStr
   192 ;;		_LCD_Initialize
   193 ;;		_SYSTEM_Initialize
   194 ;; This function is called by:
   195 ;;		Startup code after reset
   196 ;; This function uses a non-reentrant model
   197 ;;
   198                           
   199                           	psect	text0
   200  000978                     __ptext0:
   201                           	opt stack 0
   202  000978                     _main:
   203                           	opt stack 28
   204                           
   205                           ;main.c: 66: SYSTEM_Initialize();
   206                           
   207                           ;incstack = 0
   208  000978  ECD7  F004         	call	_SYSTEM_Initialize	;wreg free
   209                           
   210                           ;main.c: 69: LCD_Initialize();
   211  00097C  EC56  F004         	call	_LCD_Initialize	;wreg free
   212                           
   213                           ;main.c: 98: LCDPutStr(" Hello World!");
   214  000980  0E01               	movlw	low STR_1
   215  000982  6E05               	movwf	LCDPutStr@str,c
   216  000984  0E08               	movlw	high STR_1
   217  000986  6E06               	movwf	LCDPutStr@str+1,c
   218  000988  EC08  F004         	call	_LCDPutStr	;wreg free
   219  00098C                     l77:
   220                           
   221                           ;main.c: 114: {
   222  00098C  D7FF               	goto	l77
   223  00098E                     __end_of_main:
   224                           	opt stack 0
   225                           tblptru	equ	0xFF8
   226                           tblptrh	equ	0xFF7
   227                           
   228 ;; *************** function _SYSTEM_Initialize *****************
   229 ;; Defined at:
   230 ;;		line 116 in file "mcc_generated_files/mcc.c"
   231 ;; Parameters:    Size  Location     Type
   232 ;;		None
   233 ;; Auto vars:     Size  Location     Type
   234 ;;		None
   235 ;; Return value:  Size  Location     Type
   236 ;;                  1    wreg      void 
   237 ;; Registers used:
   238 ;;		wreg, status,2, cstack
   239 ;; Tracked objects:
   240 ;;		On entry : 0/0
   241 ;;		On exit  : 0/0
   242 ;;		Unchanged: 0/0
   243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   244 ;;      Params:         0       0       0       0       0       0       0       0       0
   245 ;;      Locals:         0       0       0       0       0       0       0       0       0
   246 ;;      Temps:          0       0       0       0       0       0       0       0       0
   247 ;;      Totals:         0       0       0       0       0       0       0       0       0
   248 ;;Total ram usage:        0 bytes
   249 ;; Hardware stack levels used:    1
   250 ;; Hardware stack levels required when called:    1
   251 ;; This function calls:
   252 ;;		_OSCILLATOR_Initialize
   253 ;;		_PIN_MANAGER_Initialize
   254 ;; This function is called by:
   255 ;;		_main
   256 ;; This function uses a non-reentrant model
   257 ;;
   258                           
   259                           	psect	text1
   260  0009AE                     __ptext1:
   261                           	opt stack 0
   262  0009AE                     _SYSTEM_Initialize:
   263                           	opt stack 29
   264                           
   265                           ;mcc.c: 119: PIN_MANAGER_Initialize();
   266                           
   267                           ;incstack = 0
   268  0009AE  EC32  F004         	call	_PIN_MANAGER_Initialize	;wreg free
   269                           
   270                           ;mcc.c: 120: OSCILLATOR_Initialize();
   271  0009B2  ECC7  F004         	call	_OSCILLATOR_Initialize	;wreg free
   272  0009B6  0012               	return		;funcret
   273  0009B8                     __end_of_SYSTEM_Initialize:
   274                           	opt stack 0
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           
   278 ;; *************** function _PIN_MANAGER_Initialize *****************
   279 ;; Defined at:
   280 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
   281 ;; Parameters:    Size  Location     Type
   282 ;;		None
   283 ;; Auto vars:     Size  Location     Type
   284 ;;		None
   285 ;; Return value:  Size  Location     Type
   286 ;;                  1    wreg      void 
   287 ;; Registers used:
   288 ;;		wreg, status,2
   289 ;; Tracked objects:
   290 ;;		On entry : 0/0
   291 ;;		On exit  : 0/0
   292 ;;		Unchanged: 0/0
   293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   294 ;;      Params:         0       0       0       0       0       0       0       0       0
   295 ;;      Locals:         0       0       0       0       0       0       0       0       0
   296 ;;      Temps:          0       0       0       0       0       0       0       0       0
   297 ;;      Totals:         0       0       0       0       0       0       0       0       0
   298 ;;Total ram usage:        0 bytes
   299 ;; Hardware stack levels used:    1
   300 ;; This function calls:
   301 ;;		Nothing
   302 ;; This function is called by:
   303 ;;		_SYSTEM_Initialize
   304 ;; This function uses a non-reentrant model
   305 ;;
   306                           
   307                           	psect	text2
   308  000864                     __ptext2:
   309                           	opt stack 0
   310  000864                     _PIN_MANAGER_Initialize:
   311                           	opt stack 29
   312                           
   313                           ;pin_manager.c: 56: LATE = 0x00;
   314                           
   315                           ;incstack = 0
   316  000864  0E00               	movlw	0
   317  000866  6E8D               	movwf	3981,c	;volatile
   318                           
   319                           ;pin_manager.c: 57: LATD = 0x00;
   320  000868  0E00               	movlw	0
   321  00086A  6E8C               	movwf	3980,c	;volatile
   322                           
   323                           ;pin_manager.c: 58: LATA = 0x00;
   324  00086C  0E00               	movlw	0
   325  00086E  6E89               	movwf	3977,c	;volatile
   326                           
   327                           ;pin_manager.c: 59: LATB = 0x00;
   328  000870  0E00               	movlw	0
   329  000872  6E8A               	movwf	3978,c	;volatile
   330                           
   331                           ;pin_manager.c: 60: LATC = 0x00;
   332  000874  0E00               	movlw	0
   333  000876  6E8B               	movwf	3979,c	;volatile
   334                           
   335                           ;pin_manager.c: 65: TRISE = 0x07;
   336  000878  0E07               	movlw	7
   337  00087A  6E96               	movwf	3990,c	;volatile
   338                           
   339                           ;pin_manager.c: 66: TRISA = 0xFF;
   340  00087C  6892               	setf	3986,c	;volatile
   341                           
   342                           ;pin_manager.c: 67: TRISB = 0xFF;
   343  00087E  6893               	setf	3987,c	;volatile
   344                           
   345                           ;pin_manager.c: 68: TRISC = 0xC7;
   346  000880  0EC7               	movlw	199
   347  000882  6E94               	movwf	3988,c	;volatile
   348                           
   349                           ;pin_manager.c: 69: TRISD = 0x00;
   350  000884  0E00               	movlw	0
   351  000886  6E95               	movwf	3989,c	;volatile
   352                           
   353                           ;pin_manager.c: 74: ANSELC = 0xC4;
   354  000888  0EC4               	movlw	196
   355  00088A  010F               	movlb	15	; () banked
   356  00088C  6F5D               	movwf	93,b	;volatile
   357                           
   358                           ;pin_manager.c: 75: ANSELB = 0x3F;
   359  00088E  0E3F               	movlw	63
   360  000890  010F               	movlb	15	; () banked
   361  000892  6F5C               	movwf	92,b	;volatile
   362                           
   363                           ;pin_manager.c: 76: ANSELD = 0x00;
   364  000894  0E00               	movlw	0
   365  000896  010F               	movlb	15	; () banked
   366  000898  6F5E               	movwf	94,b	;volatile
   367                           
   368                           ;pin_manager.c: 77: ANSELE = 0x07;
   369  00089A  0E07               	movlw	7
   370  00089C  010F               	movlb	15	; () banked
   371  00089E  6F5F               	movwf	95,b	;volatile
   372                           
   373                           ;pin_manager.c: 78: ANSELA = 0x2F;
   374  0008A0  0E2F               	movlw	47
   375  0008A2  010F               	movlb	15	; () banked
   376  0008A4  6F5B               	movwf	91,b	;volatile
   377                           
   378                           ; BSR set to: 15
   379                           ;pin_manager.c: 83: WPUB = 0xFF;
   380  0008A6  6885               	setf	3973,c	;volatile
   381                           
   382                           ; BSR set to: 15
   383                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 0;
   384  0008A8  9EF1               	bcf	intcon2,7,c	;volatile
   385                           
   386                           ; BSR set to: 15
   387  0008AA  0012               	return		;funcret
   388  0008AC                     __end_of_PIN_MANAGER_Initialize:
   389                           	opt stack 0
   390                           tblptru	equ	0xFF8
   391                           tblptrh	equ	0xFF7
   392                           intcon2	equ	0xFF1
   393                           
   394 ;; *************** function _OSCILLATOR_Initialize *****************
   395 ;; Defined at:
   396 ;;		line 123 in file "mcc_generated_files/mcc.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;		None
   399 ;; Auto vars:     Size  Location     Type
   400 ;;		None
   401 ;; Return value:  Size  Location     Type
   402 ;;                  1    wreg      void 
   403 ;; Registers used:
   404 ;;		wreg, status,2
   405 ;; Tracked objects:
   406 ;;		On entry : 0/0
   407 ;;		On exit  : 0/0
   408 ;;		Unchanged: 0/0
   409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   410 ;;      Params:         0       0       0       0       0       0       0       0       0
   411 ;;      Locals:         0       0       0       0       0       0       0       0       0
   412 ;;      Temps:          0       0       0       0       0       0       0       0       0
   413 ;;      Totals:         0       0       0       0       0       0       0       0       0
   414 ;;Total ram usage:        0 bytes
   415 ;; Hardware stack levels used:    1
   416 ;; This function calls:
   417 ;;		Nothing
   418 ;; This function is called by:
   419 ;;		_SYSTEM_Initialize
   420 ;; This function uses a non-reentrant model
   421 ;;
   422                           
   423                           	psect	text3
   424  00098E                     __ptext3:
   425                           	opt stack 0
   426  00098E                     _OSCILLATOR_Initialize:
   427                           	opt stack 29
   428                           
   429                           ;mcc.c: 126: OSCCON = 0x62;
   430                           
   431                           ; BSR set to: 15
   432                           ;incstack = 0
   433  00098E  0E62               	movlw	98
   434  000990  6ED3               	movwf	4051,c	;volatile
   435                           
   436                           ;mcc.c: 128: OSCCON2 = 0x00;
   437  000992  0E00               	movlw	0
   438  000994  6ED2               	movwf	4050,c	;volatile
   439                           
   440                           ;mcc.c: 130: OSCTUNE = 0x00;
   441  000996  0E00               	movlw	0
   442  000998  6E9B               	movwf	3995,c	;volatile
   443                           
   444                           ;mcc.c: 132: ACTCON = 0x00;
   445  00099A  0E00               	movlw	0
   446  00099C  6EB5               	movwf	4021,c	;volatile
   447  00099E  0012               	return		;funcret
   448  0009A0                     __end_of_OSCILLATOR_Initialize:
   449                           	opt stack 0
   450                           tblptru	equ	0xFF8
   451                           tblptrh	equ	0xFF7
   452                           intcon2	equ	0xFF1
   453                           
   454 ;; *************** function _LCD_Initialize *****************
   455 ;; Defined at:
   456 ;;		line 46 in file "lcd.c"
   457 ;; Parameters:    Size  Location     Type
   458 ;;		None
   459 ;; Auto vars:     Size  Location     Type
   460 ;;		None
   461 ;; Return value:  Size  Location     Type
   462 ;;                  1    wreg      void 
   463 ;; Registers used:
   464 ;;		wreg, status,2, status,0, cstack
   465 ;; Tracked objects:
   466 ;;		On entry : 0/0
   467 ;;		On exit  : 0/0
   468 ;;		Unchanged: 0/0
   469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   470 ;;      Params:         0       0       0       0       0       0       0       0       0
   471 ;;      Locals:         0       0       0       0       0       0       0       0       0
   472 ;;      Temps:          1       0       0       0       0       0       0       0       0
   473 ;;      Totals:         1       0       0       0       0       0       0       0       0
   474 ;;Total ram usage:        1 bytes
   475 ;; Hardware stack levels used:    1
   476 ;; Hardware stack levels required when called:    2
   477 ;; This function calls:
   478 ;;		_LCDPutCmd
   479 ;; This function is called by:
   480 ;;		_main
   481 ;; This function uses a non-reentrant model
   482 ;;
   483                           
   484                           	psect	text4
   485  0008AC                     __ptext4:
   486                           	opt stack 0
   487  0008AC                     _LCD_Initialize:
   488                           	opt stack 28
   489                           
   490                           ;lcd.c: 49: PORTD = 0;
   491                           
   492                           ;incstack = 0
   493  0008AC  0E00               	movlw	0
   494  0008AE  6E83               	movwf	3971,c	;volatile
   495                           
   496                           ;lcd.c: 51: TRISD = 0x00;
   497  0008B0  0E00               	movlw	0
   498  0008B2  6E95               	movwf	3989,c	;volatile
   499                           
   500                           ;lcd.c: 54: PORTDbits.RD7 = 1;
   501  0008B4  8E83               	bsf	3971,7,c	;volatile
   502                           
   503                           ;lcd.c: 57: _delay((unsigned long)((15)*(8000000/4000.0)));
   504  0008B6  0E27               	movlw	39
   505  0008B8  6E05               	movwf	??_LCD_Initialize& (0+255),c
   506  0008BA  0EF5               	movlw	245
   507  0008BC                     u147:
   508  0008BC  2EE8               	decfsz	wreg,f,c
   509  0008BE  D7FE               	bra	u147
   510  0008C0  2E05               	decfsz	??_LCD_Initialize& (0+255),f,c
   511  0008C2  D7FC               	bra	u147
   512  0008C4  F000               	nop	
   513                           
   514                           ;lcd.c: 60: LCDPutCmd(0x32);
   515  0008C6  0E32               	movlw	50
   516  0008C8  EC73  F004         	call	_LCDPutCmd
   517                           
   518                           ;lcd.c: 63: LCDPutCmd(0x28);
   519  0008CC  0E28               	movlw	40
   520  0008CE  EC73  F004         	call	_LCDPutCmd
   521                           
   522                           ;lcd.c: 66: LCDPutCmd(0x0C);
   523  0008D2  0E0C               	movlw	12
   524  0008D4  EC73  F004         	call	_LCDPutCmd
   525                           
   526                           ;lcd.c: 68: LCDPutCmd(0x01);
   527  0008D8  0E01               	movlw	1
   528  0008DA  EC73  F004         	call	_LCDPutCmd
   529                           
   530                           ;lcd.c: 71: LCDPutCmd(0x06);
   531  0008DE  0E06               	movlw	6
   532  0008E0  EC73  F004         	call	_LCDPutCmd
   533  0008E4  0012               	return		;funcret
   534  0008E6                     __end_of_LCD_Initialize:
   535                           	opt stack 0
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           intcon2	equ	0xFF1
   539                           wreg	equ	0xFE8
   540                           
   541 ;; *************** function _LCDPutCmd *****************
   542 ;; Defined at:
   543 ;;		line 118 in file "lcd.c"
   544 ;; Parameters:    Size  Location     Type
   545 ;;  ch              1    wreg     unsigned char 
   546 ;; Auto vars:     Size  Location     Type
   547 ;;  ch              1    3[COMRAM] unsigned char 
   548 ;; Return value:  Size  Location     Type
   549 ;;                  1    wreg      void 
   550 ;; Registers used:
   551 ;;		wreg, status,2, status,0, cstack
   552 ;; Tracked objects:
   553 ;;		On entry : 0/0
   554 ;;		On exit  : 0/0
   555 ;;		Unchanged: 0/0
   556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   557 ;;      Params:         0       0       0       0       0       0       0       0       0
   558 ;;      Locals:         1       0       0       0       0       0       0       0       0
   559 ;;      Temps:          1       0       0       0       0       0       0       0       0
   560 ;;      Totals:         2       0       0       0       0       0       0       0       0
   561 ;;Total ram usage:        2 bytes
   562 ;; Hardware stack levels used:    1
   563 ;; Hardware stack levels required when called:    1
   564 ;; This function calls:
   565 ;;		_LCDWriteNibble
   566 ;; This function is called by:
   567 ;;		_LCD_Initialize
   568 ;;		_LCDGoto
   569 ;; This function uses a non-reentrant model
   570 ;;
   571                           
   572                           	psect	text5
   573  0008E6                     __ptext5:
   574                           	opt stack 0
   575  0008E6                     _LCDPutCmd:
   576                           	opt stack 28
   577                           
   578                           ;incstack = 0
   579                           ;LCDPutCmd@ch stored from wreg
   580  0008E6  6E04               	movwf	LCDPutCmd@ch,c
   581                           
   582                           ;lcd.c: 120: _delay((unsigned long)((5)*(8000000/4000.0)));
   583  0008E8  0E0D               	movlw	13
   584  0008EA  6E03               	movwf	??_LCDPutCmd& (0+255),c
   585  0008EC  0EFC               	movlw	252
   586  0008EE                     u157:
   587  0008EE  2EE8               	decfsz	wreg,f,c
   588  0008F0  D7FE               	bra	u157
   589  0008F2  2E03               	decfsz	??_LCDPutCmd& (0+255),f,c
   590  0008F4  D7FC               	bra	u157
   591                           
   592                           ;lcd.c: 123: LCDWriteNibble(ch,0);
   593  0008F6  0E00               	movlw	0
   594  0008F8  6E01               	movwf	LCDWriteNibble@rs,c
   595  0008FA  5004               	movf	LCDPutCmd@ch,w,c
   596  0008FC  ECA6  F004         	call	_LCDWriteNibble
   597                           
   598                           ;lcd.c: 126: ch = (ch << 4);
   599  000900  3804               	swapf	LCDPutCmd@ch,w,c
   600  000902  0BF0               	andlw	240
   601  000904  6E04               	movwf	LCDPutCmd@ch,c
   602                           
   603                           ;lcd.c: 128: _delay((unsigned long)((1)*(8000000/4000.0)));
   604  000906  0E03               	movlw	3
   605  000908  6E03               	movwf	??_LCDPutCmd& (0+255),c
   606  00090A  0E98               	movlw	152
   607  00090C                     u167:
   608  00090C  2EE8               	decfsz	wreg,f,c
   609  00090E  D7FE               	bra	u167
   610  000910  2E03               	decfsz	??_LCDPutCmd& (0+255),f,c
   611  000912  D7FC               	bra	u167
   612                           
   613                           ;lcd.c: 131: LCDWriteNibble(ch,0);
   614  000914  0E00               	movlw	0
   615  000916  6E01               	movwf	LCDWriteNibble@rs,c
   616  000918  5004               	movf	LCDPutCmd@ch,w,c
   617  00091A  ECA6  F004         	call	_LCDWriteNibble
   618  00091E  0012               	return		;funcret
   619  000920                     __end_of_LCDPutCmd:
   620                           	opt stack 0
   621                           tblptru	equ	0xFF8
   622                           tblptrh	equ	0xFF7
   623                           intcon2	equ	0xFF1
   624                           wreg	equ	0xFE8
   625                           
   626 ;; *************** function _LCDPutStr *****************
   627 ;; Defined at:
   628 ;;		line 135 in file "lcd.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;  str             2    4[COMRAM] PTR const unsigned char 
   631 ;;		 -> STR_1(14), 
   632 ;; Auto vars:     Size  Location     Type
   633 ;;  i               1    8[COMRAM] unsigned char 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   643 ;;      Params:         2       0       0       0       0       0       0       0       0
   644 ;;      Locals:         1       0       0       0       0       0       0       0       0
   645 ;;      Temps:          2       0       0       0       0       0       0       0       0
   646 ;;      Totals:         5       0       0       0       0       0       0       0       0
   647 ;;Total ram usage:        5 bytes
   648 ;; Hardware stack levels used:    1
   649 ;; Hardware stack levels required when called:    2
   650 ;; This function calls:
   651 ;;		_LCDPutChar
   652 ;; This function is called by:
   653 ;;		_main
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text6
   658  000810                     __ptext6:
   659                           	opt stack 0
   660  000810                     _LCDPutStr:
   661                           	opt stack 28
   662                           
   663                           ;lcd.c: 137: uint8_t i=0;
   664                           
   665                           ;incstack = 0
   666  000810  0E00               	movlw	0
   667  000812  6E09               	movwf	LCDPutStr@i,c
   668                           
   669                           ;lcd.c: 140: while (str[i])
   670  000814  D013               	goto	l884
   671  000816                     l880:
   672                           
   673                           ;lcd.c: 141: {
   674                           ;lcd.c: 143: LCDPutChar(str[i++]);
   675  000816  5009               	movf	LCDPutStr@i,w,c
   676  000818  0D01               	mullw	1
   677  00081A  C005  F007         	movff	LCDPutStr@str,??_LCDPutStr
   678  00081E  C006  F008         	movff	LCDPutStr@str+1,??_LCDPutStr+1
   679  000822  50F3               	movf	prodl,w,c
   680  000824  2607               	addwf	??_LCDPutStr,f,c
   681  000826  50F4               	movf	prodh,w,c
   682  000828  2208               	addwfc	??_LCDPutStr+1,f,c
   683  00082A  C007  FFF6         	movff	??_LCDPutStr,tblptrl
   684  00082E  C008  FFF7         	movff	??_LCDPutStr+1,tblptrh
   685  000832                     	if	0	;tblptru may be non-zero
   686  000832                     	endif
   687  000832                     	if	0	;tblptru may be non-zero
   688  000832                     	endif
   689  000832  0008               	tblrd		*
   690  000834  50F5               	movf	tablat,w,c
   691  000836  EC90  F004         	call	_LCDPutChar
   692  00083A  2A09               	incf	LCDPutStr@i,f,c
   693  00083C                     l884:
   694  00083C  5009               	movf	LCDPutStr@i,w,c
   695  00083E  0D01               	mullw	1
   696  000840  C005  F007         	movff	LCDPutStr@str,??_LCDPutStr
   697  000844  C006  F008         	movff	LCDPutStr@str+1,??_LCDPutStr+1
   698  000848  50F3               	movf	prodl,w,c
   699  00084A  2607               	addwf	??_LCDPutStr,f,c
   700  00084C  50F4               	movf	prodh,w,c
   701  00084E  2208               	addwfc	??_LCDPutStr+1,f,c
   702  000850  C007  FFF6         	movff	??_LCDPutStr,tblptrl
   703  000854  C008  FFF7         	movff	??_LCDPutStr+1,tblptrh
   704  000858                     	if	0	;tblptru may be non-zero
   705  000858                     	endif
   706  000858                     	if	0	;tblptru may be non-zero
   707  000858                     	endif
   708  000858  0008               	tblrd		*
   709  00085A  50F5               	movf	tablat,w,c
   710  00085C  0900               	iorlw	0
   711  00085E  B4D8               	btfsc	status,2,c
   712  000860  0012               	return	
   713  000862  D7D9               	goto	l880
   714  000864                     __end_of_LCDPutStr:
   715                           	opt stack 0
   716                           tblptru	equ	0xFF8
   717                           tblptrh	equ	0xFF7
   718                           tblptrl	equ	0xFF6
   719                           tablat	equ	0xFF5
   720                           prodh	equ	0xFF4
   721                           prodl	equ	0xFF3
   722                           intcon2	equ	0xFF1
   723                           wreg	equ	0xFE8
   724                           status	equ	0xFD8
   725                           
   726 ;; *************** function _LCDPutChar *****************
   727 ;; Defined at:
   728 ;;		line 103 in file "lcd.c"
   729 ;; Parameters:    Size  Location     Type
   730 ;;  ch              1    wreg     unsigned char 
   731 ;; Auto vars:     Size  Location     Type
   732 ;;  ch              1    3[COMRAM] unsigned char 
   733 ;; Return value:  Size  Location     Type
   734 ;;                  1    wreg      void 
   735 ;; Registers used:
   736 ;;		wreg, status,2, status,0, cstack
   737 ;; Tracked objects:
   738 ;;		On entry : 0/0
   739 ;;		On exit  : 0/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   742 ;;      Params:         0       0       0       0       0       0       0       0       0
   743 ;;      Locals:         1       0       0       0       0       0       0       0       0
   744 ;;      Temps:          1       0       0       0       0       0       0       0       0
   745 ;;      Totals:         2       0       0       0       0       0       0       0       0
   746 ;;Total ram usage:        2 bytes
   747 ;; Hardware stack levels used:    1
   748 ;; Hardware stack levels required when called:    1
   749 ;; This function calls:
   750 ;;		_LCDWriteNibble
   751 ;; This function is called by:
   752 ;;		_LCDPutStr
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756                           	psect	text7
   757  000920                     __ptext7:
   758                           	opt stack 0
   759  000920                     _LCDPutChar:
   760                           	opt stack 28
   761                           
   762                           ;incstack = 0
   763                           ;LCDPutChar@ch stored from wreg
   764  000920  6E04               	movwf	LCDPutChar@ch,c
   765                           
   766                           ;lcd.c: 105: _delay((unsigned long)((5)*(8000000/4000.0)));
   767  000922  0E0D               	movlw	13
   768  000924  6E03               	movwf	??_LCDPutChar& (0+255),c
   769  000926  0EFC               	movlw	252
   770  000928                     u177:
   771  000928  2EE8               	decfsz	wreg,f,c
   772  00092A  D7FE               	bra	u177
   773  00092C  2E03               	decfsz	??_LCDPutChar& (0+255),f,c
   774  00092E  D7FC               	bra	u177
   775                           
   776                           ;lcd.c: 108: LCDWriteNibble(ch,1);
   777  000930  0E01               	movlw	1
   778  000932  6E01               	movwf	LCDWriteNibble@rs,c
   779  000934  5004               	movf	LCDPutChar@ch,w,c
   780  000936  ECA6  F004         	call	_LCDWriteNibble
   781                           
   782                           ;lcd.c: 111: ch = (ch << 4);
   783  00093A  3804               	swapf	LCDPutChar@ch,w,c
   784  00093C  0BF0               	andlw	240
   785  00093E  6E04               	movwf	LCDPutChar@ch,c
   786                           
   787                           ;lcd.c: 114: LCDWriteNibble(ch,1);
   788  000940  0E01               	movlw	1
   789  000942  6E01               	movwf	LCDWriteNibble@rs,c
   790  000944  5004               	movf	LCDPutChar@ch,w,c
   791  000946  ECA6  F004         	call	_LCDWriteNibble
   792  00094A  0012               	return		;funcret
   793  00094C                     __end_of_LCDPutChar:
   794                           	opt stack 0
   795                           tblptru	equ	0xFF8
   796                           tblptrh	equ	0xFF7
   797                           tblptrl	equ	0xFF6
   798                           tablat	equ	0xFF5
   799                           prodh	equ	0xFF4
   800                           prodl	equ	0xFF3
   801                           intcon2	equ	0xFF1
   802                           wreg	equ	0xFE8
   803                           status	equ	0xFD8
   804                           
   805 ;; *************** function _LCDWriteNibble *****************
   806 ;; Defined at:
   807 ;;		line 76 in file "lcd.c"
   808 ;; Parameters:    Size  Location     Type
   809 ;;  ch              1    wreg     unsigned char 
   810 ;;  rs              1    0[COMRAM] unsigned char 
   811 ;; Auto vars:     Size  Location     Type
   812 ;;  ch              1    1[COMRAM] unsigned char 
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, status,2, status,0
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   822 ;;      Params:         1       0       0       0       0       0       0       0       0
   823 ;;      Locals:         1       0       0       0       0       0       0       0       0
   824 ;;      Temps:          0       0       0       0       0       0       0       0       0
   825 ;;      Totals:         2       0       0       0       0       0       0       0       0
   826 ;;Total ram usage:        2 bytes
   827 ;; Hardware stack levels used:    1
   828 ;; This function calls:
   829 ;;		Nothing
   830 ;; This function is called by:
   831 ;;		_LCDPutChar
   832 ;;		_LCDPutCmd
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           	psect	text8
   837  00094C                     __ptext8:
   838                           	opt stack 0
   839  00094C                     _LCDWriteNibble:
   840                           	opt stack 28
   841                           
   842                           ;incstack = 0
   843                           ;LCDWriteNibble@ch stored from wreg
   844  00094C  6E02               	movwf	LCDWriteNibble@ch,c
   845                           
   846                           ;lcd.c: 79: ch = (ch >> 4);
   847  00094E  3802               	swapf	LCDWriteNibble@ch,w,c
   848  000950  0B0F               	andlw	15
   849  000952  6E02               	movwf	LCDWriteNibble@ch,c
   850                           
   851                           ;lcd.c: 82: ch = (ch & 0x0F);
   852  000954  5002               	movf	LCDWriteNibble@ch,w,c
   853  000956  0B0F               	andlw	15
   854  000958  6E02               	movwf	LCDWriteNibble@ch,c
   855                           
   856                           ;lcd.c: 85: PORTD = (PORTD & 0xF0);
   857  00095A  5083               	movf	3971,w,c	;volatile
   858  00095C  0BF0               	andlw	240
   859  00095E  6E83               	movwf	3971,c	;volatile
   860                           
   861                           ;lcd.c: 88: PORTD = (PORTD | ch);
   862  000960  5083               	movf	3971,w,c	;volatile
   863  000962  1002               	iorwf	LCDWriteNibble@ch,w,c
   864  000964  6E83               	movwf	3971,c	;volatile
   865                           
   866                           ;lcd.c: 91: PORTDbits.RD4 = rs;
   867  000966  B001               	btfsc	LCDWriteNibble@rs,0,c
   868  000968  D002               	bra	u95
   869  00096A  9883               	bcf	3971,4,c	;volatile
   870  00096C  D001               	bra	u96
   871  00096E                     u95:
   872  00096E  8883               	bsf	3971,4,c	;volatile
   873  000970                     u96:
   874                           
   875                           ;lcd.c: 94: PORTDbits.RD5 = 0;
   876  000970  9A83               	bcf	3971,5,c	;volatile
   877                           
   878                           ;lcd.c: 97: PORTDbits.RD6 = 1;
   879  000972  8C83               	bsf	3971,6,c	;volatile
   880                           
   881                           ;lcd.c: 100: PORTDbits.RD6 = 0;
   882  000974  9C83               	bcf	3971,6,c	;volatile
   883  000976  0012               	return		;funcret
   884  000978                     __end_of_LCDWriteNibble:
   885                           	opt stack 0
   886                           tblptru	equ	0xFF8
   887                           tblptrh	equ	0xFF7
   888                           tblptrl	equ	0xFF6
   889                           tablat	equ	0xFF5
   890                           prodh	equ	0xFF4
   891                           prodl	equ	0xFF3
   892                           intcon2	equ	0xFF1
   893                           wreg	equ	0xFE8
   894                           status	equ	0xFD8
   895                           tblptru	equ	0xFF8
   896                           tblptrh	equ	0xFF7
   897                           tblptrl	equ	0xFF6
   898                           tablat	equ	0xFF5
   899                           prodh	equ	0xFF4
   900                           prodl	equ	0xFF3
   901                           intcon2	equ	0xFF1
   902                           wreg	equ	0xFE8
   903                           status	equ	0xFD8
   904                           
   905                           	psect	rparam
   906  0000                     tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           prodh	equ	0xFF4
   911                           prodl	equ	0xFF3
   912                           intcon2	equ	0xFF1
   913                           wreg	equ	0xFE8
   914                           status	equ	0xFD8


Data Sizes:
    Strings     14
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      9       9
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    LCDPutStr@str	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_LCDPutStr
    _LCD_Initialize->_LCDPutCmd
    _LCDPutCmd->_LCDWriteNibble
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_LCDWriteNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     980
                          _LCDPutStr
                     _LCD_Initialize
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Initialize                                       1     1      0     413
                                              4 COMRAM     1     1      0
                          _LCDPutCmd
 ---------------------------------------------------------------------------------
 (2) _LCDPutCmd                                            2     2      0     413
                                              2 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDPutStr                                            5     3      2     567
                                              4 COMRAM     5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           2     2      0     413
                                              2 COMRAM     2     2      0
                     _LCDWriteNibble
 ---------------------------------------------------------------------------------
 (3) _LCDWriteNibble                                       2     1      1     346
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDPutStr
     _LCDPutChar
       _LCDWriteNibble
   _LCD_Initialize
     _LCDPutCmd
       _LCDWriteNibble
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      9       9       1        9.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
ABS                  0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Mar 02 15:54:16 2017

                 _LCD_Initialize 08AC                      ?_LCDPutChar 0001  
                             l77 098C                               u95 096E  
                             u96 0970                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                      __CFG_LVP$ON 000000  
                            l880 0816                              l884 083C  
                   __CFG_CPB$OFF 000000                              u147 08BC  
                            u157 08EE                              u167 090C  
                            u177 0928                     __CFG_CPD$OFF 000000  
                            wreg 000FE8                             STR_1 0801  
                           _LATA 000F89                             _LATB 000F8A  
                           _LATC 000F8B                             _LATD 000F8C  
                           _LATE 000F8D                             _WPUB 000F85  
                           _main 0978                    __CFG_BORV$190 000000  
             __size_of_LCDPutCmd 003A                             prodh 000FF4  
                           prodl 000FF3                             start 0000  
             __size_of_LCDPutStr 0054                    __CFG_IESO$OFF 000000  
         __end_of_LCD_Initialize 08E6                     ___param_bank 000000  
                    LCDPutCmd@ch 0004   __size_of_OSCILLATOR_Initialize 0012  
  __end_of_OSCILLATOR_Initialize 09A0                            ?_main 0001  
                 __CFG_DEBUG$OFF 000000                            _PORTD 000F83  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
                          tablat 000FF5              __size_of_LCDPutChar 002C  
                          status 000FD8                   __CFG_T3CMX$RC0 000000  
                 __CFG_ICPRT$OFF 000000                   __CFG_MCLRE$OFF 000000  
                ?_LCD_Initialize 0001                  __initialization 09A0  
                   __end_of_main 098E                   __CFG_PCLKEN$ON 000000  
                         ??_main 000A                    __activetblptr 000001  
              __end_of_LCDPutCmd 0920                     LCDPutChar@ch 0004  
              __end_of_LCDPutStr 0864                   __CFG_SDOMX$RB3 000000  
                __CFG_CCP2MX$RC1 000000                           _ACTCON 000FB5  
                         _ANSELA 000F5B                           _ANSELB 000F5C  
                         _ANSELC 000F5D                           _ANSELD 000F5E  
                         _ANSELE 000F5F                   __CFG_WDTEN$OFF 000000  
                         _OSCCON 000FD3                     LCDPutStr@str 0005  
                 _LCDWriteNibble 094C                   __CFG_XINST$OFF 000000  
                 __CFG_STVREN$ON 000000                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8             __CFG_LS48MHZ$SYS24X4 000000  
              _SYSTEM_Initialize 09AE           __end_of_LCDWriteNibble 0978  
                     __accesstop 0060          __end_of__initialization 09A0  
                __CFG_PBADEN$OFF 000000               ?_SYSTEM_Initialize 0001  
                  ___rparam_used 000001                   __pcstackCOMRAM 0001  
               __CFG_nPWRTEN$OFF 000000              ??_SYSTEM_Initialize 0001  
                   ??_LCDPutChar 0003        __end_of_SYSTEM_Initialize 09B8  
                ?_LCDWriteNibble 0001               __end_of_LCDPutChar 094C  
              __CFG_PLLSEL$PLL4X 000000                          _OSCCON2 000FD2  
                        _OSCTUNE 000F9B                 ??_LCD_Initialize 0005  
                        __Hparam 0000                          __Lparam 0000  
                   __psmallconst 0800                          __pcinit 09A0  
                        __ramtop 0800                          __ptext0 0978  
                        __ptext1 09AE                          __ptext2 0864  
                        __ptext3 098E                          __ptext4 08AC  
                        __ptext5 08E6                          __ptext6 0810  
                        __ptext7 0920                          __ptext8 094C  
          _OSCILLATOR_Initialize 098E         ??_PIN_MANAGER_Initialize 0001  
                      _LCDPutCmd 08E6       __size_of_SYSTEM_Initialize 000A  
                      _LCDPutStr 0810             end_of_initialization 09A0  
                      _PORTDbits 000F83                       ?_LCDPutCmd 0001  
                     ?_LCDPutStr 0005                       LCDPutStr@i 0009  
         ?_OSCILLATOR_Initialize 0001              start_initialization 09A0  
__size_of_PIN_MANAGER_Initialize 0048                 ??_LCDWriteNibble 0002  
                __CFG_nLPBOR$OFF 000000                      ??_LCDPutCmd 0003  
                    ??_LCDPutStr 0007           _PIN_MANAGER_Initialize 0864  
               LCDWriteNibble@ch 0002                 LCDWriteNibble@rs 0001  
                    __smallconst 0800                 __CFG_WDTPS$32768 000000  
              __CFG_CFGPLLEN$OFF 000000                      _INTCON2bits 000FF1  
                       __Hrparam 0000                         __Lrparam 0000  
                   __Lsmallconst 0800               __CFG_BOREN$SBORDIS 000000  
        ??_OSCILLATOR_Initialize 0001          __size_of_LCD_Initialize 003A  
                  __size_of_main 0016                       _LCDPutChar 0920  
        ?_PIN_MANAGER_Initialize 0001             __CFG_CPUDIV$NOCLKDIV 000000  
             __CFG_FOSC$INTOSCIO 000000   __end_of_PIN_MANAGER_Initialize 08AC  
        __size_of_LCDWriteNibble 002C  
